;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#define SENSOR_0        0
;#define SENSOR_1        1
;#define SENSOR_2        2
;#define SENSOR_3        3
;#define SENSOR_4        4
;#define SENSOR_5        5
;#define SENSOR_EXP      6
;#define FSK_IN          7
;
;#define ADCMUX0         PORTA.3
;#define ADCMUX1         PORTA.4
;#define ADCMUX2         PORTA.5
;
;#define STATUS_0        PORTC.3
;#define STATUS_1        PORTC.2
;#define STATUS_2        PORTC.1
;#define STATUS_3        PORTC.0
;#define STATUS_4        PORTG.1
;#define STATUS_5        PORTG.0
;
;#define TXD_USART_0     PORTE.1
;#define RXD_USART_0     PINE.0
;
;#define PTT             PORTD.7
;#define TXD_USART_1     PORTD.3
;#define RXD_USART_1     PIND.2
;
;#define DEBUG_1         PIND.1
;#define DEBUG_2         PIND.0
;
;#define DAC_0           PORTE.4
;#define DAC_1           PORTE.5
;#define DAC_2           PORTE.6
;#define DAC_3           PORTE.7
;
;#define TONE_1200       1
;#define TONE_2400       0
;
;#define OK              1
;#define STOP            0
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;unsigned char read_adc(unsigned char adc_input);
;
;unsigned char adc_buff;
;bit buff = 0, b1 = 0, b2 = 0, b3 = 0;
;char t0c = 0;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0039 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 003A         // Reinitialize Timer 0 value
; 0000 003B         TCNT0=0xF7;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 003C         // Place your code here
; 0000 003D 
; 0000 003E         if(b1 ^ buff)
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003F         {
; 0000 0040                 if(t0c < 6)
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
; 0000 0041                 {
; 0000 0042                         TXD_USART_0 = 0;
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0043                         PTT = 0;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 0044                         t0c = 0;
;PCODE: $0000001E VOL: 0
; 0000 0045                 }
; 0000 0046 
; 0000 0047                 if(t0c > 5)
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0048                 {
; 0000 0049                         TXD_USART_0 = 1;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 004A                         PTT = 1;
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 004B                         t0c = 0;
;PCODE: $00000027 VOL: 0
; 0000 004C                 }
; 0000 004D         }
;PCODE: $00000028 VOL: 0
; 0000 004E         //TXD_USART_0 = b2 ^ buff;
; 0000 004F         //PTT = b2 ^ buff;
; 0000 0050         b3 = b2;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0051         b2 = b1;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0052         b1 = buff;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0053 
; 0000 0054         buff = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0055 
; 0000 0056         t0c++;
;PCODE: $00000039 VOL: 0
; 0000 0057 
; 0000 0058         //if(adc_buff > 0)      buff = 1;
; 0000 0059         if(t0c > 126)   t0c = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 005A }
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0061 {
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0062 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 // Delay needed for the stabilization of the ADC input voltage
; 0000 0064 //delay_us(1);
; 0000 0065 // Start the AD conversion
; 0000 0066 ADCSRA|=0x40;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0067 // Wait for the AD conversion to complete
; 0000 0068 while ((ADCSRA & 0x10)==0);
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0069 ADCSRA|=0x10;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 006A return ADCH;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006B }
;PCODE: $00000054 VOL: 0
;
;// Declare your global variables here
;
;void init_porta(void)
; 0000 0070 {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0071         PORTA=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0072         DDRA=0x38;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0073 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;
;void init_portc(void)
; 0000 0076 {
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0077         PORTC=0x00;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0078         DDRC=0x0F;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0079 }
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;
;void init_portd(void)
; 0000 007C {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007D         PORTD=0x0F;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 007E         DDRD=0x88;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 007F }
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;
;void init_porte(void)
; 0000 0082 {
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0083         PORTE=0x03;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 0084         DDRE=0xF2;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0085 }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;
;void init_portf(void)
; 0000 0088 {
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0089         PORTF=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008A         DDRF=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 008B }
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;
;void init_portg(void)
; 0000 008E {
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 008F         PORTG=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0090         DDRG=0x03;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0091 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;
;void init_port_all(void)
; 0000 0094 {
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 0095         init_porta();
;PCODE: $00000087 VOL: 0
; 0000 0096         init_portc();
;PCODE: $00000088 VOL: 0
; 0000 0097         init_portd();
;PCODE: $00000089 VOL: 0
; 0000 0098         init_porte();
;PCODE: $0000008A VOL: 0
; 0000 0099         init_portf();
;PCODE: $0000008B VOL: 0
; 0000 009A         init_portg();
;PCODE: $0000008C VOL: 0
; 0000 009B }
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;
;void main(void)
; 0000 009E {
;PCODE: $0000008F VOL: 0
; 0000 009F         init_port_all();
;PCODE: $00000090 VOL: 0
; 0000 00A0 
; 0000 00A1 // Timer/Counter 0 initialization
; 0000 00A2 // Clock source: System Clock
; 0000 00A3 // Clock value: 86.400 kHz
; 0000 00A4 // Mode: Normal top=0xFF
; 0000 00A5 // OC0 output: Disconnected
; 0000 00A6 ASSR=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00A7 TCCR0=0x04;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00A8 TCNT0=0xF7;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00A9 OCR0=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00AA 
; 0000 00AB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00AC TIMSK=0x01;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00AD 
; 0000 00AE ETIMSK=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00AF 
; 0000 00B0 // USART0 initialization
; 0000 00B1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00B2 // USART0 Receiver: On
; 0000 00B3 // USART0 Transmitter: On
; 0000 00B4 // USART0 Mode: Asynchronous
; 0000 00B5 // USART0 Baud Rate: 9600
; 0000 00B6 UCSR0A=0; //x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00B7 UCSR0B=0; //x18;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00B8 UCSR0C=0; //x06;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00B9 UBRR0H=0; //x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00BA UBRR0L=0; //x47;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00BB 
; 0000 00BC // Analog Comparator initialization
; 0000 00BD // Analog Comparator: Off
; 0000 00BE // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00BF ACSR=0x80;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00C0 SFIOR=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00C1 
; 0000 00C2 // ADC initialization
; 0000 00C3 // ADC Clock frequency: 691.200 kHz
; 0000 00C4 // ADC Voltage Reference: AREF pin
; 0000 00C5 // Only the 8 most significant bits of
; 0000 00C6 // the AD conversion result are used
; 0000 00C7 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00C8 ADCSRA=0x84;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C9 
; 0000 00CA // Global enable interrupts
; 0000 00CB #asm("sei")
;PCODE: $000000AF VOL: 0
	sei
;PCODE: $000000B0 VOL: 0
; 0000 00CC 
; 0000 00CD while (1)
;PCODE: $000000B1 VOL: 0
; 0000 00CE       {
; 0000 00CF       // Place your code here
; 0000 00D0         adc_buff = read_adc(FSK_IN);
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D1         if(adc_buff > 0)        buff = 1;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00D2         if(adc_buff < 1)        buff = 0;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 00D3 
; 0000 00D4       }
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00D5 }
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
