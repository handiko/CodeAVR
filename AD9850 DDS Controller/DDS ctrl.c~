/*****************************************************
This program was produced by the
CodeWizardAVR V2.05.0 Professional
Automatic Program Generator
© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
http://www.hpinfotech.com

Project : 
Version : 
Date    : 9/8/2013
Author  : 
Company : 
Comments: 


Chip type               : ATmega32A
Program type            : Application
AVR Core Clock frequency: 16.000000 MHz
Memory model            : Small
External RAM size       : 0
Data Stack size         : 512
*****************************************************/

#include <mega32.h>

#define HHHH (4294967296)

// Alphanumeric LCD Module functions
#include <stdlib.h>
#include <stdint.h>
#include <alcd.h>
#include <delay.h>

// Declare your global variables here

#include <stdio.h>

#define CLK     PORTB.1         
#define FUD     PORTB.2         
#define DAT     PORTB.3         
#define RST     PORTB.4
#define DAT_2   PORTB.0

#define T_DOWN  PINA.0
#define T_UP    PINA.1
#define S_DOWN  PINA.2
#define S_UP    PINA.3

#define LOW     0
#define HIGH    1

eeprom int channel_n = 9;
flash char channel_f[30][15] = 
{
" 1.800.000 Hz", // 1
" 1.900.000 Hz", // 2
" 2.000.000 Hz", // 3

" 3.500.000 Hz", // 4
" 3.600.000 Hz", // 5
" 3.700.000 Hz", // 6
" 3.800.000 Hz", // 7
" 3.900.000 Hz", // 8
" 4.000.000 Hz", // 9

" 7.000.000 Hz", // 10
" 7.100.000 Hz", // 11
" 7.200.000 Hz", // 12
" 7.300.000 Hz", // 13

"10.000.000 Hz", // 14
"10.100.000 Hz", // 15
"10.200.000 Hz", // 16

"14.000.000 Hz", // 17
"14.100.000 Hz", // 18
"14.200.000 Hz", // 19
"14.300.000 Hz", // 20
"14.400.000 Hz", // 21

"18.000.000 Hz", // 22
"18.100.000 Hz", // 23
"18.200.000 Hz", // 24

"21.000.000 Hz", // 25
"21.100.000 Hz", // 26
"21.200.000 Hz", // 27
"21.300.000 Hz", // 28
"21.400.000 Hz", // 29
"21.500.000 Hz"  // 30
};

eeprom int mode = 1;

flash char channel_a[30][30] = 
{
0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,  // 1800000
0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,  // 1900000
0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,  // 2000000

0,0,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,  // 3500000
0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,  // 3600000
0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,  // 3700000
0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,  // 3800000
0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,  // 3900000
0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,  // 4000000

0,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,  // 7000000
0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,  // 7100000
0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,  // 7200000
0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,  // 7300000

0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,1,  // 10000000
0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,  // 10100000  
0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,  // 10200000

0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,  // 14000000
0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,  // 14100000
0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,  // 14200000
0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,  // 14300000
0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,  // 14400000

1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,  // 18000000
1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,  // 18100000
1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,  // 18200000

1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,  // 21000000
1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,  // 21100000
1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,  // 21200000
1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,  // 21300000
1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,  // 21400000
1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0   // 21500000
};

flash char channel_b[30][31] =
{
0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,  // 3600000
0,0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,  // 3800000
0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,  // 4000000

0,0,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,  // 7000000
0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,  // 7200000
0,0,0,1,1,1,1,0,0,1,0,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1,0,1,1,1,1,  // 7400000
0,0,0,1,1,1,1,1,0,0,1,0,0,0,0,1,0,0,1,0,1,1,0,1,0,1,1,1,0,1,1,  // 7600000
0,0,0,1,1,1,1,1,1,1,1,1,0,0,1,0,1,1,1,0,0,1,0,0,1,0,0,0,1,1,1,  // 7800000
0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,  // 8000000

0,0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,  // 14000000
0,0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,  // 14200000
0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,  // 14400000
0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,0,1,1,0,1,0,1,0,0,  // 14600000

0,1,0,1,0,0,0,1,1,1,1,0,1,0,1,1,1,0,0,0,0,1,0,1,0,0,0,1,1,1,1,  // 20000000
0,1,0,1,0,0,1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,  // 20200000  
0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,  // 20400000

0,1,1,1,0,0,1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,  // 28000000
0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,  // 28200000
0,1,1,1,0,1,0,0,0,1,0,1,0,0,1,1,1,0,0,0,1,1,1,0,1,1,1,1,0,0,1,  // 28400000
0,1,1,1,0,1,0,1,0,0,1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,  // 28600000
0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,0,1,0,0,1,0,0,0,0,  // 28800000

1,0,0,1,0,0,1,1,0,1,1,1,0,1,0,0,1,0,1,1,1,1,0,0,0,1,1,0,1,0,1,  // 36000000
1,0,0,1,0,1,0,0,0,1,0,0,0,1,1,0,0,1,1,1,0,0,1,1,1,0,0,0,0,0,0,  // 36200000
1,0,0,1,0,1,0,1,0,0,0,1,1,0,0,0,0,0,1,0,1,0,1,0,1,0,0,1,1,0,0,  // 36400000

1,0,1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,  // 42000000
1,0,1,0,1,1,0,0,1,1,0,1,1,0,0,1,1,1,1,0,1,0,0,0,0,0,1,1,1,1,1,  // 42200000
1,0,1,0,1,1,0,1,1,0,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,  // 42400000
1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,0,1,0,1,0,1,1,0,0,1,1,0,1,1,0,  // 42600000
1,0,1,0,1,1,1,1,0,1,0,0,1,1,1,1,0,0,0,0,1,1,0,1,1,0,0,0,0,1,0,  // 42800000
1,0,1,1,0,0,0,0,0,0,1,0,0,0,0,0,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,  // 43000000
};

char d_channel_n;
char lcd_buff[32];

void display (void);

void dds_reset(void)
{
        CLK = LOW;
        FUD = LOW;
        
        RST = LOW;      delay_us(5);
        RST = HIGH;     delay_us(5);
        RST = LOW;
        
        CLK = LOW;      delay_us(5);
        CLK = HIGH;     delay_us(5);
        CLK = LOW;
        
        DAT = LOW;
        
        FUD = LOW;      delay_us(5);
        FUD = HIGH;     delay_us(5);
        FUD = LOW;
}

void send_data(void)
{
        int i; 
        
        FUD = HIGH;     delay_us(5); 
        FUD = LOW;  
        
        if(mode == 1)
        { 
                for(i=0; i<30; i++)
                {
                        DAT = channel_a[channel_n][29-i]; 
                        CLK = HIGH;     delay_us(5);
                        CLK = LOW;
                }      
                
                for(i=0; i<10; i++)
                {
                        DAT = 0;
                        CLK = HIGH;     delay_us(5);
                        CLK = LOW;
                }
        }
        else
        {
                for(i=0; i<31; i++)
                {
                        DAT = channel_b[channel_n][30-i]; 
                        CLK = HIGH;     delay_us(5);
                        CLK = LOW;
                }      
                
                for(i=0; i<9; i++)
                {
                        DAT = 0;
                        CLK = HIGH;     delay_us(5);
                        CLK = LOW;
                }
        }
        
        FUD = HIGH;     delay_us(5); 
        FUD = LOW;
}

void tuning (void)
{
        if(!T_UP)
        {   
                delay_ms(125);
                          
                d_channel_n = channel_n;
                channel_n++;
                if(channel_n > 29) channel_n = 0;
        }
        
        if(!T_DOWN)
        {
                delay_ms(125);
                
                d_channel_n = channel_n;
                channel_n--;
                if(channel_n < 0) channel_n = 29;
        }                                           
        
        if(!S_UP)
        {
                delay_ms(125);
                
                if(mode == 1) 
                {
                        mode = 2; 
                        d_channel_n++;
                }  
                else
                {
                        mode = 1;
                        d_channel_n++;
                }
        }
        
          
        if(d_channel_n != channel_n)
        {
                send_data();
                display();
                d_channel_n = channel_n;
        }
}


void display (void)
{
        int i;
        
        lcd_clear();
        lcd_gotoxy(0,0);
        if(mode == 1)
        {
                sprintf(lcd_buff,"Channel: %2i A", channel_n + 1); 
        }
        else
        {
                sprintf(lcd_buff,"Channel: %2i B", channel_n + 1); 
        } 
        lcd_puts(lcd_buff); 
        
        lcd_gotoxy(0,1);
        lcd_putsf("F: "); 
        for(i=0;i<15;i++)
        {
                sprintf(lcd_buff,"%c",channel_f[channel_n][i]); 
                lcd_puts(lcd_buff);
        }    
        
        delay_ms(50);
}

void main(void)
{
        PORTA=0xFF;
        DDRA=0x00;
        PORTB=0x00;
        DDRB=0xFF;
        PORTC=0xFF;
        DDRC=0x00;
        PORTD=0x00;
        DDRD=0xFF;

        ACSR=0x80;
        SFIOR=0x00;
        
        lcd_init(16); 
        lcd_clear();      
        
        dds_reset();
        send_data();  
        display();
        delay_ms(150);

        while (1)
        {
                tuning();  
        }
}
