;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/30/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;#include <stdlib.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 004E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004F char status,data;
; 0000 0050 status=UCSR0A;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0051 data=UDR0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0052 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0053    {
; 0000 0054    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0055 #if RX_BUFFER_SIZE0 == 256
; 0000 0056    // special case for receiver buffer size=256
; 0000 0057    if (++rx_counter0 == 0)
; 0000 0058       {
; 0000 0059 #else
; 0000 005A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 005B    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 005C       {
; 0000 005D       rx_counter0=0;
;PCODE: $00000026 VOL: 0
; 0000 005E #endif
; 0000 005F       rx_buffer_overflow0=1;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0060       }
; 0000 0061    }
;PCODE: $0000002A VOL: 0
; 0000 0062 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0069 {
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 006A char data;
; 0000 006B while (rx_counter0==0);
;PCODE: $00000032 VOL: 0
;	data -> R17
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 006C data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 006D #if RX_BUFFER_SIZE0 != 256
; 0000 006E if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 006F #endif
; 0000 0070 #asm("cli")
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
	cli
;PCODE: $00000043 VOL: 0
; 0000 0071 --rx_counter0;
;PCODE: $00000044 VOL: 0
; 0000 0072 #asm("sei")
;PCODE: $00000045 VOL: 0
	sei
;PCODE: $00000046 VOL: 0
; 0000 0073 return data;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0074 }
;PCODE: $0000004A VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0084 {
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0085 if (tx_counter0)
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0086    {
; 0000 0087    --tx_counter0;
;PCODE: $0000004F VOL: 0
; 0000 0088    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0089 #if TX_BUFFER_SIZE0 != 256
; 0000 008A    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 008B #endif
; 0000 008C    }
;PCODE: $0000005A VOL: 0
; 0000 008D }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 0094 {
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0095 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0096 #asm("cli")
;PCODE: $00000067 VOL: 0
	cli
;PCODE: $00000068 VOL: 0
; 0000 0097 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0098    {
; 0000 0099    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 009A #if TX_BUFFER_SIZE0 != 256
; 0000 009B    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009C #endif
; 0000 009D    ++tx_counter0;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009E    }
; 0000 009F else
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A0    UDR0=c;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A1 #asm("sei")
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
	sei
;PCODE: $00000082 VOL: 0
; 0000 00A2 }
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 00AE {
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00AF ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00B0 // Delay needed for the stabilization of the ADC input voltage
; 0000 00B1 delay_us(10);
;PCODE: $0000008B VOL: 0
; 0000 00B2 // Start the AD conversion
; 0000 00B3 ADCSRA|=0x40;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B4 // Wait for the AD conversion to complete
; 0000 00B5 while ((ADCSRA & 0x10)==0);
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B6 ADCSRA|=0x10;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B7 return ADCH;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00B8 }
;PCODE: $00000099 VOL: 0
;
;// Declare your global variables here
;char s1[9];
;char s2[9];
;char s3[9];
;char s4[9];
;char s5[9];
;char s6[9];
;char s8[9];
;
;void main(void)
; 0000 00C4 {
;PCODE: $0000009A VOL: 0
; 0000 00C5 // Declare your local variables here
; 0000 00C6 
; 0000 00C7 // Input/Output Ports initialization
; 0000 00C8 // Port A initialization
; 0000 00C9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00CA // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00CB PORTA=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00CC DDRA=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00CD 
; 0000 00CE // Port B initialization
; 0000 00CF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D1 PORTB=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00D2 DDRB=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00D3 
; 0000 00D4 // Port C initialization
; 0000 00D5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D7 PORTC=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00D8 DDRC=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D9 
; 0000 00DA // Port D initialization
; 0000 00DB // Func7=In Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 00DC // State7=T State6=T State5=T State4=T State3=1 State2=P State1=P State0=P
; 0000 00DD PORTD=0x0F;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00DE DDRD=0x08;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00DF 
; 0000 00E0 // Port E initialization
; 0000 00E1 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 00E2 // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 00E3 PORTE=0x03;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00E4 DDRE=0x02;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00E5 
; 0000 00E6 // Port F initialization
; 0000 00E7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E9 PORTF=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00EA DDRF=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00EB 
; 0000 00EC // Port G initialization
; 0000 00ED // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00EE // State4=T State3=T State2=T State1=T State0=T
; 0000 00EF PORTG=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F0 DDRG=0x00;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 00F1 
; 0000 00F2 // Timer/Counter 0 initialization
; 0000 00F3 // Clock source: System Clock
; 0000 00F4 // Clock value: Timer 0 Stopped
; 0000 00F5 // Mode: Normal top=0xFF
; 0000 00F6 // OC0 output: Disconnected
; 0000 00F7 ASSR=0x00;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 00F8 TCCR0=0x00;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F9 TCNT0=0x00;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00FA OCR0=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 00FB 
; 0000 00FC // Timer/Counter 1 initialization
; 0000 00FD // Clock source: System Clock
; 0000 00FE // Clock value: Timer1 Stopped
; 0000 00FF // Mode: Normal top=0xFFFF
; 0000 0100 // OC1A output: Discon.
; 0000 0101 // OC1B output: Discon.
; 0000 0102 // OC1C output: Discon.
; 0000 0103 // Noise Canceler: Off
; 0000 0104 // Input Capture on Falling Edge
; 0000 0105 // Timer1 Overflow Interrupt: Off
; 0000 0106 // Input Capture Interrupt: Off
; 0000 0107 // Compare A Match Interrupt: Off
; 0000 0108 // Compare B Match Interrupt: Off
; 0000 0109 // Compare C Match Interrupt: Off
; 0000 010A TCCR1A=0x00;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 010B TCCR1B=0x00;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 010C TCNT1H=0x00;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 010D TCNT1L=0x00;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 010E ICR1H=0x00;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 010F ICR1L=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0110 OCR1AH=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 0111 OCR1AL=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0112 OCR1BH=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0113 OCR1BL=0x00;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 0114 OCR1CH=0x00;
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 0115 OCR1CL=0x00;
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0116 
; 0000 0117 // Timer/Counter 2 initialization
; 0000 0118 // Clock source: System Clock
; 0000 0119 // Clock value: Timer2 Stopped
; 0000 011A // Mode: Normal top=0xFF
; 0000 011B // OC2 output: Disconnected
; 0000 011C TCCR2=0x00;
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 011D TCNT2=0x00;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 011E OCR2=0x00;
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 011F 
; 0000 0120 // Timer/Counter 3 initialization
; 0000 0121 // Clock source: System Clock
; 0000 0122 // Clock value: Timer3 Stopped
; 0000 0123 // Mode: Normal top=0xFFFF
; 0000 0124 // OC3A output: Discon.
; 0000 0125 // OC3B output: Discon.
; 0000 0126 // OC3C output: Discon.
; 0000 0127 // Noise Canceler: Off
; 0000 0128 // Input Capture on Falling Edge
; 0000 0129 // Timer3 Overflow Interrupt: Off
; 0000 012A // Input Capture Interrupt: Off
; 0000 012B // Compare A Match Interrupt: Off
; 0000 012C // Compare B Match Interrupt: Off
; 0000 012D // Compare C Match Interrupt: Off
; 0000 012E TCCR3A=0x00;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 012F TCCR3B=0x00;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 0130 TCNT3H=0x00;
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 0131 TCNT3L=0x00;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0132 ICR3H=0x00;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 0133 ICR3L=0x00;
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0134 OCR3AH=0x00;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0135 OCR3AL=0x00;
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0136 OCR3BH=0x00;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0137 OCR3BL=0x00;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0138 OCR3CH=0x00;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 0139 OCR3CL=0x00;
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 013A 
; 0000 013B // External Interrupt(s) initialization
; 0000 013C // INT0: Off
; 0000 013D // INT1: Off
; 0000 013E // INT2: Off
; 0000 013F // INT3: Off
; 0000 0140 // INT4: Off
; 0000 0141 // INT5: Off
; 0000 0142 // INT6: Off
; 0000 0143 // INT7: Off
; 0000 0144 EICRA=0x00;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0145 EICRB=0x00;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
; 0000 0146 EIMSK=0x00;
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
; 0000 0147 
; 0000 0148 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0149 TIMSK=0x00;
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 014A 
; 0000 014B ETIMSK=0x00;
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 014C 
; 0000 014D // USART0 initialization
; 0000 014E // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 014F // USART0 Receiver: On
; 0000 0150 // USART0 Transmitter: On
; 0000 0151 // USART0 Mode: Asynchronous
; 0000 0152 // USART0 Baud Rate: 9600
; 0000 0153 UCSR0A=0x00;
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0154 UCSR0B=0xD8;
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0155 UCSR0C=0x06;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0156 UBRR0H=0x00;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0157 UBRR0L=0x47;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0158 
; 0000 0159 // USART1 initialization
; 0000 015A // USART1 disabled
; 0000 015B UCSR1B=0x00;
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 015C 
; 0000 015D // Analog Comparator initialization
; 0000 015E // Analog Comparator: Off
; 0000 015F // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0160 ACSR=0x80;
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 0161 SFIOR=0x00;
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
; 0000 0162 
; 0000 0163 // ADC initialization
; 0000 0164 // ADC Clock frequency: 691.200 kHz
; 0000 0165 // ADC Voltage Reference: AREF pin
; 0000 0166 // Only the 8 most significant bits of
; 0000 0167 // the AD conversion result are used
; 0000 0168 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0169 ADCSRA=0x84;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 016A 
; 0000 016B // SPI initialization
; 0000 016C // SPI disabled
; 0000 016D SPCR=0x00;
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 016E 
; 0000 016F // TWI initialization
; 0000 0170 // TWI disabled
; 0000 0171 TWCR=0x00;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0172 
; 0000 0173 // Global enable interrupts
; 0000 0174 #asm("sei")
;PCODE: $00000117 VOL: 0
	sei
;PCODE: $00000118 VOL: 0
; 0000 0175 
; 0000 0176 while (1)
;PCODE: $00000119 VOL: 0
; 0000 0177       {
; 0000 0178       // Place your code here
; 0000 0179         itoa(read_adc(0),s1);
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 017A         itoa(read_adc(1),s2);
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 017B         itoa(read_adc(2),s3);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 017C         itoa(read_adc(3),s4);
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 017D         itoa(read_adc(4),s5);
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 017E         itoa(read_adc(5),s6);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 017F         itoa(read_adc(7),s8);
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0180 
; 0000 0181         puts(s1);putchar(13);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0182         puts(s2);putchar(13);
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0183         puts(s3);putchar(13);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
; 0000 0184         puts(s4);putchar(13);
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0185         puts(s5);putchar(13);
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
; 0000 0186         puts(s6);putchar(13);
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0187         puts(s8);putchar(13);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0188 
; 0000 0189 
; 0000 018A       }
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 018B }
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
