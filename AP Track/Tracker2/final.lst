
AVRASM ver. 2.1.30  D:\Punya Koko\LPKTA\Tracker2\final.asm Tue May 21 15:28:34 2013

D:\Punya Koko\LPKTA\Tracker2\final.asm(961): warning: Register r3 already defined by the .DEF directive
D:\Punya Koko\LPKTA\Tracker2\final.asm(962): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : No
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 223
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _xcount=R3
                 	.DEF _crc=R4
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 c054      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c057      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _matrix:
000013 0a07
000014 0e0d
000015 0e0f
000016 0a0d      	.DB  0x7,0xA,0xD,0xE,0xF,0xE,0xD,0xA
000017 0507
000018 0102
000019 0100
00001a 0502      	.DB  0x7,0x5,0x2,0x1,0x0,0x1,0x2,0x5
                 _tbl10_G100:
00001b 2710
00001c 03e8
00001d 0064
00001e 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00001f 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000020 1000
000021 0100
000022 0010
000023 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x8A:
D:\Punya Koko\LPKTA\Tracker2\final.asm(1006): warning: .cseg .db misalignment - padding zero byte
000024 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000025 0001      	.DW  0x01
000026 0003      	.DW  0x03
000027 0048      	.DW  _0x8A*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbec      	OUT  EECR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002d e1f8      	LDI  R31,0x18
00002e b7a4      	IN   R26,MCUSR
00002f 7fa7      	CBR  R26,8
000030 bfa4      	OUT  MCUSR,R26
000031 bdf1      	OUT  WDTCR,R31
000032 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000038 e880      	LDI  R24,__CLEAR_SRAM_SIZE
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004f e0e0      	LDI  R30,__GPIOR0_INIT
000050 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000051 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000052 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000056 c25d      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/***************************************************************************************
                 ;*
                 ;*				HANYA UNTUK TUJUAN EDUKASIONAL
                 ;*				FOR EDUCATION PURPOSE ONLY
                 ;*
                 ;*				COPYRIGHT (c)2012, HANDIKO GESANG ANUGRAH SEJATI
                 ;*				(handikogesang@gmail.com)
                 ;*
                 ;*				2 FEBRUARY 2012
                 ;*
                 ;*				BASIC APRS BEACON, GPS PARSER, & APRS ENCODER ONLY
                 ;*				TANPA FITUR SMART BEACONING(TM), TELEMETRY, DAN PC CONFIG
                 ;*
                 ;*				LAST REVISION 16 OKTOBER 2012
                 ;*
                 ;*				DOKUMEN INI BEBAS UNTUK DISEBARLUASKAN.
                 ;*				HARAP TIDAK MELAKUKAN PERUBAHAN APAPUN ATAS ISI DOKUMEN INI
                 ;*				DAN MENCANTUMKAN NAMA DAN EMAIL PENULIS JIKA INGIN MENYEBAR-
                 ;*				LUASKAN DOKUMEN INI.
                 ;*
                 ;* Project 		: 	APRS BEACON
                 ;* Version 		: 	GPS SUPPORTED, EEPROM DATA PROTECTOR SUPPORTED
                 ;* Date    		: 	02/02/2012
                 ;* Author  		: 	HANDIKO GESANG ANUGRAH S.
                 ;* Company 		: 	TIM INSTRUMENTASI TELEMETRI DAN TELEKONTROL
                 ;* 	  			LABORATORIUM SENSOR DAN SISTEM TELEKONTROL
                 ;* 	  			JURUSAN TEKNIK FISIKA
                 ;*           			FAKULTAS TEKNIK
                 ;*           			UNIVERSITAS GADJAH MADA
                 ;*
                 ;* Chip type           	: 	ATtiny2313
                 ;* Program type        	: 	Application
                 ;* Clock frequency     	: 	11.059200 MHz
                 ;* Memory model        	: 	Tiny
                 ;* External SRAM size  	: 	0
                 ;* Data Stack size     	: 	32
                 ;*
                 ;* File			:	final.c
                 ;*
                 ;* Fungsi - fungsi	: 	void set_dac(char value)
                 ;* 				void set_nada(char i_nada)
                 ;* 				void kirim_karakter(unsigned char input)
                 ;* 				void kirim_paket(void)
                 ;* 				void ubah_nada(void)
                 ;* 				void hitung_crc(char in_crc)
                 ;* 				void kirim_crc(void)
                 ;* 				void ekstrak_gps(void)
                 ;*
                 ;* Variabel global	:	char rx_buffer[RX_BUFFER_SIZE]
                 ;* 				bit rx_buffer_overflow
                 ;*                               flash char matrix[ ]
                 ;*				eeprom char data_1[ ]
                 ;*				eeprom char posisi_lat[ ]
                 ;*				eeprom char posisi_long[ ]
                 ;*				eeprom char data_extension[ ]
                 ;*				eeprom char komentar[ ]
                 ;*				eeprom char status[ ]
                 ;*				eeprom char beacon_stat
                 ;*				char xcount
                 ;*				bit nada
                 ;*				static char bit_stuff
                 ;*				unsigned short crc;
                 ;*
                 ;* Konstanta custom	:	_1200
                 ;* 				_2200
                 ;* 				CONST_1200
                 ;* 				CONST_2200
                 ;* 				GAP_TIME_
                 ;*				FLAG_
                 ;*				CONTROL_FIELD_
                 ;*				PROTOCOL_ID_
                 ;*				TD_POSISI_
                 ;*				TD_STATUS_
                 ;*				SYM_TAB_OVL_
                 ;*				SYM_CODE_
                 ;*
                 ;* Chip I/O		:	TX_NOW  PIND.3
                 ;* 				PTT     PORTB.3
                 ;* 				DAC_0   PORTB.7
                 ;* 				DAC_1   PORTB.6
                 ;* 				DAC_2   PORTB.5
                 ;* 				DAC_3   PORTB.4
                 ;* 				L_BUSY	PORTD.5
                 ;* 				L_STBY  PORTD.4
                 ;*
                 ;* Vektor		:	RJMP __RESET
                 ;*				RJMP _ext_int1_isr
                 ;*				RJMP _timer1_ovf_isr
                 ;*
                 ;* Fuse bit		:	BODLEVEL1 = 0
                 ;*
                 ;*
                 ;***************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <tiny4313_bits.h>
                 ;
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;*
                 ;*/
                 ;// definisi konstanta kondisi tone yang dikirimkan
                 ;#define _1200		0
                 ;#define _2200		1
                 ;
                 ;// definisi konstanta waktu de-sampling (rekonstruksi) diskrit gelombang sinus untuk tone
                 ;	// 1200Hz dan 2200Hz dalam microsecond (us). Silahkan fine tune konstanta ini untuk
                 ;        // adjusting baudrate dan cek hasilnya dengan menginputkan audio dari hardware APRS
                 ;        // pada PC / Laptop lalu cek hasil tone dan baudrate dengan Cool Edit pro pada
                 ;        // tampilan waveform atau spektral.
                 ;
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi ukuran
                 ;#ifdef	_OPTIMIZE_SIZE_
                 ;	#define CONST_1200      46
                 ;	#define CONST_2200      25  // 22-25    22-->2400Hz   25-->2200Hz
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi kecepatan
                 ;#else
                 ;	#define CONST_1200      50
                 ;	#define CONST_2200      25
                 ;#endif
                 ;
                 ;// waktu jeda antara transmisi data dalam detik (s)
                 ;#define GAP_TIME_	30
                 ;
                 ;// konstanta waktu opening flag
                 ;#define TX_DELAY_	45
                 ;
                 ;// definisi konstanta karakter Flag
                 ;#define FLAG_		0x7E
                 ;
                 ;// definisi konstanta karakter Control Field
                 ;#define	CONTROL_FIELD_	0x03
                 ;
                 ;// definisi konstanta karakter PID
                 ;#define PROTOCOL_ID_	0xF0
                 ;
                 ;// definisi konstanta karakter Tipe Data posisi
                 ;#define TD_POSISI_	'!'
                 ;
                 ;// definisi konstanta karakter Tipe Data status
                 ;#define TD_STATUS_	'>'
                 ;
                 ;// definisi konstanta karakter simbol tabel dan overlay (9)
                 ;#define SYM_TAB_OVL_	'9'
                 ;
                 ;// definisi konstanta karakter simbol station (No.Digi)
                 ;#define SYM_CODE_	'#'
                 ;
                 ;// konstanta waktu closing flag
                 ;#define TX_TAIL_	15
                 ;
                 ;//	AKHIR DARI DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;
                 ;
                 ;/**************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <delay.h>
                 ;#include <stdarg.h>
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI INPUT - OUTPUT ATTINY2313
                 ;*
                 ;*/
                 ;// definisi input TX manual (request interupsi eksternal) INT1
                 ;#define TX_NOW  PIND.3
                 ;
                 ;// definisi output LED TX dan transistor sebagai switch TX (Hi = TX, Lo = waiting)
                 ;#define PTT     PORTB.3
                 ;
                 ;// definisi output tegangan DAC ladder resistor sebagai generator sinusoid ( DAC_0 = LSB,
                 ;	// DAC_3 = MSB )
                 ;#define DAC_0   PORTB.7
                 ;#define DAC_1   PORTB.6
                 ;#define DAC_2   PORTB.5
                 ;#define DAC_3   PORTB.4
                 ;
                 ;// definisi output LED saat terima dan ekstrak data GPS (Hi = parsing, Lo = waiting)
                 ;#define L_BUSY	PORTD.5
                 ;
                 ;// definisi output LED saat menunggu interupsi (Hi = waiting, Lo = ada proses)
                 ;#define L_STBY  PORTD.4
                 ;
                 ;//	AKHIR DARI DEFINISI INPUT - OUTPUT ATTINY2313
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;*
                 ;*/
                 ;void set_dac(char value);
                 ;void set_nada(char i_nada);
                 ;void kirim_karakter(unsigned char input);
                 ;void kirim_paket(void);
                 ;void ubah_nada(void);
                 ;void hitung_crc(char in_crc);
                 ;void kirim_crc(void);
                 ;void ekstrak_gps(void);
                 ;
                 ;
                 ;//	AKHIR DARI DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI VARIABEL GLOBAL
                 ;*
                 ;*/
                 ;
                 ;// variabel penyimpan nilai rekonstruksi diskrit gelombang sinusoid (matrix 16 ele.)
                 ;flash char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
                 ;
                 ;// variabel penyimpan data adresses
                 ;eeprom unsigned char data_1[28] =
                 ;{
                 ;	// destination field, tergeser kiri 1 bit
                 ;        ('A'<<1),('P'<<1),('A'<<1),('V'<<1),('R'<<1),('0'<<1),((0 + '0')<<1),
                 ;
                 ;        // source field, tergeser kiri 1 bit
                 ;	//('Y'<<1),('D'<<1),('2'<<1),('X'<<1),('A'<<1),('C'<<1),((11 + '0')<<1),
                 ;        ('Y'<<1),('D'<<1),('2'<<1),('X'<<1),('A'<<1),('C'<<1),((9 + '0')<<1),
                 ;
                 ;        // first path, tergeser kiri 1 bit
                 ;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),((1 + '0')<<1),
                 ;
                 ;        // last path, tergeser kiri 1 bit
                 ;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),((2 + '0')<<1)+1
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi lintang dan update data gps
                 ;eeprom char posisi_lat[8] =
                 ;{
                 ;	// latitude
                 ;        '0','7','4','3','.','3','1','S'
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi bujur dan update data gps
                 ;eeprom char posisi_long[9] =
                 ;{
                 ;	// longitude
                 ;        '1','1','0','2','3','.','5','2','E'
                 ;};
                 ;
                 ;eeprom char altitude[6];
                 ;
                 ;// variabel penyimpan data extensi tipe PHGD
                 ;/*eeprom char data_extension[7] =
                 ;{
                 ;	// header tipe data ekstensi
                 ;        'P','H','G',
                 ;        */
                 ;        /************************************************************************************************
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;	|	PHGD CODE (Power Height Gain Directivity)						|
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;        |	P		|	H		|	G		|	D		|
                 ;        |-----------------------|-----------------------|-----------------------|-----------------------|
                 ;        |  0 rep.of  0 watts	|  0 rep.of  10 ft.	|  0 rep.of   0dBi	|  0 rep.of  omni.	|
                 ;        |  1 rep.of  1 watts	|  1 rep.of  20 ft.	|  1 rep.of   1dBi	|  1 rep.of  NE		|
                 ;        |  2 rep.of  4 watts	|  2 rep.of  40 ft.	|  2 rep.of   2dBi	|  2 rep.of  E		|
                 ;        |  3 rep.of  9 watts	|  3 rep.of  80 ft.	|  3 rep.of   3dBi	|  3 rep.of  SE		|
                 ;        |  4 rep.of  16 watts   |  4 rep.of  160 ft.	|  4 rep.of   4dBi	|  4 rep.of  S		|
                 ;        |  5 rep.of  25 watts 	|  5 rep.of  320 ft.	|  5 rep.of   5dBi	|  5 rep.of  SW		|
                 ;        |  6 rep.of  36 watts	|  6 rep.of  640 ft.	|  6 rep.of   6dBi	|  6 rep.of  W		|
                 ;        |  7 rep.of  49 watts	|  7 rep.of  1280 ft.	|  7 rep.of   7dBi	|  7 rep.of  NW		|
                 ;        |  8 rep.of  64 watts	|  8 rep.of  2560 ft.	|  8 rep.of   8dBi	|  8 rep.of  N		|
                 ;        |  9 rep.of  81 watts	|  9 rep.of  5120 ft.	|  9 rep.of   9dBi	|-----------------------|
                 ;        *************************************************************************************************/
                 ;
                 ;        /*
                 ;        // nilai representasi dari PHGD
                 ;        // power : 4 watts, P = 2
                 ;        '2',
                 ;
                 ;        // height above average terrain : 10 feet, H = 0
                 ;        '0',
                 ;
                 ;        // antenna gain : 2dBi, G = 2
                 ;        '2',
                 ;
                 ;        // antenna directivity : omnidirectional, D = 0
                 ;        '0'
                 ;
                 ;};  */
                 ;
                 ;// variabel penyimpan konstanta string komentar
                 ;eeprom char komentar[20] =
                 ;{
                 ;	// komentar
                 ;        'U','j','i',' ','C','o','b','a',' ','A','P','R','S',' ','T','r','a','c','e','r'
                 ;
                 ;};
                 ;
                 ;// variabel penyimpan konstanta string status
                 ;/*eeprom char status[47] =
                 ;{
                 ;	// status teks
                 ;        'A','T','t','i','n','y','2','3','1','3',' ',
                 ;        'A','P','R','S',' ','t','r','a','c','k','e','r',' ',
                 ;        'h','a','n','d','i','k','o','g','e','s','a','n','g','@','g','m','a','i','l','.','c','o','m'
                 ;};*/
                 ;
                 ;// variabel pengingat urutan beacon dan status
                 ;eeprom char beacon_stat = 0;
                 ;
                 ;// variabel penyimpan nilai urutan interupsi, 0 ketika inisialisasi dan reset, 1 ketika TX,
                 ;	// 2 - GAP_TIME_ ketika parsing data gps
                 ;char xcount = 0;
                 ;
                 ;// variabel penyimpan tone terakhir, _1200 = 0, _2200 = 1, inisialisasi sebagai 1200Hz
                 ;bit nada = _1200;
                 ;
                 ;// variabel penyimpan enablisasi bit stuffing, 0 = disable bit stuffing, 1 = enable bit stuffing
                 ;static char bit_stuff = 0;
                 ;
                 ;// variabel penyimpan nilai sementara dan nilai akhir CRC-16 CCITT
                 ;unsigned short crc;
                 ;
                 ;//	AKHIR DARI DEKLARASI VARIABEL GLOBAL
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	KONSTANTA EVALUATOR
                 ;*
                 ;*/
                 ;// cek define _1200
                 ;#ifndef	_1200
                 ;#error	"KONSTANTA _1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define _2200
                 ;#ifndef	_2200
                 ;#error	"KONSTANTA _2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_1200
                 ;#ifndef	CONST_1200
                 ;#error	"KONSTANTA CONST_1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_2200
                 ;#ifndef	CONST_2200
                 ;#error	"KONSTANTA CONST_2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define GAP_TIME_
                 ;#ifndef	GAP_TIME_
                 ;#error	"KONSTANTA GAP_TIME_ BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek nilai GAP_TIME_ (harus antara 15 - 30)
                 ;#if	(GAP_TIME_ < 15)
                 ;//#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu singkat menyebabkan kepadatan traffic"
                 ;#endif
                 ;#if	(GAP_TIME_ > 60)
                 ;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu panjang menyebabkan 'loose of track'  "
                 ;#endif
                 ;
                 ;//	AKHIR DARI KONSTANTA EVALUATOR
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0176 /***************************************************************************************
                 ; 0000 0177 *	ABSTRAKSI	:	interupsi eksternal, ketika input TX_NOW bernilai LOW,
                 ; 0000 0178 *				[EXT_INT1] aktif
                 ; 0000 0179 *
                 ; 0000 017A *      	INPUT		:	input TX_NOW
                 ; 0000 017B *	OUTPUT		:       LED standby dan LED busy
                 ; 0000 017C *	RETURN		:       tak ada
                 ; 0000 017D */
                 ; 0000 017E {
                 
                 	.CSEG
                 _ext_int1_isr:
000057 d28e      	RCALL SUBOPT_0x0
                 ; 0000 017F 	// matikan LED standby
                 ; 0000 0180         L_STBY = 0;
                 ; 0000 0181 
                 ; 0000 0182         // tunggu 250ms (bounce switch)
                 ; 0000 0183         delay_ms(250);
000058 efea      	LDI  R30,LOW(250)
000059 e0f0      	LDI  R31,HIGH(250)
00005a d29a      	RCALL SUBOPT_0x1
                 ; 0000 0184 
                 ; 0000 0185         // kirim paket data
                 ; 0000 0186         kirim_paket();
                 ; 0000 0187 
                 ; 0000 0188         // nyalakan LED standby
                 ; 0000 0189         L_STBY = 1;
00005b 9a94      	SBI  0x12,4
                 ; 0000 018A 
                 ; 0000 018B } 	// EndOf interrupt [EXT_INT1] void ext_int1_isr(void)
00005c c017      	RJMP _0x89
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 0190 /***************************************************************************************
                 ; 0000 0191 *	ABSTRAKSI  	: 	interupsi overflow TIMER 1 [TIM1_OVF], di-set overflow
                 ; 0000 0192 *				ketika waktu telah mencapai 1 detik. Pengendali urutan
                 ; 0000 0193 *				waktu (timeline)antara transmisi data APRS dan parsing
                 ; 0000 0194 *				data gps
                 ; 0000 0195 *
                 ; 0000 0196 *      	INPUT		:	tak ada
                 ; 0000 0197 *	OUTPUT		:       kondisi LED standby dan LED busy
                 ; 0000 0198 *	RETURN		:       tak ada
                 ; 0000 0199 */
                 ; 0000 019A {
                 _timer1_ovf_isr:
00005d d288      	RCALL SUBOPT_0x0
                 ; 0000 019B 	// matikan LED stanby
                 ; 0000 019C         L_STBY = 0;
                 ; 0000 019D 
                 ; 0000 019E         // tambahkan 1 nilai variabel xcount
                 ; 0000 019F         xcount++;
00005e 9433      	INC  R3
                 ; 0000 01A0 
                 ; 0000 01A1         // seleksi nilai variabel xcount
                 ; 0000 01A2         if((xcount%2) == 0)
00005f 2da3      	MOV  R26,R3
000060 e0e2      	LDI  R30,LOW(2)
000061 d349      	RCALL __MODB21
000062 30e0      	CPI  R30,0
000063 f419      	BRNE _0x9
                 ; 0000 01A3         {	// jika ya
                 ; 0000 01A4         	// nyalakan LED busy
                 ; 0000 01A5                 L_BUSY = 1;
000064 9a95      	SBI  0x12,5
                 ; 0000 01A6 
                 ; 0000 01A7                 // dapatkan data koordinat sekarang
                 ; 0000 01A8                 ekstrak_gps();
000065 d129      	RCALL _ekstrak_gps
                 ; 0000 01A9 
                 ; 0000 01AA                 //matikan LED busy
                 ; 0000 01AB                 L_BUSY = 0;
000066 9895      	CBI  0x12,5
                 ; 0000 01AC         }
                 ; 0000 01AD 
                 ; 0000 01AE         // terima dan ekstrak data gps ketika timer detik bernilai genap saja
                 ; 0000 01AF         if((xcount%8) == 0)
                 _0x9:
000067 2da3      	MOV  R26,R3
000068 e0e8      	LDI  R30,LOW(8)
000069 d341      	RCALL __MODB21
00006a 30e0      	CPI  R30,0
00006b f431      	BRNE _0xE
                 ; 0000 01B0         {	// jika ya
                 ; 0000 01B1         	// nyalakan LED busy
                 ; 0000 01B2                 L_BUSY = 1;
00006c 9a95      	SBI  0x12,5
                 ; 0000 01B3 
                 ; 0000 01B4                 // dapatkan data koordinat sekarang
                 ; 0000 01B5                 ekstrak_gps();
00006d d121      	RCALL _ekstrak_gps
                 ; 0000 01B6 
                 ; 0000 01B7                 //matikan LED busy
                 ; 0000 01B8                 L_BUSY = 0;
00006e 9895      	CBI  0x12,5
                 ; 0000 01B9 
                 ; 0000 01BA                 // berikan delay sebentar
                 ; 0000 01BB                 delay_ms(500);
00006f d289      	RCALL SUBOPT_0x2
000070 d284      	RCALL SUBOPT_0x1
                 ; 0000 01BC 
                 ; 0000 01BD                 // kirim paket data
                 ; 0000 01BE                 kirim_paket();
                 ; 0000 01BF 
                 ; 0000 01C0                 // reset variable counter
                 ; 0000 01C1                 xcount = 0;
000071 2433      	CLR  R3
                 ; 0000 01C2         }
                 ; 0000 01C3 
                 ; 0000 01C4         // nyalakan LED standby
                 ; 0000 01C5         L_STBY = 1;
                 _0xE:
000072 9a94      	SBI  0x12,4
                 ; 0000 01C6 
                 ; 0000 01C7         // reset kembali konstanta waktu timer
                 ; 0000 01C8         TCNT1H = 0xAB;
000073 d288      	RCALL SUBOPT_0x3
                 ; 0000 01C9         TCNT1L = 0xA0;
                 ; 0000 01CA 
                 ; 0000 01CB }       // EndOf interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 _0x89:
000074 91e9      	LD   R30,Y+
000075 bfef      	OUT  SREG,R30
000076 91f9      	LD   R31,Y+
000077 91e9      	LD   R30,Y+
000078 91b9      	LD   R27,Y+
000079 91a9      	LD   R26,Y+
00007a 9199      	LD   R25,Y+
00007b 9189      	LD   R24,Y+
00007c 9179      	LD   R23,Y+
00007d 9169      	LD   R22,Y+
00007e 90f9      	LD   R15,Y+
00007f 9019      	LD   R1,Y+
000080 9009      	LD   R0,Y+
000081 9518      	RETI
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_paket(void)
                 ; 0000 01D0 /***************************************************************************************
                 ; 0000 01D1 *	ABSTRAKSI  	: 	pengendali urutan pengiriman data APRS
                 ; 0000 01D2 *				penyusun protokol APRS
                 ; 0000 01D3 *
                 ; 0000 01D4 *      	INPUT		:	tak ada
                 ; 0000 01D5 *	OUTPUT		:       kondisi LED dan output transistor switch TX
                 ; 0000 01D6 *	RETURN		:       tak ada
                 ; 0000 01D7 */
                 ; 0000 01D8 {
                 _kirim_paket:
                 ; 0000 01D9 	char i;
                 ; 0000 01DA 
                 ; 0000 01DB         // inisialisasi nilai CRC dengan 0xFFFF
                 ; 0000 01DC 	crc = 0xFFFF;
000082 931a      	ST   -Y,R17
                 ;	i -> R17
000083 efef      	LDI  R30,LOW(65535)
000084 efff      	LDI  R31,HIGH(65535)
000085 012f      	MOVW R4,R30
                 ; 0000 01DD 
                 ; 0000 01DE         // tambahkan 1 nilai counter pancar
                 ; 0000 01DF         beacon_stat++;
000086 e4a7      	LDI  R26,LOW(_beacon_stat)
000087 e0b0      	LDI  R27,HIGH(_beacon_stat)
000088 d339      	RCALL __EEPROMRDB
000089 5fef      	SUBI R30,-LOW(1)
00008a d342      	RCALL __EEPROMWRB
00008b 50e1      	SUBI R30,LOW(1)
                 ; 0000 01E0 
                 ; 0000 01E1         // nyalakan LED TX dan PTT switch
                 ; 0000 01E2 	PTT = 1;
00008c 9ac3      	SBI  0x18,3
                 ; 0000 01E3 
                 ; 0000 01E4         // tunggu 300ms
                 ; 0000 01E5         delay_ms(100);
00008d e6e4      	LDI  R30,LOW(100)
00008e e0f0      	LDI  R31,HIGH(100)
00008f d271      	RCALL SUBOPT_0x4
                 ; 0000 01E6 
                 ; 0000 01E7         /**********************************************************************************
                 ; 0000 01E8 
                 ; 0000 01E9         			APRS AX.25 PROTOCOL
                 ; 0000 01EA 
                 ; 0000 01EB         |------------------------------------------------------------------------
                 ; 0000 01EC         |   opn. FLAG	|	DESTINATION	|	SOURCE	|	DIGI'S	| CONTROL...
                 ; 0000 01ED         |---------------|-----------------------|---------------|---------------|
                 ; 0000 01EE         |   0x7E 1Bytes |	7 Bytes		|       7 Bytes |  0 - 56 Bytes	|
                 ; 0000 01EF         |------------------------------------------------------------------------
                 ; 0000 01F0 
                 ; 0000 01F1         	-----------------------------------------------------------------
                 ; 0000 01F2         DIGI'S..|	CONTROL FIELD	|	PROTOCOL ID	|	INFO	| FCS...
                 ; 0000 01F3                 |-----------------------|-----------------------|---------------|
                 ; 0000 01F4                 |    0x03 1 Bytes	|     0xF0 1 Bytes	|  0 - 256 Bytes|
                 ; 0000 01F5                 -----------------------------------------------------------------
                 ; 0000 01F6 
                 ; 0000 01F7         	--------------------------------|
                 ; 0000 01F8         INFO... |	FCS	|   cls. FLAG	|
                 ; 0000 01F9                 |---------------|---------------|
                 ; 0000 01FA                 |	2 Bytes	|   0x7E 1Bytes |
                 ; 0000 01FB                 --------------------------------|
                 ; 0000 01FC 
                 ; 0000 01FD         Sumber : APRS101, Tucson Amateur Packet Radio Club. www.tapr.org
                 ; 0000 01FE         ************************************************************************************/
                 ; 0000 01FF 
                 ; 0000 0200         // kirim karakter opening flag
                 ; 0000 0201         for(i=0;i<TX_DELAY_;i++)
000090 e010      	LDI  R17,LOW(0)
                 _0x18:
000091 321d      	CPI  R17,45
000092 f424      	BRGE _0x19
                 ; 0000 0202         	kirim_karakter(FLAG_);
000093 e7ee      	LDI  R30,LOW(126)
000094 d26f      	RCALL SUBOPT_0x5
000095 5f1f      	SUBI R17,-1
000096 cffa      	RJMP _0x18
                 _0x19:
                 ; 0000 0205 bit_stuff = 0;
000097 d26e      	RCALL SUBOPT_0x6
                 ; 0000 0206 
                 ; 0000 0207         // kirimkan field : destination, source, PATH 1, PATH 2, control, Protocol ID, dan
                 ; 0000 0208         	// data type ID
                 ; 0000 0209         for(i=0;i<28;i++)
000098 e010      	LDI  R17,LOW(0)
                 _0x1B:
000099 311c      	CPI  R17,28
00009a f434      	BRGE _0x1C
                 ; 0000 020A         	kirim_karakter(data_1[i]);
00009b d26e      	RCALL SUBOPT_0x7
00009c 50a0      	SUBI R26,LOW(-_data_1)
00009d 40b0      	SBCI R27,HIGH(-_data_1)
00009e d26e      	RCALL SUBOPT_0x8
00009f 5f1f      	SUBI R17,-1
0000a0 cff8      	RJMP _0x1B
                 _0x1C:
                 ; 0000 020D kirim_karakter(0x03);
0000a1 e0e3      	LDI  R30,LOW(3)
0000a2 d261      	RCALL SUBOPT_0x5
                 ; 0000 020E 
                 ; 0000 020F         // krimkan protocol ID
                 ; 0000 0210         kirim_karakter(PROTOCOL_ID_);
0000a3 efe0      	LDI  R30,LOW(240)
0000a4 d25f      	RCALL SUBOPT_0x5
                 ; 0000 0211 
                 ; 0000 0212         // jika sudah 20 kali memancar,
                 ; 0000 0213         if(beacon_stat == 20)
0000a5 e4a7      	LDI  R26,LOW(_beacon_stat)
0000a6 e0b0      	LDI  R27,HIGH(_beacon_stat)
0000a7 d31a      	RCALL __EEPROMRDB
0000a8 31e4      	CPI  R30,LOW(0x14)
0000a9 f421      	BRNE _0x1D
                 ; 0000 0214         {
                 ; 0000 0215         	// jika ya
                 ; 0000 0216                 // kirim tipe data status
                 ; 0000 0217                 //kirim_karakter(TD_STATUS_);
                 ; 0000 0218 
                 ; 0000 0219                 // kirim teks status
                 ; 0000 021A                 //for(i=0;i<47;i++)
                 ; 0000 021B                 //	kirim_karakter(status[i]);
                 ; 0000 021C 
                 ; 0000 021D                 // reset nilai beacon_stat
                 ; 0000 021E                 beacon_stat = 0;
0000aa e4a7      	LDI  R26,LOW(_beacon_stat)
0000ab e0b0      	LDI  R27,HIGH(_beacon_stat)
0000ac e0e0      	LDI  R30,LOW(0)
0000ad d31f      	RCALL __EEPROMWRB
                 ; 0000 021F 
                 ; 0000 0220                 // lompat ke kirim crc
                 ; 0000 0221                 //goto lompat;
                 ; 0000 0222         }
                 ; 0000 0223 
                 ; 0000 0224         // krimkan tipe data posisi
                 ; 0000 0225         kirim_karakter(TD_POSISI_);
                 _0x1D:
0000ae e2e1      	LDI  R30,LOW(33)
0000af d254      	RCALL SUBOPT_0x5
                 ; 0000 0226 
                 ; 0000 0227         // kirimkan posisi lintang
                 ; 0000 0228         for(i=0;i<8;i++)
0000b0 e010      	LDI  R17,LOW(0)
                 _0x1F:
0000b1 3018      	CPI  R17,8
0000b2 f434      	BRGE _0x20
                 ; 0000 0229         	kirim_karakter(posisi_lat[i]);
0000b3 d256      	RCALL SUBOPT_0x7
0000b4 5ea4      	SUBI R26,LOW(-_posisi_lat)
0000b5 4fbf      	SBCI R27,HIGH(-_posisi_lat)
0000b6 d256      	RCALL SUBOPT_0x8
0000b7 5f1f      	SUBI R17,-1
0000b8 cff8      	RJMP _0x1F
                 _0x20:
                 ; 0000 022C kirim_karakter('9');
0000b9 e3e9      	LDI  R30,LOW(57)
0000ba d249      	RCALL SUBOPT_0x5
                 ; 0000 022D 
                 ; 0000 022E         // kirimkan posisi bujur
                 ; 0000 022F 	for(i=0;i<9;i++)
0000bb e010      	LDI  R17,LOW(0)
                 _0x22:
0000bc 3019      	CPI  R17,9
0000bd f434      	BRGE _0x23
                 ; 0000 0230         	kirim_karakter(posisi_long[i]);
0000be d24b      	RCALL SUBOPT_0x7
0000bf 5dac      	SUBI R26,LOW(-_posisi_long)
0000c0 4fbf      	SBCI R27,HIGH(-_posisi_long)
0000c1 d24b      	RCALL SUBOPT_0x8
0000c2 5f1f      	SUBI R17,-1
0000c3 cff8      	RJMP _0x22
                 _0x23:
                 ; 0000 0233 kirim_karakter('#');
0000c4 e2e3      	LDI  R30,LOW(35)
0000c5 d23e      	RCALL SUBOPT_0x5
                 ; 0000 0234 
                 ; 0000 0235         kirim_karakter('/');
0000c6 e2ef      	LDI  R30,LOW(47)
0000c7 d23c      	RCALL SUBOPT_0x5
                 ; 0000 0236         kirim_karakter('A');
0000c8 e4e1      	LDI  R30,LOW(65)
0000c9 d23a      	RCALL SUBOPT_0x5
                 ; 0000 0237         kirim_karakter('=');
0000ca e3ed      	LDI  R30,LOW(61)
0000cb d238      	RCALL SUBOPT_0x5
                 ; 0000 0238 
                 ; 0000 0239         for(i=0;i<6;i++)
0000cc e010      	LDI  R17,LOW(0)
                 _0x25:
0000cd 3016      	CPI  R17,6
0000ce f434      	BRGE _0x26
                 ; 0000 023A                 kirim_karakter(altitude[i]);
0000cf d23a      	RCALL SUBOPT_0x7
0000d0 5da3      	SUBI R26,LOW(-_altitude)
0000d1 4fbf      	SBCI R27,HIGH(-_altitude)
0000d2 d23a      	RCALL SUBOPT_0x8
0000d3 5f1f      	SUBI R17,-1
0000d4 cff8      	RJMP _0x25
                 _0x26:
                 ; 0000 0244 for(i=0;i<20;i++)
0000d5 e010      	LDI  R17,LOW(0)
                 _0x28:
0000d6 3114      	CPI  R17,20
0000d7 f434      	BRGE _0x29
                 ; 0000 0245         		kirim_karakter(komentar[i]);
0000d8 d231      	RCALL SUBOPT_0x7
0000d9 5cad      	SUBI R26,LOW(-_komentar)
0000da 4fbf      	SBCI R27,HIGH(-_komentar)
0000db d231      	RCALL SUBOPT_0x8
0000dc 5f1f      	SUBI R17,-1
0000dd cff8      	RJMP _0x28
                 _0x29:
                 ; 0000 024D kirim_crc();
0000de d00d      	RCALL _kirim_crc
                 ; 0000 024E 
                 ; 0000 024F         // kirimkan karakter closing flag
                 ; 0000 0250         for(i=0;i<TX_TAIL_;i++)
0000df e010      	LDI  R17,LOW(0)
                 _0x2B:
0000e0 301f      	CPI  R17,15
0000e1 f424      	BRGE _0x2C
                 ; 0000 0251         	kirim_karakter(FLAG_);
0000e2 e7ee      	LDI  R30,LOW(126)
0000e3 d220      	RCALL SUBOPT_0x5
0000e4 5f1f      	SUBI R17,-1
0000e5 cffa      	RJMP _0x2B
                 _0x2C:
                 ; 0000 0254 delay_ms(50);
0000e6 e3e2      	LDI  R30,LOW(50)
0000e7 e0f0      	LDI  R31,HIGH(50)
0000e8 d218      	RCALL SUBOPT_0x4
                 ; 0000 0255         PTT = 0;
0000e9 98c3      	CBI  0x18,3
                 ; 0000 0256 
                 ; 0000 0257 
                 ; 0000 0258 }       // EndOf void kirim_paket(void)
0000ea 9119      	LD   R17,Y+
0000eb 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_crc(void)
                 ; 0000 025D /***************************************************************************************
                 ; 0000 025E *	ABSTRAKSI  	: 	Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
                 ; 0000 025F *				nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
                 ; 0000 0260 *				Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 0261 *				leading one.
                 ; 0000 0262 *
                 ; 0000 0263 *      	INPUT		:	tak ada
                 ; 0000 0264 *	OUTPUT		:       tak ada
                 ; 0000 0265 *	RETURN		:       tak ada
                 ; 0000 0266 */
                 ; 0000 0267 {
                 _kirim_crc:
                 ; 0000 0268 	static unsigned char crc_lo;
                 ; 0000 0269 	static unsigned char crc_hi;
                 ; 0000 026A 
                 ; 0000 026B         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
                 ; 0000 026C         crc_lo = crc ^ 0xFF;
0000ec efef      	LDI  R30,LOW(255)
0000ed 25e4      	EOR  R30,R4
0000ee 93e0 0081 	STS  _crc_lo_S0000003000,R30
                 ; 0000 026D 
                 ; 0000 026E         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
                 ; 0000 026F         crc_hi = (crc >> 8) ^ 0xFF;
0000f0 2de5      	MOV  R30,R5
0000f1 70f0      	ANDI R31,HIGH(0x0)
0000f2 efaf      	LDI  R26,LOW(255)
0000f3 27ea      	EOR  R30,R26
0000f4 93e0 0082 	STS  _crc_hi_S0000003000,R30
                 ; 0000 0270 
                 ; 0000 0271         // kirim 8 LSB
                 ; 0000 0272         kirim_karakter(crc_lo);
0000f6 91e0 0081 	LDS  R30,_crc_lo_S0000003000
0000f8 d20b      	RCALL SUBOPT_0x5
                 ; 0000 0273 
                 ; 0000 0274         // kirim 8 MSB
                 ; 0000 0275         kirim_karakter(crc_hi);
0000f9 91e0 0082 	LDS  R30,_crc_hi_S0000003000
0000fb d208      	RCALL SUBOPT_0x5
                 ; 0000 0276 
                 ; 0000 0277 }       // EndOf void kirim_crc(void)
0000fc 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_karakter(unsigned char input)
                 ; 0000 027C /***************************************************************************************
                 ; 0000 027D *	ABSTRAKSI  	: 	mengirim data APRS karakter-demi-karakter, menghitung FCS
                 ; 0000 027E *				field dan melakukan bit stuffing. Polarisasi data adalah
                 ; 0000 027F *				NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
                 ; 0000 0280 *				bit terakhir yang ditahan jika bit masukan adalah bit 1.
                 ; 0000 0281 *				Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
                 ; 0000 0282 *				masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
                 ; 0000 0283 * 				merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
                 ; 0000 0284 *				tone adalah tidak penting dalam polarisasi data NRZI.
                 ; 0000 0285 *
                 ; 0000 0286 *      	INPUT		:	byte data protokol APRS
                 ; 0000 0287 *	OUTPUT		:       tak ada
                 ; 0000 0288 *	RETURN		:       tak ada
                 ; 0000 0289 */
                 ; 0000 028A {
                 _kirim_karakter:
0000fd 92ff      	PUSH R15
                 ; 0000 028B 	char i;
                 ; 0000 028C 	bit in_bit;
                 ; 0000 028D 
                 ; 0000 028E         // kirimkan setiap byte data (8 bit)
                 ; 0000 028F 	for(i=0;i<8;i++)
0000fe 931a      	ST   -Y,R17
                 ;	input -> Y+1
                 ;	i -> R17
                 ;	in_bit -> R15.0
0000ff e010      	LDI  R17,LOW(0)
                 _0x30:
000100 3018      	CPI  R17,8
000101 f514      	BRGE _0x31
                 ; 0000 0290         {
                 ; 0000 0291         	// ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
                 ; 0000 0292                 in_bit = (input >> i) & 0x01;
000102 2fe1      	MOV  R30,R17
000103 81a9      	LDD  R26,Y+1
000104 d248      	RCALL __LSRB12
000105 fbe0      	BST  R30,0
000106 f8f0      	BLD  R15,0
                 ; 0000 0293 
                 ; 0000 0294                 // jika data adalah flag, nol-kan pengingat bit stuffing
                 ; 0000 0295                 if(input==0x7E)	{bit_stuff = 0;}
000107 37ae      	CPI  R26,LOW(0x7E)
000108 f411      	BRNE _0x32
000109 d1fc      	RCALL SUBOPT_0x6
                 ; 0000 0296 
                 ; 0000 0297                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
                 ; 0000 0298                 else		{hitung_crc(in_bit);}
00010a c005      	RJMP _0x33
                 _0x32:
00010b e0e0      	LDI  R30,0
00010c fcf0      	SBRC R15,0
00010d e0e1      	LDI  R30,1
00010e 93ea      	ST   -Y,R30
00010f d018      	RCALL _hitung_crc
                 _0x33:
                 ; 0000 0299 
                 ; 0000 029A                 // jika bit data saat ini adalah
                 ; 0000 029B                 // nol
                 ; 0000 029C                 if(!in_bit)
000110 fef0      	SBRS R15,0
                 ; 0000 029D                 {	// jika ya
                 ; 0000 029E                 	// ubah tone dan bentuk gelombang sinus
                 ; 0000 029F                         ubah_nada();
000111 c00e      	RJMP _0x87
                 ; 0000 02A0 
                 ; 0000 02A1                         // nol-kan pengingat bit stuffing
                 ; 0000 02A2                         bit_stuff = 0;
                 ; 0000 02A3                 }
                 ; 0000 02A4                 // satu
                 ; 0000 02A5                 else
                 ; 0000 02A6                 {	// jika ya
                 ; 0000 02A7                 	// jaga tone dan bentuk gelombang sinus
                 ; 0000 02A8                         set_nada(nada);
000112 e0e0      	LDI  R30,0
000113 9998      	SBIC 0x13,0
000114 e0e1      	LDI  R30,1
000115 93ea      	ST   -Y,R30
000116 d051      	RCALL _set_nada
                 ; 0000 02A9 
                 ; 0000 02AA                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
                 ; 0000 02AB                         bit_stuff++;
000117 91e0 0080 	LDS  R30,_bit_stuff_G000
000119 5fef      	SUBI R30,-LOW(1)
00011a 93e0 0080 	STS  _bit_stuff_G000,R30
                 ; 0000 02AC 
                 ; 0000 02AD                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
                 ; 0000 02AE                         if(bit_stuff==5)
00011c 91a0 0080 	LDS  R26,_bit_stuff_G000
00011e 30a5      	CPI  R26,LOW(0x5)
00011f f411      	BRNE _0x36
                 ; 0000 02AF                         {
                 ; 0000 02B0                         	// kirim bit nol :
                 ; 0000 02B1                                 // ubah tone dan bentuk gelombang sinus
                 ; 0000 02B2                                 ubah_nada();
                 _0x87:
000120 d01c      	RCALL _ubah_nada
                 ; 0000 02B3 
                 ; 0000 02B4                                 // nol-kan pengingat bit stuffing
                 ; 0000 02B5                                 bit_stuff = 0;
000121 d1e4      	RCALL SUBOPT_0x6
                 ; 0000 02B6 
                 ; 0000 02B7                         }
                 ; 0000 02B8                 }
                 _0x36:
                 ; 0000 02B9         }
000122 5f1f      	SUBI R17,-1
000123 cfdc      	RJMP _0x30
                 _0x31:
                 ; 0000 02BA 
                 ; 0000 02BB }      // EndOf void kirim_karakter(unsigned char input)
000124 8118      	LDD  R17,Y+0
000125 9622      	ADIW R28,2
000126 90ff      	POP  R15
000127 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			hitung_crc(char in_crc)
                 ; 0000 02C0 /***************************************************************************************
                 ; 0000 02C1 *	ABSTRAKSI  	: 	menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
                 ; 0000 02C2 *				generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 02C3 *				leading one
                 ; 0000 02C4 *
                 ; 0000 02C5 *      	INPUT		:	bit data yang terkirim
                 ; 0000 02C6 *	OUTPUT		:       tak ada
                 ; 0000 02C7 *	RETURN		:       tak ada
                 ; 0000 02C8 */
                 ; 0000 02C9 {
                 _hitung_crc:
                 ; 0000 02CA 	static unsigned short xor_in;
                 ; 0000 02CB 
                 ; 0000 02CC         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
                 ; 0000 02CD 	xor_in = crc ^ in_crc;
                 ;	in_crc -> Y+0
000128 81e8      	LD   R30,Y
000129 e0f0      	LDI  R31,0
00012a fde7      	SBRC R30,7
00012b efff      	SER  R31
00012c 25e4      	EOR  R30,R4
00012d 25f5      	EOR  R31,R5
00012e 93e0 0083 	STS  _xor_in_S0000005000,R30
000130 93f0 0084 	STS  _xor_in_S0000005000+1,R31
                 ; 0000 02CE 
                 ; 0000 02CF         // geser kanan nilai CRC sebanyak 1 bit
                 ; 0000 02D0 	crc >>= 1;
000132 9456      	LSR  R5
000133 9447      	ROR  R4
                 ; 0000 02D1 
                 ; 0000 02D2         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
                 ; 0000 02D3         if(xor_in & 0x01)
000134 91e0 0083 	LDS  R30,_xor_in_S0000005000
000136 70e1      	ANDI R30,LOW(0x1)
000137 f021      	BREQ _0x37
                 ; 0000 02D4         	// maka nilai CRC di-Exor-kan dengan generator polinomial
                 ; 0000 02D5                 crc ^= 0x8408;
000138 e0e8      	LDI  R30,LOW(33800)
000139 e8f4      	LDI  R31,HIGH(33800)
                +
00013a 264e     +EOR R4 , R30
00013b 265f     +EOR R5 , R31
                 	__EORWRR 4,5,30,31
                 ; 0000 02D6 
                 ; 0000 02D7 }      // EndOf void hitung_crc(char in_crc)
                 _0x37:
00013c c029      	RJMP _0x2060001
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ubah_nada(void)
                 ; 0000 02DC /***************************************************************************************
                 ; 0000 02DD *	ABSTRAKSI  	: 	Menukar seting tone terakhir dengan tone yang baru. Tone
                 ; 0000 02DE *				1200Hz dan 2200Hz masing - masing merepresentasikan bit
                 ; 0000 02DF *				0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
                 ; 0000 02E0 *				penting dalam polarisasi data NRZI.
                 ; 0000 02E1 *
                 ; 0000 02E2 *      	INPUT		:	tak ada
                 ; 0000 02E3 *	OUTPUT		:       tak ada
                 ; 0000 02E4 *	RETURN		:       tak ada
                 ; 0000 02E5 */
                 ; 0000 02E6 {
                 _ubah_nada:
                 ; 0000 02E7 	// jika tone terakhir adalah :
                 ; 0000 02E8         // 1200Hz
                 ; 0000 02E9         if(nada ==_1200)
00013d 9998      	SBIC 0x13,0
00013e c002      	RJMP _0x38
                 ; 0000 02EA 	{	// jika ya
                 ; 0000 02EB         	// ubah tone saat ini menjadi 2200Hz
                 ; 0000 02EC                 nada = _2200;
00013f 9a98      	SBI  0x13,0
                 ; 0000 02ED 
                 ; 0000 02EE                 // bangkitkan gelombang sinus 2200Hz
                 ; 0000 02EF         	set_nada(nada);
000140 c001      	RJMP _0x88
                 ; 0000 02F0 	}
                 ; 0000 02F1         // 2200Hz
                 ; 0000 02F2         else
                 _0x38:
                 ; 0000 02F3         {	// jika ya
                 ; 0000 02F4         	// ubah tone saat ini menjadi 1200Hz
                 ; 0000 02F5                 nada = _1200;
000141 9898      	CBI  0x13,0
                 ; 0000 02F6 
                 ; 0000 02F7                 // bangkitkan gelombang sinus 1200Hz
                 ; 0000 02F8         	set_nada(nada);
                 _0x88:
000142 e0e0      	LDI  R30,0
000143 9998      	SBIC 0x13,0
000144 e0e1      	LDI  R30,1
000145 93ea      	ST   -Y,R30
000146 d021      	RCALL _set_nada
                 ; 0000 02F9         }
                 ; 0000 02FA 
                 ; 0000 02FB }       // EndOf void ubah_nada(void)
000147 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_dac(char value)
                 ; 0000 0300 /***************************************************************************************
                 ; 0000 0301 *	ABSTRAKSI  	: 	Men-set dan reset output DAC sebagai bilangan biner yang
                 ; 0000 0302 *				merepresentasikan nilai diskrit dari gelombang sinus yang
                 ; 0000 0303 *				sedang dibentuk saat ini sehingga membentuk tegangan sampling
                 ; 0000 0304 *				dari gelombang.
                 ; 0000 0305 *
                 ; 0000 0306 *      	INPUT		:	nilai matrix rekonstruksi diskrit gelombang sinusoid
                 ; 0000 0307 *	OUTPUT		:       DAC 0 - 3, tegangan kontinyu pada output Low Pass Filter
                 ; 0000 0308 *	RETURN		:       tak ada
                 ; 0000 0309 */
                 ; 0000 030A {
                 _set_dac:
                 ; 0000 030B 	// ambil nilai LSB dari matrix rekonstruksi dan set sebagai DAC-0
                 ; 0000 030C         DAC_0 = value & 0x01;
                 ;	value -> Y+0
000148 81e8      	LD   R30,Y
000149 70e1      	ANDI R30,LOW(0x1)
00014a f411      	BRNE _0x3E
00014b 98c7      	CBI  0x18,7
00014c c001      	RJMP _0x3F
                 _0x3E:
00014d 9ac7      	SBI  0x18,7
                 _0x3F:
                 ; 0000 030D 
                 ; 0000 030E         // ambil nilai dari matrix rekonstruksi, geser kanan 1 bit, ambil bit paling kanan
                 ; 0000 030F         	// dan set sebagai DAC-1
                 ; 0000 0310         DAC_1 =( value >> 1 ) & 0x01;
00014e 81e8      	LD   R30,Y
00014f 95e5      	ASR  R30
000150 70e1      	ANDI R30,LOW(0x1)
000151 f411      	BRNE _0x40
000152 98c6      	CBI  0x18,6
000153 c001      	RJMP _0x41
                 _0x40:
000154 9ac6      	SBI  0x18,6
                 _0x41:
                 ; 0000 0311 
                 ; 0000 0312         // ambil nilai dari matrix rekonstruksi, geser kanan 2 bit, ambil bit paling kanan
                 ; 0000 0313         	// dan set sebagai DAC-2
                 ; 0000 0314         DAC_2 =( value >> 2 ) & 0x01;
000155 81e8      	LD   R30,Y
000156 95e5      	ASR  R30
000157 95e5      	ASR  R30
000158 70e1      	ANDI R30,LOW(0x1)
000159 f411      	BRNE _0x42
00015a 98c5      	CBI  0x18,5
00015b c001      	RJMP _0x43
                 _0x42:
00015c 9ac5      	SBI  0x18,5
                 _0x43:
                 ; 0000 0315 
                 ; 0000 0316         // ambil nilai dari matrix rekonstruksi, geser kanan 3 bit, ambil bit tersebut dan
                 ; 0000 0317         	// set sebagai DAC-3 (MSB)
                 ; 0000 0318         DAC_3 =( value >> 3 ) & 0x01;
00015d 81e8      	LD   R30,Y
00015e 95e5      	ASR  R30
00015f 95e5      	ASR  R30
000160 95e5      	ASR  R30
000161 70e1      	ANDI R30,LOW(0x1)
000162 f411      	BRNE _0x44
000163 98c4      	CBI  0x18,4
000164 c001      	RJMP _0x45
                 _0x44:
000165 9ac4      	SBI  0x18,4
                 _0x45:
                 ; 0000 0319 
                 ; 0000 031A }      	// EndOf void set_dac(char value)
                 _0x2060001:
000166 9621      	ADIW R28,1
000167 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_nada(char i_nada)
                 ; 0000 031F /***************************************************************************************
                 ; 0000 0320 *	ABSTRAKSI  	: 	Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
                 ; 0000 0321 *				dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
                 ; 0000 0322 *				tuning pada jumlah masing - masing perulangan for dan
                 ; 0000 0323 *				konstanta waktu untuk meng-adjust parameter baudrate dan
                 ; 0000 0324 *				frekuensi tone.
                 ; 0000 0325 *
                 ; 0000 0326 *      	INPUT		:	nilai frekuensi tone yang akan ditransmisikan
                 ; 0000 0327 *	OUTPUT		:       nilai DAC
                 ; 0000 0328 *	RETURN		:       tak ada
                 ; 0000 0329 */
                 ; 0000 032A {
                 _set_nada:
                 ; 0000 032B 	char i;
                 ; 0000 032C 
                 ; 0000 032D         // jika frekuensi tone yang akan segera dipancarkan adalah :
                 ; 0000 032E         // 1200Hz
                 ; 0000 032F 	if(i_nada == _1200)
000168 931a      	ST   -Y,R17
                 ;	i_nada -> Y+1
                 ;	i -> R17
000169 81e9      	LDD  R30,Y+1
00016a 30e0      	CPI  R30,0
00016b f451      	BRNE _0x46
                 ; 0000 0330     	{
                 ; 0000 0331         	// jika ya
                 ; 0000 0332         	for(i=0; i<16; i++)
00016c e010      	LDI  R17,LOW(0)
                 _0x48:
00016d 3110      	CPI  R17,16
00016e f434      	BRGE _0x49
                 ; 0000 0333         	{
                 ; 0000 0334                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0335                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0336                 	set_dac(matrix[i]);
00016f d19f      	RCALL SUBOPT_0x9
                 ; 0000 0337 
                 ; 0000 0338                         // bangkitkan frekuensi 1200Hz dari konstanta waktu
                 ; 0000 0339         		delay_us(CONST_1200);
                +
000170 ea8a     +LDI R24 , LOW ( 170 )
                +__DELAY_USB_LOOP :
000171 958a     +DEC R24
000172 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 170
                 ; 0000 033A         	}
000173 5f1f      	SUBI R17,-1
000174 cff8      	RJMP _0x48
                 _0x49:
                 ; 0000 033B     	}
                 ; 0000 033C         // 2200Hz
                 ; 0000 033D     	else
000175 c012      	RJMP _0x4A
                 _0x46:
                 ; 0000 033E     	{
                 ; 0000 033F         	// jika ya
                 ; 0000 0340         	for(i=0; i<15; i++)
000176 e010      	LDI  R17,LOW(0)
                 _0x4C:
000177 301f      	CPI  R17,15
000178 f434      	BRGE _0x4D
                 ; 0000 0341         	{
                 ; 0000 0342                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0343                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0344                 	set_dac(matrix[i]);
000179 d195      	RCALL SUBOPT_0x9
                 ; 0000 0345 
                 ; 0000 0346                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 0347                 	delay_us(CONST_2200);
                +
00017a e58c     +LDI R24 , LOW ( 92 )
                +__DELAY_USB_LOOP :
00017b 958a     +DEC R24
00017c f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 92
                 ; 0000 0348                 }
00017d 5f1f      	SUBI R17,-1
00017e cff8      	RJMP _0x4C
                 _0x4D:
                 ; 0000 0349                 // sekali lagi, untuk mengatur baudrate lakukan fine tune pada jumlah for
                 ; 0000 034A                 for(i=0; i<12; i++)
00017f e010      	LDI  R17,LOW(0)
                 _0x4F:
000180 301c      	CPI  R17,12
000181 f434      	BRGE _0x50
                 ; 0000 034B                 {
                 ; 0000 034C                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 034D                 		// dan urutan perulangan for
                 ; 0000 034E                 	set_dac(matrix[i]);
000182 d18c      	RCALL SUBOPT_0x9
                 ; 0000 034F 
                 ; 0000 0350                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 0351                 	delay_us(CONST_2200);
                +
000183 e58c     +LDI R24 , LOW ( 92 )
                +__DELAY_USB_LOOP :
000184 958a     +DEC R24
000185 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 92
                 ; 0000 0352                 }
000186 5f1f      	SUBI R17,-1
000187 cff8      	RJMP _0x4F
                 _0x50:
                 ; 0000 0353     	}
                 _0x4A:
                 ; 0000 0354 
                 ; 0000 0355 } 	// EndOf void set_nada(char i_nada)
000188 8118      	LDD  R17,Y+0
000189 9622      	ADIW R28,2
00018a 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			getComma(void)
                 ; 0000 035A /***************************************************************************************
                 ; 0000 035B *	ABSTRAKSI  	: 	Menunggu data RX serial berupa karakter koma dan segera
                 ; 0000 035C *				kembali pada fungsi yang memanggilnya.
                 ; 0000 035D *
                 ; 0000 035E *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 035F *	OUTPUT		:       tak ada
                 ; 0000 0360 *	RETURN		:       tak ada
                 ; 0000 0361 */
                 ; 0000 0362 {
                 _getComma:
                 ; 0000 0363 	// jika data yang diterima bukan karakter koma, terima terus
                 ; 0000 0364         	// jika data yang diterima adalah koma, keluar
                 ; 0000 0365         while(getchar() != ',');
                 _0x51:
00018b d156      	RCALL _getchar
00018c 32ec      	CPI  R30,LOW(0x2C)
00018d f7e9      	BRNE _0x51
                 ; 0000 0366 
                 ; 0000 0367 }      	// EndOf void getComma(void)
00018e 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ekstrak_gps(void)
                 ; 0000 036C /***************************************************************************************
                 ; 0000 036D *	ABSTRAKSI  	: 	Menunggu interupsi RX data serial dari USART, memparsing
                 ; 0000 036E *				data $GPGLL yang diterima menjadi data posisi, dan mengupdate
                 ; 0000 036F *				data variabel posisi.
                 ; 0000 0370 *
                 ; 0000 0371 *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 0372 *	OUTPUT		:       tak ada
                 ; 0000 0373 *	RETURN		:       tak ada
                 ; 0000 0374 */
                 ; 0000 0375 {
                 _ekstrak_gps:
                 ; 0000 0376 	int i,j;
                 ; 0000 0377         static char buff_posisi[17], buff_altitude[9];
                 ; 0000 0378         unsigned int n_altitude[6];
                 ; 0000 0379 
                 ; 0000 037A         /************************************************************************************************
                 ; 0000 037B         	$GPGLL - GLL - Geographic Position Latitude / Longitude
                 ; 0000 037C 
                 ; 0000 037D                 Contoh : $GPGLL,3723.2475,N,12158.3416,W,161229.487,A*2C
                 ; 0000 037E 
                 ; 0000 037F         |-----------------------------------------------------------------------------------------------|
                 ; 0000 0380         |	Nama		| 	Contoh		|		Deskripsi			|
                 ; 0000 0381         |-----------------------|-----------------------|-----------------------------------------------|
                 ; 0000 0382         |	Message ID	|	$GPGLL		|	header protokol GLL			|
                 ; 0000 0383         |	Latitude	|	3723.2475	|	ddmm.mmmm 	, d=degree, m=minute	|
                 ; 0000 0384         |	N/S indicator	|	N		|	N=utara, S=selatan			|
                 ; 0000 0385         |	Longitude	|	12158.3416	|	dddmm.mmmm	, d=degree, m=minute	|
                 ; 0000 0386         |	W/E indicator	|	W		|	W=barat, E=timur			|
                 ; 0000 0387         |	Waktu UTC (GMT)	|	161229.487	|	HHMMSS.SS  ,H=hour, M=minute, S=second	|
                 ; 0000 0388         |	Status		|	A		|	A=data valid, V=data invalid		|
                 ; 0000 0389         |	Checksum	|	*2C		|						|
                 ; 0000 038A         |-----------------------------------------------------------------------------------------------|
                 ; 0000 038B 
                 ; 0000 038C         	Sumber : GPS SiRF EM-406A datasheet
                 ; 0000 038D 
                 ; 0000 038E         *************************************************************************************************/
                 ; 0000 038F 
                 ; 0000 0390         // jika data yang diterima bukan karakter $, terima terus
                 ; 0000 0391         	// jika data yang diterima adalah $, lanjutkan
                 ; 0000 0392         while(getchar() != '$');
00018f 972c      	SBIW R28,12
000190 d24c      	RCALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	n_altitude -> Y+4
                 _0x54:
000191 d150      	RCALL _getchar
000192 32e4      	CPI  R30,LOW(0x24)
000193 f7e9      	BRNE _0x54
                 ; 0000 0393 
                 ; 0000 0394         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter G)
                 ; 0000 0395 	getchar();
000194 d14d      	RCALL _getchar
                 ; 0000 0396 
                 ; 0000 0397         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter P)
                 ; 0000 0398         getchar();
000195 d14c      	RCALL _getchar
                 ; 0000 0399 
                 ; 0000 039A         // tunggu data, jika yang diterima adalah karakter G
                 ; 0000 039B         if(getchar() == 'G')
000196 d14b      	RCALL _getchar
000197 34e7      	CPI  R30,LOW(0x47)
000198 f009      	BREQ PC+2
000199 c117      	RJMP _0x57
                 ; 0000 039C         {
                 ; 0000 039D         	// maka
                 ; 0000 039E         	// tunggu data, jika yang diterima adalah karakter G
                 ; 0000 039F                 if(getchar() == 'G')
00019a d147      	RCALL _getchar
00019b 34e7      	CPI  R30,LOW(0x47)
00019c f009      	BREQ PC+2
00019d c113      	RJMP _0x58
                 ; 0000 03A0         	{
                 ; 0000 03A1                 	// maka
                 ; 0000 03A2                         // tunggu data, jika yang diterima adalah karakter A
                 ; 0000 03A3                         if(getchar() == 'A')
00019e d143      	RCALL _getchar
00019f 34e1      	CPI  R30,LOW(0x41)
0001a0 f009      	BREQ PC+2
0001a1 c10f      	RJMP _0x59
                 ; 0000 03A4                 	{
                 ; 0000 03A5                         	// maka
                 ; 0000 03A6                                 // tunggu koma dan lanjutkan
                 ; 0000 03A7                                 getComma();
0001a2 dfe8      	RCALL _getComma
                 ; 0000 03A8                                 getComma();
0001a3 dfe7      	RCALL _getComma
                 ; 0000 03A9 
                 ; 0000 03AA                                 // ambil 7 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03AB                         	for(i=0; i<7; i++)	buff_posisi[i] = getchar();
0001a4 d171      	RCALL SUBOPT_0xA
                 _0x5B:
                +
0001a5 3007     +CPI R16 , LOW ( 7 )
0001a6 e0e0     +LDI R30 , HIGH ( 7 )
0001a7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
0001a8 f444      	BRGE _0x5C
0001a9 2fe0      	MOV  R30,R16
0001aa 57eb      	SUBI R30,-LOW(_buff_posisi_S000000A000)
0001ab 93ef      	PUSH R30
0001ac d135      	RCALL _getchar
0001ad 91af      	POP  R26
0001ae 93ec      	ST   X,R30
0001af d169      	RCALL SUBOPT_0xB
0001b0 cff4      	RJMP _0x5B
                 _0x5C:
                 ; 0000 03AE getComma();
0001b1 dfd9      	RCALL _getComma
                 ; 0000 03AF 
                 ; 0000 03B0                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03B1                                 buff_posisi[7] = getchar();
0001b2 d12f      	RCALL _getchar
                +
0001b3 93e0 008c+STS _buff_posisi_S000000A000 + ( 7 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,7
                 ; 0000 03B2 
                 ; 0000 03B3                                 // tunggu koma dan lanjutkan
                 ; 0000 03B4                                 getComma();
0001b5 dfd5      	RCALL _getComma
                 ; 0000 03B5 
                 ; 0000 03B6                                 // ambil 8 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03B7                                 for(i=0; i<8; i++)	buff_posisi[i+8] = getchar();
0001b6 d15f      	RCALL SUBOPT_0xA
                 _0x5E:
0001b7 d164      	RCALL SUBOPT_0xC
0001b8 f444      	BRGE _0x5F
0001b9 2fe0      	MOV  R30,R16
                +
0001ba 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001bb 93ef      	PUSH R30
0001bc d125      	RCALL _getchar
0001bd 91af      	POP  R26
0001be 93ec      	ST   X,R30
0001bf d159      	RCALL SUBOPT_0xB
0001c0 cff6      	RJMP _0x5E
                 _0x5F:
                 ; 0000 03BA getComma();
0001c1 dfc9      	RCALL _getComma
                 ; 0000 03BB 
                 ; 0000 03BC                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03BD                                 buff_posisi[16] = getchar();
0001c2 d11f      	RCALL _getchar
                +
0001c3 93e0 0095+STS _buff_posisi_S000000A000 + ( 16 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,16
                 ; 0000 03BE 
                 ; 0000 03BF                                 // tunggu dan lewatkan 3 koma
                 ; 0000 03C0                                 getComma();
0001c5 dfc5      	RCALL _getComma
                 ; 0000 03C1                                 getComma();
0001c6 dfc4      	RCALL _getComma
                 ; 0000 03C2                                 getComma();
0001c7 dfc3      	RCALL _getComma
                 ; 0000 03C3                                 getComma();
0001c8 dfc2      	RCALL _getComma
                 ; 0000 03C4 
                 ; 0000 03C5                                 // ambil 8 byte data ketinggian dalam meter
                 ; 0000 03C6                                 for(i=0;i<8;i++)        buff_altitude[i] = getchar();
0001c9 d14c      	RCALL SUBOPT_0xA
                 _0x61:
0001ca d151      	RCALL SUBOPT_0xC
0001cb f444      	BRGE _0x62
0001cc 2fe0      	MOV  R30,R16
0001cd 56ea      	SUBI R30,-LOW(_buff_altitude_S000000A000)
0001ce 93ef      	PUSH R30
0001cf d112      	RCALL _getchar
0001d0 91af      	POP  R26
0001d1 93ec      	ST   X,R30
0001d2 d146      	RCALL SUBOPT_0xB
0001d3 cff6      	RJMP _0x61
                 _0x62:
                 ; 0000 03C9 for(i=0;i<8;i++)	{posisi_lat[i]=buff_posisi[i];}
0001d4 d141      	RCALL SUBOPT_0xA
                 _0x64:
0001d5 d146      	RCALL SUBOPT_0xC
0001d6 f45c      	BRGE _0x65
0001d7 01f8      	MOVW R30,R16
0001d8 5ee4      	SUBI R30,LOW(-_posisi_lat)
0001d9 4fff      	SBCI R31,HIGH(-_posisi_lat)
0001da 010f      	MOVW R0,R30
0001db e8a5      	LDI  R26,LOW(_buff_posisi_S000000A000)
0001dc 0fa0      	ADD  R26,R16
0001dd 91ec      	LD   R30,X
0001de 01d0      	MOVW R26,R0
0001df d1ed      	RCALL __EEPROMWRB
0001e0 d138      	RCALL SUBOPT_0xB
0001e1 cff3      	RJMP _0x64
                 _0x65:
                 ; 0000 03CA         			for(i=0;i<9;i++)	{posisi_long[i]=buff_posisi[i+8];}
0001e2 d133      	RCALL SUBOPT_0xA
                 _0x67:
                +
0001e3 3009     +CPI R16 , LOW ( 9 )
0001e4 e0e0     +LDI R30 , HIGH ( 9 )
0001e5 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
0001e6 f44c      	BRGE _0x68
0001e7 01d8      	MOVW R26,R16
0001e8 5dac      	SUBI R26,LOW(-_posisi_long)
0001e9 4fbf      	SBCI R27,HIGH(-_posisi_long)
0001ea 2fe0      	MOV  R30,R16
                +
0001eb 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001ec 81e0      	LD   R30,Z
0001ed d1df      	RCALL __EEPROMWRB
0001ee d12a      	RCALL SUBOPT_0xB
0001ef cff3      	RJMP _0x67
                 _0x68:
                 ; 0000 03CB 
                 ; 0000 03CC                                 // nol-kan variable ketinggian
                 ; 0000 03CD                                 for(i=0;i<6;i++)        n_altitude[i] = '0';
0001f0 d125      	RCALL SUBOPT_0xA
                 _0x6A:
0001f1 d12e      	RCALL SUBOPT_0xD
0001f2 f43c      	BRGE _0x6B
0001f3 d130      	RCALL SUBOPT_0xE
0001f4 e3e0      	LDI  R30,LOW(48)
0001f5 e0f0      	LDI  R31,HIGH(48)
0001f6 93ed      	ST   X+,R30
0001f7 93fc      	ST   X,R31
0001f8 d120      	RCALL SUBOPT_0xB
0001f9 cff7      	RJMP _0x6A
                 _0x6B:
                 ; 0000 03D0 for(i=0;i<8;i++)
0001fa d11b      	RCALL SUBOPT_0xA
                 _0x6D:
0001fb d120      	RCALL SUBOPT_0xC
0001fc f58c      	BRGE _0x6E
                 ; 0000 03D1                                 {
                 ; 0000 03D2                                         if(buff_altitude[i] == '.')     goto selesai;
0001fd d12c      	RCALL SUBOPT_0xF
0001fe f179      	BREQ _0x70
                 ; 0000 03D3                                         if((buff_altitude[i] != '.')&&(buff_altitude[i] != ',')&&(buff_altitude[i] != 'M'))
0001ff d12a      	RCALL SUBOPT_0xF
000200 f051      	BREQ _0x72
000201 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
000202 0fa0      	ADD  R26,R16
000203 91ac      	LD   R26,X
000204 32ac      	CPI  R26,LOW(0x2C)
000205 f029      	BREQ _0x72
000206 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
000207 0fa0      	ADD  R26,R16
000208 91ac      	LD   R26,X
000209 34ad      	CPI  R26,LOW(0x4D)
00020a f409      	BRNE _0x73
                 _0x72:
00020b c020      	RJMP _0x71
                 _0x73:
                 ; 0000 03D4                                         {
                 ; 0000 03D5                                                 // geser dari satuan ke puluhan dst.
                 ; 0000 03D6                                                 for(j=0;j<6;j++)        n_altitude[j] = n_altitude[j+1];
                +
00020c e020     +LDI R18 , LOW ( 0 )
00020d e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x75:
                +
00020e 3026     +CPI R18 , LOW ( 6 )
00020f e0e0     +LDI R30 , HIGH ( 6 )
000210 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
000211 f49c      	BRGE _0x76
000212 2fe2      	MOV  R30,R18
000213 2fac      	MOV  R26,R28
000214 5fac      	SUBI R26,-(4)
000215 0fee      	LSL  R30
000216 0fea      	ADD  R30,R26
000217 2e0e      	MOV  R0,R30
000218 2fe2      	MOV  R30,R18
000219 5fef      	SUBI R30,-LOW(1)
00021a 2fac      	MOV  R26,R28
00021b 5fac      	SUBI R26,-(4)
00021c 0fee      	LSL  R30
00021d 0fae      	ADD  R26,R30
00021e d19f      	RCALL __GETW1P
00021f 2da0      	MOV  R26,R0
000220 93ed      	ST   X+,R30
000221 93fc      	ST   X,R31
                +
000222 5f2f     +SUBI R18 , LOW ( - 1 )
000223 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
000224 cfe9      	RJMP _0x75
                 _0x76:
                 ; 0000 03D9 n_altitude[5] = buff_altitude[i];
000225 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
000226 0fa0      	ADD  R26,R16
000227 91ec      	LD   R30,X
000228 e0f0      	LDI  R31,0
000229 fde7      	SBRC R30,7
00022a efff      	SER  R31
00022b d103      	RCALL SUBOPT_0x10
                 ; 0000 03DA                                         }
                 ; 0000 03DB                                 }
                 _0x71:
00022c d0ec      	RCALL SUBOPT_0xB
00022d cfcd      	RJMP _0x6D
                 _0x6E:
                 ; 0000 03DC 
                 ; 0000 03DD                                 selesai:
                 _0x70:
                 ; 0000 03DE 
                 ; 0000 03DF                                 // atoi
                 ; 0000 03E0                                 for(i=0;i<6;i++)        n_altitude[i] -= '0';
00022e d0e7      	RCALL SUBOPT_0xA
                 _0x78:
00022f d0f0      	RCALL SUBOPT_0xD
000230 f444      	BRGE _0x79
000231 d0f2      	RCALL SUBOPT_0xE
000232 91ed      	LD   R30,X+
000233 91fd      	LD   R31,X+
000234 97f0      	SBIW R30,48
000235 93fe      	ST   -X,R31
000236 93ee      	ST   -X,R30
000237 d0e1      	RCALL SUBOPT_0xB
000238 cff6      	RJMP _0x78
                 _0x79:
                 ; 0000 03E3 n_altitude[0] *= 100000;
000239 81ec      	LDD  R30,Y+4
00023a 81fd      	LDD  R31,Y+4+1
00023b eaa0      	LDI  R26,LOW(34464)
00023c e8b6      	LDI  R27,HIGH(34464)
00023d d117      	RCALL __MULW12U
00023e 83ec      	STD  Y+4,R30
00023f 83fd      	STD  Y+4+1,R31
                 ; 0000 03E4                                 n_altitude[1] *=  10000;
000240 81ee      	LDD  R30,Y+6
000241 81ff      	LDD  R31,Y+6+1
000242 e1a0      	LDI  R26,LOW(10000)
000243 e2b7      	LDI  R27,HIGH(10000)
000244 d110      	RCALL __MULW12U
000245 83ee      	STD  Y+6,R30
000246 83ff      	STD  Y+6+1,R31
                 ; 0000 03E5                                 n_altitude[2] *=   1000;
000247 85e8      	LDD  R30,Y+8
000248 85f9      	LDD  R31,Y+8+1
000249 eea8      	LDI  R26,LOW(1000)
00024a e0b3      	LDI  R27,HIGH(1000)
00024b d109      	RCALL __MULW12U
00024c 87e8      	STD  Y+8,R30
00024d 87f9      	STD  Y+8+1,R31
                 ; 0000 03E6                                 n_altitude[3] *=    100;
00024e 85ea      	LDD  R30,Y+10
00024f 85fb      	LDD  R31,Y+10+1
000250 e6a4      	LDI  R26,LOW(100)
000251 e0b0      	LDI  R27,HIGH(100)
000252 d102      	RCALL __MULW12U
000253 87ea      	STD  Y+10,R30
000254 87fb      	STD  Y+10+1,R31
                 ; 0000 03E7                                 n_altitude[4] *=     10;
000255 85ec      	LDD  R30,Y+12
000256 85fd      	LDD  R31,Y+12+1
000257 e0aa      	LDI  R26,LOW(10)
000258 e0b0      	LDI  R27,HIGH(10)
000259 d0fb      	RCALL __MULW12U
00025a 87ec      	STD  Y+12,R30
00025b 87fd      	STD  Y+12+1,R31
                 ; 0000 03E8 
                 ; 0000 03E9                                 // jumlahkan satuan + puluhan + ratusan dst.
                 ; 0000 03EA                                 n_altitude[5] += (n_altitude[0] + n_altitude[1] + n_altitude[2] + n_altitude[3] + n_altitude[4]);
00025c 81ee      	LDD  R30,Y+6
00025d 81ff      	LDD  R31,Y+6+1
00025e 81ac      	LDD  R26,Y+4
00025f 81bd      	LDD  R27,Y+4+1
000260 d0d1      	RCALL SUBOPT_0x11
000261 85a8      	LDD  R26,Y+8
000262 85b9      	LDD  R27,Y+8+1
000263 d0ce      	RCALL SUBOPT_0x11
000264 85aa      	LDD  R26,Y+10
000265 85bb      	LDD  R27,Y+10+1
000266 d0cb      	RCALL SUBOPT_0x11
000267 85ac      	LDD  R26,Y+12
000268 85bd      	LDD  R27,Y+12+1
000269 d0c8      	RCALL SUBOPT_0x11
00026a d0ca      	RCALL SUBOPT_0x12
00026b d0c6      	RCALL SUBOPT_0x11
00026c d0c2      	RCALL SUBOPT_0x10
                 ; 0000 03EB 
                 ; 0000 03EC                                 // meter to feet
                 ; 0000 03ED                                 n_altitude[5] *= 3;
00026d 85ee      	LDD  R30,Y+14
00026e 85ff      	LDD  R31,Y+14+1
00026f e0a3      	LDI  R26,LOW(3)
000270 e0b0      	LDI  R27,HIGH(3)
000271 d0e3      	RCALL __MULW12U
000272 d0c5      	RCALL SUBOPT_0x13
                 ; 0000 03EE 
                 ; 0000 03EF                                 // num to 'string'
                 ; 0000 03F0                                 n_altitude[0] = n_altitude[5] / 100000;
000273 d0c6      	RCALL SUBOPT_0x14
000274 d111      	RCALL __DIVD21U
000275 83ec      	STD  Y+4,R30
000276 83fd      	STD  Y+4+1,R31
                 ; 0000 03F1                                 n_altitude[5] %= 100000;
000277 d0bd      	RCALL SUBOPT_0x12
000278 d0c1      	RCALL SUBOPT_0x14
000279 d140      	RCALL __MODD21U
00027a d0bd      	RCALL SUBOPT_0x13
                 ; 0000 03F2 
                 ; 0000 03F3                                 n_altitude[1] = n_altitude[5] / 10000;
00027b e1e0      	LDI  R30,LOW(10000)
00027c e2f7      	LDI  R31,HIGH(10000)
00027d d0f5      	RCALL __DIVW21U
00027e 83ee      	STD  Y+6,R30
00027f 83ff      	STD  Y+6+1,R31
                 ; 0000 03F4                                 n_altitude[5] %= 10000;
000280 d0b4      	RCALL SUBOPT_0x12
000281 e1e0      	LDI  R30,LOW(10000)
000282 e2f7      	LDI  R31,HIGH(10000)
000283 d133      	RCALL __MODW21U
000284 d0b3      	RCALL SUBOPT_0x13
                 ; 0000 03F5 
                 ; 0000 03F6                                 n_altitude[2] = n_altitude[5] / 1000;
000285 eee8      	LDI  R30,LOW(1000)
000286 e0f3      	LDI  R31,HIGH(1000)
000287 d0eb      	RCALL __DIVW21U
000288 87e8      	STD  Y+8,R30
000289 87f9      	STD  Y+8+1,R31
                 ; 0000 03F7                                 n_altitude[5] %= 1000;
00028a d0aa      	RCALL SUBOPT_0x12
00028b eee8      	LDI  R30,LOW(1000)
00028c e0f3      	LDI  R31,HIGH(1000)
00028d d129      	RCALL __MODW21U
00028e d0a9      	RCALL SUBOPT_0x13
                 ; 0000 03F8 
                 ; 0000 03F9                                 n_altitude[3] = n_altitude[5] / 100;
00028f e6e4      	LDI  R30,LOW(100)
000290 e0f0      	LDI  R31,HIGH(100)
000291 d0e1      	RCALL __DIVW21U
000292 87ea      	STD  Y+10,R30
000293 87fb      	STD  Y+10+1,R31
                 ; 0000 03FA                                 n_altitude[5] %= 100;
000294 d0a0      	RCALL SUBOPT_0x12
000295 e6e4      	LDI  R30,LOW(100)
000296 e0f0      	LDI  R31,HIGH(100)
000297 d11f      	RCALL __MODW21U
000298 d09f      	RCALL SUBOPT_0x13
                 ; 0000 03FB 
                 ; 0000 03FC                                 n_altitude[4] = n_altitude[5] / 10;
000299 e0ea      	LDI  R30,LOW(10)
00029a e0f0      	LDI  R31,HIGH(10)
00029b d0d7      	RCALL __DIVW21U
00029c 87ec      	STD  Y+12,R30
00029d 87fd      	STD  Y+12+1,R31
                 ; 0000 03FD                                 n_altitude[5] %= 10;
00029e d096      	RCALL SUBOPT_0x12
00029f e0ea      	LDI  R30,LOW(10)
0002a0 e0f0      	LDI  R31,HIGH(10)
0002a1 d115      	RCALL __MODW21U
0002a2 d08c      	RCALL SUBOPT_0x10
                 ; 0000 03FE 
                 ; 0000 03FF                                 // itoa, pindahkan dari variable numerik ke eeprom
                 ; 0000 0400                                 for(i=0;i<6;i++)        altitude[i] = (char)(n_altitude[i] + '0');
0002a3 d072      	RCALL SUBOPT_0xA
                 _0x7B:
0002a4 d07b      	RCALL SUBOPT_0xD
0002a5 f45c      	BRGE _0x7C
0002a6 01f8      	MOVW R30,R16
0002a7 5de3      	SUBI R30,LOW(-_altitude)
0002a8 4fff      	SBCI R31,HIGH(-_altitude)
0002a9 010f      	MOVW R0,R30
0002aa d079      	RCALL SUBOPT_0xE
0002ab 91ec      	LD   R30,X
0002ac 5de0      	SUBI R30,-LOW(48)
0002ad 01d0      	MOVW R26,R0
0002ae d11e      	RCALL __EEPROMWRB
0002af d069      	RCALL SUBOPT_0xB
0002b0 cff3      	RJMP _0x7B
                 _0x7C:
                 ; 0000 0401 }
                 ; 0000 0402                 }
                 _0x59:
                 ; 0000 0403         }
                 _0x58:
                 ; 0000 0404 
                 ; 0000 0405 } 	// EndOf void ekstrak_gps(void)
                 _0x57:
0002b1 d130      	RCALL __LOADLOCR4
0002b2 9660      	ADIW R28,16
0002b3 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void main(void)
                 ; 0000 040A /***************************************************************************************
                 ; 0000 040B *
                 ; 0000 040C *	MAIN PROGRAM
                 ; 0000 040D *
                 ; 0000 040E */
                 ; 0000 040F {
                 _main:
                 ; 0000 0410 	// pengaturan clock CPU dan menjaga agar kompatibel dengan versi code vision terdahulu
                 ; 0000 0411 #pragma optsize-
                 ; 0000 0412 	CLKPR=0x80;
0002b4 e8e0      	LDI  R30,LOW(128)
0002b5 bde6      	OUT  0x26,R30
                 ; 0000 0413 	CLKPR=0x00;
0002b6 e0e0      	LDI  R30,LOW(0)
0002b7 bde6      	OUT  0x26,R30
                 ; 0000 0414 	#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0415 #pragma optsize+
                 ; 0000 0416 	#endif
                 ; 0000 0417 
                 ; 0000 0418         // set bit register PORTB
                 ; 0000 0419         PORTB=0x00;
0002b8 bbe8      	OUT  0x18,R30
                 ; 0000 041A 
                 ; 0000 041B         // set bit Data Direction Register PORTB
                 ; 0000 041C 	DDRB=0xF8;
0002b9 efe8      	LDI  R30,LOW(248)
0002ba bbe7      	OUT  0x17,R30
                 ; 0000 041D 
                 ; 0000 041E         // set bit register PORTD
                 ; 0000 041F         PORTD=0x09;
0002bb e0e9      	LDI  R30,LOW(9)
0002bc bbe2      	OUT  0x12,R30
                 ; 0000 0420 
                 ; 0000 0421         // set bit Data Direction Register PORTD
                 ; 0000 0422 	DDRD=0x30;
0002bd e3e0      	LDI  R30,LOW(48)
0002be bbe1      	OUT  0x11,R30
                 ; 0000 0423 
                 ; 0000 0424         // set parameter 4800baud, 8, N, 1
                 ; 0000 0425         UCSRA=0x00;
0002bf e0e0      	LDI  R30,LOW(0)
0002c0 b9eb      	OUT  0xB,R30
                 ; 0000 0426 	UCSRB=0x10;
0002c1 e1e0      	LDI  R30,LOW(16)
0002c2 b9ea      	OUT  0xA,R30
                 ; 0000 0427 	UCSRC=0x06;
0002c3 e0e6      	LDI  R30,LOW(6)
0002c4 b9e3      	OUT  0x3,R30
                 ; 0000 0428 	UBRRH=0x00;
0002c5 e0e0      	LDI  R30,LOW(0)
0002c6 b9e2      	OUT  0x2,R30
                 ; 0000 0429 	UBRRL=0x8F;
0002c7 e8ef      	LDI  R30,LOW(143)
0002c8 b9e9      	OUT  0x9,R30
                 ; 0000 042A 
                 ; 0000 042B         // set register Analog Comparator
                 ; 0000 042C         ACSR=0x80;
0002c9 e8e0      	LDI  R30,LOW(128)
0002ca b9e8      	OUT  0x8,R30
                 ; 0000 042D 
                 ; 0000 042E         // set register EXT_IRQ_1 (External Interrupt 1 Request), Low Interrupt
                 ; 0000 042F 	GIMSK=0x80;
0002cb bfeb      	OUT  0x3B,R30
                 ; 0000 0430 	MCUCR=0x08;
0002cc e0e8      	LDI  R30,LOW(8)
0002cd bfe5      	OUT  0x35,R30
                 ; 0000 0431 	EIFR=0x80;
0002ce e8e0      	LDI  R30,LOW(128)
0002cf bfea      	OUT  0x3A,R30
                 ; 0000 0432 
                 ; 0000 0433         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
                 ; 0000 0434 	TCCR1B=0x05;
0002d0 e0e5      	LDI  R30,LOW(5)
0002d1 bdee      	OUT  0x2E,R30
                 ; 0000 0435 
                 ; 0000 0436         // set konstanta waktu 5 detik sebagai awalan
                 ; 0000 0437         //timer_detik(INITIAL_TIME_C);
                 ; 0000 0438         TCNT1H = 0xAB;
0002d2 d029      	RCALL SUBOPT_0x3
                 ; 0000 0439         TCNT1L = 0xA0;
                 ; 0000 043A 
                 ; 0000 043B         // set interupsi timer untuk Timer 1
                 ; 0000 043C         TIMSK=0x80;
0002d3 e8e0      	LDI  R30,LOW(128)
0002d4 bfe9      	OUT  0x39,R30
                 ; 0000 043D 
                 ; 0000 043E         xcount = 0;
0002d5 2433      	CLR  R3
                 ; 0000 043F 
                 ; 0000 0440         // indikator awalan hardware aktif :
                 ; 0000 0441         // nyalakan LED busy
                 ; 0000 0442         L_BUSY = 1;
0002d6 9a95      	SBI  0x12,5
                 ; 0000 0443 
                 ; 0000 0444         // tunggu 500ms
                 ; 0000 0445         delay_ms(500);
0002d7 d021      	RCALL SUBOPT_0x2
0002d8 d028      	RCALL SUBOPT_0x4
                 ; 0000 0446 
                 ; 0000 0447         // nyalakan LED standby
                 ; 0000 0448         L_STBY = 1;
0002d9 9a94      	SBI  0x12,4
                 ; 0000 0449 
                 ; 0000 044A         // tunggu 500ms
                 ; 0000 044B         delay_ms(500);
0002da d01e      	RCALL SUBOPT_0x2
0002db d025      	RCALL SUBOPT_0x4
                 ; 0000 044C 
                 ; 0000 044D         // matikan LED busy
                 ; 0000 044E         L_BUSY = 0;
0002dc 9895      	CBI  0x12,5
                 ; 0000 044F 
                 ; 0000 0450         // tunggu 500ms
                 ; 0000 0451         delay_ms(500);
0002dd d01b      	RCALL SUBOPT_0x2
0002de d022      	RCALL SUBOPT_0x4
                 ; 0000 0452 
                 ; 0000 0453         // aktifkan interupsi global (berdasar setting register)
                 ; 0000 0454         #asm("sei")
0002df 9478      	sei
                 ; 0000 0455 
                 ; 0000 0456         // tidak lakukan apapun selain menunggu interupsi timer1_ovf_isr
                 ; 0000 0457         while (1)
                 _0x83:
                 ; 0000 0458         {
                 ; 0000 0459         	// blok ini kosong
                 ; 0000 045A         };
0002e0 cfff      	RJMP _0x83
                 ; 0000 045B 
                 ; 0000 045C }	// END OF MAIN PROGRAM
                 _0x86:
0002e1 cfff      	RJMP _0x86
                 ;/*
                 ;*
                 ;*	END OF FILE
                 ;*
                 ;****************************************************************************************/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 getchar0:
0002e2 9b5f           sbis usr,rxc
0002e3 cffe           rjmp getchar0
0002e4 b1ec           in   r30,udr
0002e5 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _data_1:
000000 82
000001 a0
000002 82
000003 ac        	.DB  LOW(0xAC82A082),HIGH(0xAC82A082),BYTE3(0xAC82A082),BYTE4(0xAC82A082)
000004 a4
000005 60
000006 60
000007 b2        	.DB  LOW(0xB26060A4),HIGH(0xB26060A4),BYTE3(0xB26060A4),BYTE4(0xB26060A4)
000008 88
000009 64
00000a b0
00000b 82        	.DB  LOW(0x82B06488),HIGH(0x82B06488),BYTE3(0x82B06488),BYTE4(0x82B06488)
00000c 86
00000d 72
00000e ae
00000f 92        	.DB  LOW(0x92AE7286),HIGH(0x92AE7286),BYTE3(0x92AE7286),BYTE4(0x92AE7286)
000010 88
000011 8a
000012 64
000013 40        	.DB  LOW(0x40648A88),HIGH(0x40648A88),BYTE3(0x40648A88),BYTE4(0x40648A88)
000014 62
000015 ae
000016 92
000017 88        	.DB  LOW(0x8892AE62),HIGH(0x8892AE62),BYTE3(0x8892AE62),BYTE4(0x8892AE62)
000018 8a
000019 64
00001a 40
00001b 65        	.DB  LOW(0x6540648A),HIGH(0x6540648A),BYTE3(0x6540648A),BYTE4(0x6540648A)
                 _posisi_lat:
00001c 30
00001d 37
00001e 34
00001f 33        	.DB  LOW(0x33343730),HIGH(0x33343730),BYTE3(0x33343730),BYTE4(0x33343730)
000020 2e
000021 33
000022 31
000023 53        	.DB  LOW(0x5331332E),HIGH(0x5331332E),BYTE3(0x5331332E),BYTE4(0x5331332E)
                 _posisi_long:
000024 31
000025 31
000026 30
000027 32        	.DB  LOW(0x32303131),HIGH(0x32303131),BYTE3(0x32303131),BYTE4(0x32303131)
000028 33
000029 2e
00002a 35
00002b 32        	.DB  LOW(0x32352E33),HIGH(0x32352E33),BYTE3(0x32352E33),BYTE4(0x32352E33)
00002c 45        	.DB  0x45
                 _altitude:
00002d           	.BYTE 0x6
                 _komentar:
000033 55
000034 6a
000035 69
000036 20        	.DB  LOW(0x20696A55),HIGH(0x20696A55),BYTE3(0x20696A55),BYTE4(0x20696A55)
000037 43
000038 6f
000039 62
00003a 61        	.DB  LOW(0x61626F43),HIGH(0x61626F43),BYTE3(0x61626F43),BYTE4(0x61626F43)
00003b 20
00003c 41
00003d 50
00003e 52        	.DB  LOW(0x52504120),HIGH(0x52504120),BYTE3(0x52504120),BYTE4(0x52504120)
00003f 53
000040 20
000041 54
000042 72        	.DB  LOW(0x72542053),HIGH(0x72542053),BYTE3(0x72542053),BYTE4(0x72542053)
000043 61
000044 63
000045 65
000046 72        	.DB  LOW(0x72656361),HIGH(0x72656361),BYTE3(0x72656361),BYTE4(0x72656361)
                 _beacon_stat:
000047 00        	.DB  0x0
                 
                 	.DSEG
                 _bit_stuff_G000:
000080           	.BYTE 0x1
                 _crc_lo_S0000003000:
000081           	.BYTE 0x1
                 _crc_hi_S0000003000:
000082           	.BYTE 0x1
                 _xor_in_S0000005000:
000083           	.BYTE 0x2
                 _buff_posisi_S000000A000:
000085           	.BYTE 0x11
                 _buff_altitude_S000000A000:
000096           	.BYTE 0x9
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
0002e6 920a      	ST   -Y,R0
0002e7 921a      	ST   -Y,R1
0002e8 92fa      	ST   -Y,R15
0002e9 936a      	ST   -Y,R22
0002ea 937a      	ST   -Y,R23
0002eb 938a      	ST   -Y,R24
0002ec 939a      	ST   -Y,R25
0002ed 93aa      	ST   -Y,R26
0002ee 93ba      	ST   -Y,R27
0002ef 93ea      	ST   -Y,R30
0002f0 93fa      	ST   -Y,R31
0002f1 b7ef      	IN   R30,SREG
0002f2 93ea      	ST   -Y,R30
0002f3 9894      	CBI  0x12,4
0002f4 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
0002f5 93fa      	ST   -Y,R31
0002f6 93ea      	ST   -Y,R30
0002f7 d049      	RCALL _delay_ms
0002f8 cd89      	RJMP _kirim_paket
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0002f9 efe4      	LDI  R30,LOW(500)
0002fa e0f1      	LDI  R31,HIGH(500)
0002fb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
0002fc eaeb      	LDI  R30,LOW(171)
0002fd bded      	OUT  0x2D,R30
0002fe eae0      	LDI  R30,LOW(160)
0002ff bdec      	OUT  0x2C,R30
000300 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x4:
000301 93fa      	ST   -Y,R31
000302 93ea      	ST   -Y,R30
000303 c03d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 17 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x5:
000304 93ea      	ST   -Y,R30
000305 cdf7      	RJMP _kirim_karakter
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000306 e0e0      	LDI  R30,LOW(0)
000307 93e0 0080 	STS  _bit_stuff_G000,R30
000309 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0x7:
00030a 2fa1      	MOV  R26,R17
00030b e0b0      	LDI  R27,0
00030c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
00030d d0b4      	RCALL __EEPROMRDB
00030e cff5      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0x9:
00030f 2fe1      	MOV  R30,R17
000310 e0f0      	LDI  R31,0
000311 5dea      	SUBI R30,LOW(-_matrix*2)
000312 4fff      	SBCI R31,HIGH(-_matrix*2)
000313 91e4      	LPM  R30,Z
000314 93ea      	ST   -Y,R30
000315 ce32      	RJMP _set_dac
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xA:
                +
000316 e000     +LDI R16 , LOW ( 0 )
000317 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
                +
000319 5f0f     +SUBI R16 , LOW ( - 1 )
00031a 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00031b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xC:
                +
00031c 3008     +CPI R16 , LOW ( 8 )
00031d e0e0     +LDI R30 , HIGH ( 8 )
00031e 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00031f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xD:
                +
000320 3006     +CPI R16 , LOW ( 6 )
000321 e0e0     +LDI R30 , HIGH ( 6 )
000322 071e     +CPC R17 , R30
                 	__CPWRN 16,17,6
000323 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xE:
000324 2fe0      	MOV  R30,R16
000325 2fac      	MOV  R26,R28
000326 5fac      	SUBI R26,-(4)
000327 0fee      	LSL  R30
000328 0fae      	ADD  R26,R30
000329 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xF:
00032a e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
00032b 0fa0      	ADD  R26,R16
00032c 91ac      	LD   R26,X
00032d 32ae      	CPI  R26,LOW(0x2E)
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x10:
00032f 87ee      	STD  Y+14,R30
000330 87ff      	STD  Y+14+1,R31
000331 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x11:
000332 0fea      	ADD  R30,R26
000333 1ffb      	ADC  R31,R27
000334 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x12:
000335 85ae      	LDD  R26,Y+14
000336 85bf      	LDD  R27,Y+14+1
000337 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x13:
000338 dff6      	RCALL SUBOPT_0x10
000339 cffb      	RJMP SUBOPT_0x12
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x14:
00033a 2788      	CLR  R24
00033b 2799      	CLR  R25
                +
00033c eae0     +LDI R30 , LOW ( 0x186A0 )
00033d e8f6     +LDI R31 , HIGH ( 0x186A0 )
00033e e061     +LDI R22 , BYTE3 ( 0x186A0 )
00033f e070     +LDI R23 , BYTE4 ( 0x186A0 )
                 	__GETD1N 0x186A0
000340 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000341 91e9      	ld   r30,y+
000342 91f9      	ld   r31,y+
000343 9630      	adiw r30,0
000344 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000345 ec8d     +LDI R24 , LOW ( 0xACD )
000346 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000347 9701     +SBIW R24 , 1
000348 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000349 95a8      	wdr
00034a 9731      	sbiw r30,1
00034b f7c9      	brne __delay_ms0
                 __delay_ms1:
00034c 9508      	ret
                 
                 __LSRB12:
00034d 23ee      	TST  R30
00034e 2e0e      	MOV  R0,R30
00034f 2fea      	MOV  R30,R26
000350 f019      	BREQ __LSRB12R
                 __LSRB12L:
000351 95e6      	LSR  R30
000352 940a      	DEC  R0
000353 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000354 9508      	RET
                 
                 __MULW12U:
000355 2e0a      	MOV  R0,R26
000356 2e1b      	MOV  R1,R27
000357 e181      	LDI  R24,17
000358 27aa      	CLR  R26
000359 1bbb      	SUB  R27,R27
00035a c005      	RJMP __MULW12U1
                 __MULW12U3:
00035b f410      	BRCC __MULW12U2
00035c 0da0      	ADD  R26,R0
00035d 1db1      	ADC  R27,R1
                 __MULW12U2:
00035e 95b6      	LSR  R27
00035f 95a7      	ROR  R26
                 __MULW12U1:
000360 95f7      	ROR  R31
000361 95e7      	ROR  R30
000362 958a      	DEC  R24
000363 f7b9      	BRNE __MULW12U3
000364 9508      	RET
                 
                 __DIVB21U:
000365 2400      	CLR  R0
000366 e098      	LDI  R25,8
                 __DIVB21U1:
000367 0faa      	LSL  R26
000368 1c00      	ROL  R0
000369 1a0e      	SUB  R0,R30
00036a f410      	BRCC __DIVB21U2
00036b 0e0e      	ADD  R0,R30
00036c c001      	RJMP __DIVB21U3
                 __DIVB21U2:
00036d 60a1      	SBR  R26,1
                 __DIVB21U3:
00036e 959a      	DEC  R25
00036f f7b9      	BRNE __DIVB21U1
000370 2fea      	MOV  R30,R26
000371 2da0      	MOV  R26,R0
000372 9508      	RET
                 
                 __DIVW21U:
000373 2400      	CLR  R0
000374 2411      	CLR  R1
000375 e190      	LDI  R25,16
                 __DIVW21U1:
000376 0faa      	LSL  R26
000377 1fbb      	ROL  R27
000378 1c00      	ROL  R0
000379 1c11      	ROL  R1
00037a 1a0e      	SUB  R0,R30
00037b 0a1f      	SBC  R1,R31
00037c f418      	BRCC __DIVW21U2
00037d 0e0e      	ADD  R0,R30
00037e 1e1f      	ADC  R1,R31
00037f c001      	RJMP __DIVW21U3
                 __DIVW21U2:
000380 60a1      	SBR  R26,1
                 __DIVW21U3:
000381 959a      	DEC  R25
000382 f799      	BRNE __DIVW21U1
000383 01fd      	MOVW R30,R26
000384 01d0      	MOVW R26,R0
000385 9508      	RET
                 
                 __DIVD21U:
000386 933f      	PUSH R19
000387 934f      	PUSH R20
000388 935f      	PUSH R21
000389 2400      	CLR  R0
00038a 2411      	CLR  R1
00038b 2744      	CLR  R20
00038c 2755      	CLR  R21
00038d e230      	LDI  R19,32
                 __DIVD21U1:
00038e 0faa      	LSL  R26
00038f 1fbb      	ROL  R27
000390 1f88      	ROL  R24
000391 1f99      	ROL  R25
000392 1c00      	ROL  R0
000393 1c11      	ROL  R1
000394 1f44      	ROL  R20
000395 1f55      	ROL  R21
000396 1a0e      	SUB  R0,R30
000397 0a1f      	SBC  R1,R31
000398 0b46      	SBC  R20,R22
000399 0b57      	SBC  R21,R23
00039a f428      	BRCC __DIVD21U2
00039b 0e0e      	ADD  R0,R30
00039c 1e1f      	ADC  R1,R31
00039d 1f46      	ADC  R20,R22
00039e 1f57      	ADC  R21,R23
00039f c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003a0 60a1      	SBR  R26,1
                 __DIVD21U3:
0003a1 953a      	DEC  R19
0003a2 f759      	BRNE __DIVD21U1
0003a3 01fd      	MOVW R30,R26
0003a4 01bc      	MOVW R22,R24
0003a5 01d0      	MOVW R26,R0
0003a6 01ca      	MOVW R24,R20
0003a7 915f      	POP  R21
0003a8 914f      	POP  R20
0003a9 913f      	POP  R19
0003aa 9508      	RET
                 
                 __MODB21:
0003ab 94e8      	CLT
0003ac ffa7      	SBRS R26,7
0003ad c002      	RJMP __MODB211
0003ae 95a1      	NEG  R26
0003af 9468      	SET
                 __MODB211:
0003b0 fde7      	SBRC R30,7
0003b1 95e1      	NEG  R30
0003b2 dfb2      	RCALL __DIVB21U
0003b3 2fea      	MOV  R30,R26
0003b4 f40e      	BRTC __MODB212
0003b5 95e1      	NEG  R30
                 __MODB212:
0003b6 9508      	RET
                 
                 __MODW21U:
0003b7 dfbb      	RCALL __DIVW21U
0003b8 01fd      	MOVW R30,R26
0003b9 9508      	RET
                 
                 __MODD21U:
0003ba dfcb      	RCALL __DIVD21U
0003bb 01fd      	MOVW R30,R26
0003bc 01bc      	MOVW R22,R24
0003bd 9508      	RET
                 
                 __GETW1P:
0003be 91ed      	LD   R30,X+
0003bf 91fc      	LD   R31,X
0003c0 95aa      	DEC  R26
0003c1 9508      	RET
                 
                 __EEPROMRDB:
0003c2 99e1      	SBIC EECR,EEWE
0003c3 cffe      	RJMP __EEPROMRDB
0003c4 93ff      	PUSH R31
0003c5 b7ff      	IN   R31,SREG
0003c6 94f8      	CLI
0003c7 bbae      	OUT  EEARL,R26
0003c8 9ae0      	SBI  EECR,EERE
0003c9 b3ed      	IN   R30,EEDR
0003ca bfff      	OUT  SREG,R31
0003cb 91ff      	POP  R31
0003cc 9508      	RET
                 
                 __EEPROMWRB:
0003cd 9be1      	SBIS EECR,EEWE
0003ce c002      	RJMP __EEPROMWRB1
0003cf 95a8      	WDR
0003d0 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0003d1 b79f      	IN   R25,SREG
0003d2 94f8      	CLI
0003d3 bbae      	OUT  EEARL,R26
0003d4 9ae0      	SBI  EECR,EERE
0003d5 b38d      	IN   R24,EEDR
0003d6 17e8      	CP   R30,R24
0003d7 f019      	BREQ __EEPROMWRB0
0003d8 bbed      	OUT  EEDR,R30
0003d9 9ae2      	SBI  EECR,EEMWE
0003da 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0003db bf9f      	OUT  SREG,R25
0003dc 9508      	RET
                 
                 __SAVELOCR4:
0003dd 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003de 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003df 931a      	ST   -Y,R17
0003e0 930a      	ST   -Y,R16
0003e1 9508      	RET
                 
                 __LOADLOCR4:
0003e2 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003e3 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003e4 8119      	LDD  R17,Y+1
0003e5 8108      	LD   R16,Y
0003e6 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :  31 r1 :  13 r2 :   0 r3 :   5 r4 :   5 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  21 r17:  50 r18:   7 r19:   9 r20:   7 r21:   6 r22:   9 r23:   5 
r24:  26 r25:  12 r26:  95 r27:  32 r28:   9 r29:   0 r30: 253 r31:  69 
x  :  22 y  : 102 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  13 
adiw  :   5 and   :   0 andi  :   6 asr   :   6 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  11 
brge  :  21 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  10 
cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :  13 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   5 cpi   :  30 cpse  :   0 dec   :  11 des   :   0 eor   :   6 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   1 ld    :  32 ldd   :  31 ldi   : 139 lds   :   5 lpm   :   9 
lsl   :   6 lsr   :   3 mov   :  25 movw  :  20 mul   :   0 muls  :   0 
mulsu :   0 neg   :   3 nop   :   0 or    :   0 ori   :   0 out   :  34 
pop   :   8 push  :   8 rcall : 157 ret   :  38 reti  :   1 rjmp  :  74 
rol   :  11 ror   :   4 sbc   :   4 sbci  :  11 sbi   :  16 sbic  :   4 
sbis  :   2 sbiw  :   6 sbr   :   3 sbrc  :   4 sbrs  :   2 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   2 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  22 
sts   :   8 sub   :   4 subi  :  34 swap  :   0 tst   :   1 wdr   :   2 

Instructions used: 62 out of 114 (54.4%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007ce   1954     44   1998    2048  97.6%
[.dseg] 0x000060 0x00009f      0     31     31     223  13.9%
[.eseg] 0x000000 0x000048      0     72     72     128  56.3%

Assembly complete, 0 errors, 3 warnings
