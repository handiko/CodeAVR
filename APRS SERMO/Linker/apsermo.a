;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/31/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdint.h>
;
;#define _1200           0
;#define _2200           1
;
;#ifdef        _OPTIMIZE_SIZE_
;        #define CONST_1200      46
;        #define CONST_2200      25  // 22-25    22-->2400Hz   25-->2200Hz
;#else
;        #define CONST_1200      50
;        #define CONST_2200      25
;#endif
;
;#define GAP_TIME_       30
;#define TX_DELAY_       45
;#define FLAG_           0x7E
;#define CONTROL_FIELD_  0x03
;#define PROTOCOL_ID_    0xF0
;#define TD_POSISI_      '!'
;#define TD_TELEM_       'T'
;#define TELEM_NUM_      '#'
;#define SEPARATOR_      ','
;#define SYM_TAB_OVL_    '/'
;#define SYM_CODE_       'r'
;#define TX_TAIL_        15
;
;#include <delay.h>
;#include <stdarg.h>
;
;#define PTT     PORTB.7
;
;#define ON      1
;
;void set_nada(char i_nada);
;void kirim_karakter(unsigned char input);
;void kirim_paket(void);
;void ubah_nada(void);
;void hitung_crc(char in_crc);
;void kirim_crc(void);
;unsigned char read_adc(unsigned char adc_input);
;void read_sensor(void);
;void _itoa_(void);
;
;flash unsigned char data_1[21] =
;{
;        ('A'<<1),('P'<<1),('R'<<1),('S'<<1),(' '<<1),(' '<<1),(' '<<1),
;        ('V'<<1),('H'<<1),('O'<<1),('M'<<1),('O'<<1),(' '<<1),(' '<<1),
;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),('2'<<1)+1
;};
;flash char posisi_lat[8] =
;{
;        '0','7','4','9','.','4','8','S'
;};
;flash char posisi_long[9] =
;{
;        '1','1','0','0','7','.','4','0','E'
;};
;flash unsigned char def_t[43] =
;{
;        ":SERMO    :PARM.Piezo1,Piezo2,W_Lvl,Cahaya"
;};
;flash unsigned char unit_t[37] =
;{
;        ":SERMO    :UNIT.Volt,Volt,meter,Volt"
;};
;flash unsigned char eqn_t[62] =
;{
;        ":SERMO    :EQNS.0,0.019,0,0,0.019,0,0,0.004,0,0,0.019,0,0,1,0"
;};
;eeprom char beacon_stat = 0;
;char xcount = 0;
;bit nada = _1200;
;static char bit_stuff = 0;
;unsigned short crc;
;
;#ifndef        _1200
;#error        "KONSTANTA _1200 BELUM TERDEFINISI"
;#endif
;
;#ifndef        _2200
;#error        "KONSTANTA _2200 BELUM TERDEFINISI"
;#endif
;
;#ifndef        CONST_1200
;#error        "KONSTANTA CONST_1200 BELUM TERDEFINISI"
;#endif
;
;#ifndef        CONST_2200
;#error        "KONSTANTA CONST_2200 BELUM TERDEFINISI"
;#endif
;
;#ifndef        GAP_TIME_
;#error        "KONSTANTA GAP_TIME_ BELUM TERDEFINISI"
;#endif
;
;#if        (GAP_TIME_ < 15)
;//#error        "GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu singkat menyebabkan kepadatan traffic"
;#endif
;#if        (GAP_TIME_ > 60)
;#error        "GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu panjang menyebabkan 'loose of track'  "
;#endif
;
;//        AKHIR DARI KONSTANTA EVALUATOR
;
;eeprom static uint16_t idx = 0;
;eeprom static int _idx[3];
;eeprom static unsigned char s1 = 0;
;eeprom static unsigned char s2 = 0;
;eeprom static unsigned char s3 = 0;
;eeprom static unsigned char s4 = 0;
;eeprom static unsigned char _ch1[3];
;eeprom static unsigned char _ch2[3];
;eeprom static unsigned char _ch3[3];
;eeprom static unsigned char _ch4[3];
;
;void read_sensor(void)
; 0000 008D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 008E         s1 = (s1 + read_adc(0))/2;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 008F         s2 = (s2 + read_adc(1))/2;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0090         s3 = (s3 + read_adc(2))/2;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0091         s4 = (s4 + read_adc(3))/2;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0092 
; 0000 0093         idx++;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0094         if(idx > 255) idx = 0;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 0095 }
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;
;void _itoa_(void)
; 0000 0098 {
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0099         static int rat,pul,sat;
; 0000 009A 
; 0000 009B         rat = s1 / 100;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 009C         s1 = s1 % 100;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009D         pul = s1 / 10;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 009E         sat = s1 % 10;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 009F 
; 0000 00A0         _ch1[0] = rat + '0';
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A1         _ch1[1] = pul + '0';
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00A2         _ch1[2] = sat + '0';
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00A3 
; 0000 00A4         rat = s2 / 100;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00A5         s2 = s2 % 100;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A6         pul = s2 / 10;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00A7         sat = s2 % 10;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00A8 
; 0000 00A9         _ch2[0] = rat + '0';
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00AA         _ch2[1] = pul + '0';
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00AB         _ch2[2] = sat + '0';
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00AC 
; 0000 00AD         rat = s3 / 100;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00AE         s3 = s3 % 100;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 00AF         pul = s3 / 10;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00B0         sat = s3 % 10;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00B1 
; 0000 00B2         _ch3[0] = rat + '0';
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00B3         _ch3[1] = pul + '0';
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00B4         _ch3[2] = sat + '0';
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00B5 
; 0000 00B6         rat = s4 / 100;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00B7         s4 = s4 % 100;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00B8         pul = s4 / 10;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 00B9         sat = s4 % 10;
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 00BA 
; 0000 00BB         _ch4[0] = rat + '0';
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 00BC         _ch4[1] = pul + '0';
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00BD         _ch4[2] = sat + '0';
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 00BE 
; 0000 00BF         rat = idx / 100;
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00C0         idx = s4 % 100;
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00C1         pul = idx / 10;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00C2         sat = idx % 10;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00C3 
; 0000 00C4         _idx[0] = rat + '0';
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00C5         _idx[1] = pul + '0';
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 00C6         _idx[2] = sat + '0';
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C7 }
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00CA {
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CB         xcount++;
;PCODE: $00000130 VOL: 0
; 0000 00CC 
; 0000 00CD         read_sensor();
;PCODE: $00000131 VOL: 0
; 0000 00CE         _itoa_();
;PCODE: $00000132 VOL: 0
; 0000 00CF 
; 0000 00D0         if(xcount==1)
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 00D1         {
; 0000 00D2                 delay_ms(500);
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00D3                 kirim_paket();
;PCODE: $00000139 VOL: 0
; 0000 00D4                 xcount = 0;
;PCODE: $0000013A VOL: 0
; 0000 00D5         }
; 0000 00D6 
; 0000 00D7         TCNT1H = 0xAB;
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00D8         TCNT1L = 0xA0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D9 
; 0000 00DA }       // EndOf interrupt [TIM1_OVF] void timer1_ovf_isr(void)
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;
;
;void kirim_paket(void)
; 0000 00DE {
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00DF         char i;
; 0000 00E0 
; 0000 00E1         crc = 0xFFFF;
;PCODE: $00000145 VOL: 0
;	i -> R17
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
; 0000 00E2         beacon_stat++;
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 00E3         PTT = ON;
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 00E4         delay_ms(100);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00E5 
; 0000 00E6         for(i=0;i<TX_DELAY_;i++)        kirim_karakter(FLAG_);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 00E8 bit_stuff = 0;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 00E9 
; 0000 00EA         for(i=0;i<21;i++)               kirim_karakter(data_1[i]);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 00EC kirim_karakter(0x03);
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00ED 
; 0000 00EE         kirim_karakter(PROTOCOL_ID_);
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
; 0000 00EF 
; 0000 00F0         if(beacon_stat == 20)
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00F1         {
; 0000 00F2                 kirim_karakter(TD_POSISI_);
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 00F3 
; 0000 00F4                 for(i=0;i<8;i++)        kirim_karakter(posisi_lat[i]);
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
; 0000 00F6 kirim_karakter('/');
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 00F7 
; 0000 00F8                 for(i=0;i<9;i++)        kirim_karakter(posisi_long[i]);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 00FA kirim_karakter('r');
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 00FB         }
; 0000 00FC 
; 0000 00FD         else if(beacon_stat == 21)
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 00FE                 for(i=0;i<43;i++)       kirim_karakter(def_t[i]);
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0100 else if(beacon_stat == 22)
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0101                 for(i=0;i<62;i++)       kirim_karakter(eqn_t[i]);
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 0103 else if(beacon_stat == 23)
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 0104                 for(i=0;i<37;i++)       kirim_karakter(unit_t[i]);
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0106 else if(beacon_stat == 100)
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 0107                 beacon_stat = 0;
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0108         else
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0109         {
; 0000 010A                         kirim_karakter(TD_TELEM_);
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 010B                         kirim_karakter(TELEM_NUM_);
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 010C                 for(i=0;i<3;i++)
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 010D                         kirim_karakter(_idx[i]);
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 010E kirim_karakter(',');
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 010F                 for(i=0;i<3;i++)
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 0110                         kirim_karakter(_ch1[i]);
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
; 0000 0111 kirim_karakter(',');
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 0112                 for(i=0;i<3;i++)
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
; 0000 0113                         kirim_karakter(_ch2[i]);
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0114 kirim_karakter(',');
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 0115                 for(i=0;i<3;i++)
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 0116                         kirim_karakter(_ch3[i]);
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0117 kirim_karakter(',');
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 0118                 for(i=0;i<3;i++)
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0119                         kirim_karakter(_ch4[i]);
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 011A kirim_karakter(',');
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 011B                 for(i=0;i<3;i++)
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
; 0000 011C                         kirim_karakter('0');
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
; 0000 011D kirim_karakter(',');
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 011E                 for(i=0;i<8;i++)
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 011F                         kirim_karakter('0');
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0121 }
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 0122 
; 0000 0123         kirim_crc();
;PCODE: $000002B2 VOL: 0
; 0000 0124 
; 0000 0125         for(i=0;i<TX_TAIL_;i++)         kirim_karakter(FLAG_);
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0127 delay_ms(50);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 0128         PTT = 0;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0129 
; 0000 012A 
; 0000 012B }       // EndOf void kirim_paket(void)
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;
;
;/***************************************************************************************/
;        void                         kirim_crc(void)
; 0000 0130 /***************************************************************************************
; 0000 0131 *        ABSTRAKSI          :         Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
; 0000 0132 *                                nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
; 0000 0133 *                                Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 0134 *                                leading one.
; 0000 0135 *
; 0000 0136 *        INPUT                :        tak ada
; 0000 0137 *        OUTPUT                :       tak ada
; 0000 0138 *        RETURN                :       tak ada
; 0000 0139 */
; 0000 013A {
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 013B         static unsigned char crc_lo;
; 0000 013C         static unsigned char crc_hi;
; 0000 013D 
; 0000 013E         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
; 0000 013F         crc_lo = crc ^ 0xFF;
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0140 
; 0000 0141         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
; 0000 0142         crc_hi = (crc >> 8) ^ 0xFF;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0143 
; 0000 0144         // kirim 8 LSB
; 0000 0145         kirim_karakter(crc_lo);
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0146 
; 0000 0147         // kirim 8 MSB
; 0000 0148         kirim_karakter(crc_hi);
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 0149 
; 0000 014A }       // EndOf void kirim_crc(void)
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;
;
;/***************************************************************************************/
;        void                         kirim_karakter(unsigned char input)
; 0000 014F /***************************************************************************************
; 0000 0150 *        ABSTRAKSI          :         mengirim data APRS karakter-demi-karakter, menghitung FCS
; 0000 0151 *                                field dan melakukan bit stuffing. Polarisasi data adalah
; 0000 0152 *                                NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
; 0000 0153 *                                bit terakhir yang ditahan jika bit masukan adalah bit 1.
; 0000 0154 *                                Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
; 0000 0155 *                                masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
; 0000 0156 *                                 merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
; 0000 0157 *                                tone adalah tidak penting dalam polarisasi data NRZI.
; 0000 0158 *
; 0000 0159 *              INPUT                :        byte data protokol APRS
; 0000 015A *        OUTPUT                :       tak ada
; 0000 015B *        RETURN                :       tak ada
; 0000 015C */
; 0000 015D {
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 015E         char i;
; 0000 015F         bit in_bit;
; 0000 0160 
; 0000 0161         // kirimkan setiap byte data (8 bit)
; 0000 0162         for(i=0;i<8;i++)
;PCODE: $000002E0 VOL: 0
;	input -> Y+1
;	i -> R17
;	in_bit -> R15.0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0163         {
; 0000 0164                 // ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
; 0000 0165                 in_bit = (input >> i) & 0x01;
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0166 
; 0000 0167                 // jika data adalah flag, nol-kan pengingat bit stuffing
; 0000 0168                 if(input==0x7E)        {bit_stuff = 0;}
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 0169 
; 0000 016A                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
; 0000 016B                 else                {hitung_crc(in_bit);}
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 016C 
; 0000 016D                 // jika bit data saat ini adalah
; 0000 016E                 // nol
; 0000 016F                 if(!in_bit)
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 0170                 {        // jika ya
; 0000 0171                         // ubah tone dan bentuk gelombang sinus
; 0000 0172                         ubah_nada();
;PCODE: $00000301 VOL: 0
; 0000 0173 
; 0000 0174                         // nol-kan pengingat bit stuffing
; 0000 0175                         bit_stuff = 0;
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 0176                 }
; 0000 0177                 // satu
; 0000 0178                 else
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 0179                 {        // jika ya
; 0000 017A                         // jaga tone dan bentuk gelombang sinus
; 0000 017B                         set_nada(nada);
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 017C 
; 0000 017D                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
; 0000 017E                         bit_stuff++;
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
; 0000 017F 
; 0000 0180                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
; 0000 0181                         if(bit_stuff==5)
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0182                         {
; 0000 0183                                 // kirim bit nol :
; 0000 0184                                 // ubah tone dan bentuk gelombang sinus
; 0000 0185                                 ubah_nada();
;PCODE: $00000310 VOL: 0
; 0000 0186 
; 0000 0187                                 // nol-kan pengingat bit stuffing
; 0000 0188                                 bit_stuff = 0;
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0189 
; 0000 018A                         }
; 0000 018B                 }
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 018C         }
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 018D 
; 0000 018E }      // EndOf void kirim_karakter(unsigned char input)
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;
;
;/***************************************************************************************/
;        void                         hitung_crc(char in_crc)
; 0000 0193 /***************************************************************************************
; 0000 0194 *        ABSTRAKSI          :         menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
; 0000 0195 *                                generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 0196 *                                leading one
; 0000 0197 *
; 0000 0198 *              INPUT                :        bit data yang terkirim
; 0000 0199 *        OUTPUT                :       tak ada
; 0000 019A *        RETURN                :       tak ada
; 0000 019B */
; 0000 019C {
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
; 0000 019D         static unsigned short xor_in;
; 0000 019E 
; 0000 019F         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
; 0000 01A0         xor_in = crc ^ in_crc;
;	in_crc -> Y+0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01A1 
; 0000 01A2         // geser kanan nilai CRC sebanyak 1 bit
; 0000 01A3         crc >>= 1;
;PCODE: $00000325 VOL: 0
; 0000 01A4 
; 0000 01A5         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
; 0000 01A6         if(xor_in & 0x01)
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
; 0000 01A7                 // maka nilai CRC di-Exor-kan dengan generator polinomial
; 0000 01A8                 crc ^= 0x8408;
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 01A9 
; 0000 01AA }      // EndOf void hitung_crc(char in_crc)
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;
;
;/***************************************************************************************/
;        void                         ubah_nada(void)
; 0000 01AF /***************************************************************************************
; 0000 01B0 *        ABSTRAKSI          :         Menukar seting tone terakhir dengan tone yang baru. Tone
; 0000 01B1 *                                1200Hz dan 2200Hz masing - masing merepresentasikan bit
; 0000 01B2 *                                0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
; 0000 01B3 *                                penting dalam polarisasi data NRZI.
; 0000 01B4 *
; 0000 01B5 *              INPUT                :        tak ada
; 0000 01B6 *        OUTPUT                :       tak ada
; 0000 01B7 *        RETURN                :       tak ada
; 0000 01B8 */
; 0000 01B9 {
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01BA         // jika tone terakhir adalah :
; 0000 01BB         // 1200Hz
; 0000 01BC         if(nada ==_1200)
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 01BD         {        // jika ya
; 0000 01BE                 // ubah tone saat ini menjadi 2200Hz
; 0000 01BF                 nada = _2200;
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 01C0 
; 0000 01C1                 // bangkitkan gelombang sinus 2200Hz
; 0000 01C2                 set_nada(nada);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
; 0000 01C3         }
; 0000 01C4         // 2200Hz
; 0000 01C5         else
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
; 0000 01C6         {        // jika ya
; 0000 01C7                 // ubah tone saat ini menjadi 1200Hz
; 0000 01C8                 nada = _1200;
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
; 0000 01C9 
; 0000 01CA                 // bangkitkan gelombang sinus 1200Hz
; 0000 01CB                 set_nada(nada);
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
; 0000 01CC         }
;PCODE: $00000345 VOL: 0
; 0000 01CD 
; 0000 01CE }       // EndOf void ubah_nada(void)
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;
;
;
;/***************************************************************************************/
;        void                         set_nada(char i_nada)
; 0000 01D4 /***************************************************************************************
; 0000 01D5 *        ABSTRAKSI          :         Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
; 0000 01D6 *                                dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
; 0000 01D7 *                                tuning pada jumlah masing - masing perulangan for dan
; 0000 01D8 *                                konstanta waktu untuk meng-adjust parameter baudrate dan
; 0000 01D9 *                                frekuensi tone.
; 0000 01DA *
; 0000 01DB *              INPUT                :        nilai frekuensi tone yang akan ditransmisikan
; 0000 01DC *        OUTPUT                :       nilai DAC
; 0000 01DD *        RETURN                :       tak ada
; 0000 01DE */
; 0000 01DF {
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01E0         char i;
; 0000 01E1 
; 0000 01E2         // jika frekuensi tone yang akan segera dipancarkan adalah :
; 0000 01E3         // 1200Hz
; 0000 01E4         if(i_nada == _1200)
;PCODE: $0000034A VOL: 0
;	i_nada -> Y+1
;	i -> R17
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 01E5         {
; 0000 01E6                 // jika ya
; 0000 01E7                 for(i=0; i<16; i++)
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
; 0000 01E8                 {
; 0000 01E9                         PORTD.1 = 1;
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01EA                         delay_us(CONST_1200);
;PCODE: $00000359 VOL: 0
; 0000 01EB                 }
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 01EC         }
; 0000 01ED         // 2200Hz
; 0000 01EE         else
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
; 0000 01EF         {
; 0000 01F0                 // jika ya
; 0000 01F1                 for(i=0; i<16; i++)
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 01F2                 {
; 0000 01F3                         PORTD.1 = 0;
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01F4                         delay_us(CONST_1200);
;PCODE: $0000036C VOL: 0
; 0000 01F5                 }
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
; 0000 01F6         }
;PCODE: $00000372 VOL: 0
; 0000 01F7 
; 0000 01F8 }         // EndOf void set_nada(char i_nada)
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;
;
;#define ADC_VREF_TYPE 0x20
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0200 {
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 0201         ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 0202         // Delay needed for the stabilization of the ADC input voltage
; 0000 0203         delay_us(10);
;PCODE: $0000037D VOL: 0
; 0000 0204         // Start the AD conversion
; 0000 0205         ADCSRA|=0x40;
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
; 0000 0206         // Wait for the AD conversion to complete
; 0000 0207         while ((ADCSRA & 0x10)==0);
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
; 0000 0208         ADCSRA|=0x10;
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 0209         return ADCH;
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 020A }
;PCODE: $0000038B VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 020F {
;PCODE: $0000038C VOL: 0
; 0000 0210         PORTA=0x00;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 0211         DDRA=0x00;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 0212 
; 0000 0213         PORTB=0x00;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 0214         DDRB=0xFF;
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 0215 
; 0000 0216         PORTC=0x00;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 0217         DDRC=0xFF;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 0218 
; 0000 0219         PORTD=0xFF;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 021A         DDRD=0xFF;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 021B 
; 0000 021C         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
; 0000 021D 	TCCR1B=0x05;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
; 0000 021E 
; 0000 021F         // set konstanta waktu 5 detik sebagai awalan
; 0000 0220         //timer_detik(INITIAL_TIME_C);
; 0000 0221         TCNT1H = 0xAB;
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
; 0000 0222         TCNT1L = 0xA0;
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0223 
; 0000 0224         // set interupsi timer untuk Timer 1
; 0000 0225         TIMSK=0x04;
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
; 0000 0226 
; 0000 0227         xcount = 0;
;PCODE: $000003A5 VOL: 0
; 0000 0228 
; 0000 0229 
; 0000 022A         delay_ms(500);
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 022B 
; 0000 022C         // aktifkan interupsi global (berdasar setting register)
; 0000 022D         #asm("sei")
;PCODE: $000003A9 VOL: 0
	sei
;PCODE: $000003AA VOL: 0
; 0000 022E 
; 0000 022F         // tidak lakukan apapun selain menunggu interupsi timer1_ovf_isr
; 0000 0230         while (1)
;PCODE: $000003AB VOL: 0
; 0000 0231         {
; 0000 0232         	// blok ini kosong
; 0000 0233         };
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0234 }
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
