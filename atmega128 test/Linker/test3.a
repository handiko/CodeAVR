;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/28/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E // Place your code here
; 0000 001F     PORTD.7 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020     delay_ms(1000);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021     PORTD.7 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0022 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0026 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027 // Place your code here
; 0000 0028     PORTD.7 = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029     delay_ms(1000);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A     PORTD.7 = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002B }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 0052 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0053 char status,data;
; 0000 0054 while (1)
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000029 VOL: 0
; 0000 0055       {
; 0000 0056       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0057       data=UDR1;
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0058       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0059          return data;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 005A       }
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 005B }
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 0061 {
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 0062 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
; 0000 0063 UDR1=c;
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 0064 }
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;char string[6];
;char string_n[6] = "nyala";

	.DSEG
;char string_m[6] = "matii";
;
;void main(void)
; 0000 0070 {

	.CSEG
;PCODE: $0000004C VOL: 0
; 0000 0071 // Declare your local variables here
; 0000 0072 
; 0000 0073 // Input/Output Ports initialization
; 0000 0074 // Port A initialization
; 0000 0075 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0076 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0077 PORTA=0x00;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0078 DDRA=0x00;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0079 
; 0000 007A // Port B initialization
; 0000 007B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 007C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 007D PORTB=0x00;
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 007E DDRB=0x00;
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007F 
; 0000 0080 // Port C initialization
; 0000 0081 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0082 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0083 PORTC=0x00;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0084 DDRC=0x00;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0085 
; 0000 0086 // Port D initialization
; 0000 0087 // Func7=Out Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 0088 // State7=0 State6=T State5=T State4=T State3=1 State2=P State1=P State0=P
; 0000 0089 PORTD=0x0F;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 008A DDRD=0x88;
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 008B 
; 0000 008C // Port E initialization
; 0000 008D // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 008E // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 008F PORTE=0x03;
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0090 DDRE=0x02;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
; 0000 0091 
; 0000 0092 // Port F initialization
; 0000 0093 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0094 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0095 PORTF=0x00;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0096 DDRF=0x00;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0097 
; 0000 0098 // Port G initialization
; 0000 0099 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009A // State4=T State3=T State2=T State1=T State0=T
; 0000 009B PORTG=0x00;
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 009C DDRG=0x00;
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 009D 
; 0000 009E // Timer/Counter 0 initialization
; 0000 009F // Clock source: System Clock
; 0000 00A0 // Clock value: Timer 0 Stopped
; 0000 00A1 // Mode: Normal top=0xFF
; 0000 00A2 // OC0 output: Disconnected
; 0000 00A3 ASSR=0x00;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 00A4 TCCR0=0x00;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 00A5 TCNT0=0x00;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 00A6 OCR0=0x00;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 00A7 
; 0000 00A8 // Timer/Counter 1 initialization
; 0000 00A9 // Clock source: System Clock
; 0000 00AA // Clock value: Timer1 Stopped
; 0000 00AB // Mode: Normal top=0xFFFF
; 0000 00AC // OC1A output: Discon.
; 0000 00AD // OC1B output: Discon.
; 0000 00AE // OC1C output: Discon.
; 0000 00AF // Noise Canceler: Off
; 0000 00B0 // Input Capture on Falling Edge
; 0000 00B1 // Timer1 Overflow Interrupt: Off
; 0000 00B2 // Input Capture Interrupt: Off
; 0000 00B3 // Compare A Match Interrupt: Off
; 0000 00B4 // Compare B Match Interrupt: Off
; 0000 00B5 // Compare C Match Interrupt: Off
; 0000 00B6 TCCR1A=0x00;
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00B7 TCCR1B=0x00;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
; 0000 00B8 TCNT1H=0x00;
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 00B9 TCNT1L=0x00;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00BA ICR1H=0x00;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00BB ICR1L=0x00;
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 00BC OCR1AH=0x00;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00BD OCR1AL=0x00;
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00BE OCR1BH=0x00;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 00BF OCR1BL=0x00;
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00C0 OCR1CH=0x00;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 00C1 OCR1CL=0x00;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00C2 
; 0000 00C3 // Timer/Counter 2 initialization
; 0000 00C4 // Clock source: System Clock
; 0000 00C5 // Clock value: Timer2 Stopped
; 0000 00C6 // Mode: Normal top=0xFF
; 0000 00C7 // OC2 output: Disconnected
; 0000 00C8 TCCR2=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00C9 TCNT2=0x00;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 00CA OCR2=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00CB 
; 0000 00CC // Timer/Counter 3 initialization
; 0000 00CD // Clock source: System Clock
; 0000 00CE // Clock value: Timer3 Stopped
; 0000 00CF // Mode: Normal top=0xFFFF
; 0000 00D0 // OC3A output: Discon.
; 0000 00D1 // OC3B output: Discon.
; 0000 00D2 // OC3C output: Discon.
; 0000 00D3 // Noise Canceler: Off
; 0000 00D4 // Input Capture on Falling Edge
; 0000 00D5 // Timer3 Overflow Interrupt: Off
; 0000 00D6 // Input Capture Interrupt: Off
; 0000 00D7 // Compare A Match Interrupt: Off
; 0000 00D8 // Compare B Match Interrupt: Off
; 0000 00D9 // Compare C Match Interrupt: Off
; 0000 00DA TCCR3A=0x00;
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00DB TCCR3B=0x00;
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
; 0000 00DC TCNT3H=0x00;
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00DD TCNT3L=0x00;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 00DE ICR3H=0x00;
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 00DF ICR3L=0x00;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 00E0 OCR3AH=0x00;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00E1 OCR3AL=0x00;
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E2 OCR3BH=0x00;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 00E3 OCR3BL=0x00;
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 00E4 OCR3CH=0x00;
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 00E5 OCR3CL=0x00;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00E6 
; 0000 00E7 // External Interrupt(s) initialization
; 0000 00E8 // INT0: On
; 0000 00E9 // INT0 Mode: Low level
; 0000 00EA // INT1: On
; 0000 00EB // INT1 Mode: Low level
; 0000 00EC // INT2: Off
; 0000 00ED // INT3: Off
; 0000 00EE // INT4: Off
; 0000 00EF // INT5: Off
; 0000 00F0 // INT6: Off
; 0000 00F1 // INT7: Off
; 0000 00F2 EICRA=0x00;
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 00F3 EICRB=0x00;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 00F4 EIMSK=0x03;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00F5 EIFR=0x03;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00F6 
; 0000 00F7 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00F8 TIMSK=0x00;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 00F9 
; 0000 00FA ETIMSK=0x00;
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
; 0000 00FB 
; 0000 00FC // USART0 initialization
; 0000 00FD // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00FE // USART0 Receiver: On
; 0000 00FF // USART0 Transmitter: On
; 0000 0100 // USART0 Mode: Asynchronous
; 0000 0101 // USART0 Baud Rate: 600
; 0000 0102 UCSR0A=0x00;
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0103 UCSR0B=0x18;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0104 UCSR0C=0x06;
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
; 0000 0105 UBRR0H=0x04;
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 0106 UBRR0L=0x7F;
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0107 
; 0000 0108 // USART1 initialization
; 0000 0109 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 010A // USART1 Receiver: On
; 0000 010B // USART1 Transmitter: On
; 0000 010C // USART1 Mode: Asynchronous
; 0000 010D // USART1 Baud Rate: 600
; 0000 010E UCSR1A=0x00;
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 010F UCSR1B=0x18;
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 0110 UCSR1C=0x06;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0111 UBRR1H=0x04;
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
; 0000 0112 UBRR1L=0x7F;
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 0113 
; 0000 0114 // Analog Comparator initialization
; 0000 0115 // Analog Comparator: Off
; 0000 0116 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0117 ACSR=0x80;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 0118 SFIOR=0x00;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 0119 
; 0000 011A // ADC initialization
; 0000 011B // ADC disabled
; 0000 011C ADCSRA=0x00;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
; 0000 011D 
; 0000 011E // SPI initialization
; 0000 011F // SPI disabled
; 0000 0120 SPCR=0x00;
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 0121 
; 0000 0122 // TWI initialization
; 0000 0123 // TWI disabled
; 0000 0124 TWCR=0x00;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 0125 
; 0000 0126 // Global enable interrupts
; 0000 0127 #asm("sei")
;PCODE: $000000D1 VOL: 0
	sei
;PCODE: $000000D2 VOL: 0
; 0000 0128 
; 0000 0129 while (1)
;PCODE: $000000D3 VOL: 0
; 0000 012A       {
; 0000 012B       // Place your code here
; 0000 012C         //gets(string,5);
; 0000 012D         if(string == string_n)
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 012E         {
; 0000 012F             PORTD.7 = 1;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 0130             delay_ms(1000);
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
; 0000 0131             PORTD.7 = 0;
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0132         }
; 0000 0133         if(string == string_m)
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 0134         {
; 0000 0135             PORTD.7 = 0;
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 0136         }
; 0000 0137 
; 0000 0138         puts("stanby");
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0139         putchar('0');
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 013A         putchar1('1');
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 013B         PORTD.7 = 1;
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
; 0000 013C         delay_ms(200);
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 013D         PORTD.7 = 0;
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 013E       };
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
; 0000 013F }
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0

	.DSEG
_0x22:
	.BYTE 0x7
