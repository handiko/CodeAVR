;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/28/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001D {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001E // Place your code here
; 0000 001F     PORTD.7 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0020     delay_ms(1000);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0021     PORTD.7 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0022 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0026 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0027 // Place your code here
; 0000 0028     PORTD.7 = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 0029     delay_ms(1000);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002A     PORTD.7 = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002B }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Receiver buffer
;#define RX_BUFFER_SIZE0 8
;char rx_buffer0[RX_BUFFER_SIZE0];
;
;#if RX_BUFFER_SIZE0 <= 256
;unsigned char rx_wr_index0,rx_rd_index0,rx_counter0;
;#else
;unsigned int rx_wr_index0,rx_rd_index0,rx_counter0;
;#endif
;
;// This flag is set on USART0 Receiver buffer overflow
;bit rx_buffer_overflow0;
;
;// USART0 Receiver interrupt service routine
;interrupt [USART0_RXC] void usart0_rx_isr(void)
; 0000 005E {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 005F char status,data;
; 0000 0060 status=UCSR0A;
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0061 data=UDR0;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0062 if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0063    {
; 0000 0064    rx_buffer0[rx_wr_index0++]=data;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0065 #if RX_BUFFER_SIZE0 == 256
; 0000 0066    // special case for receiver buffer size=256
; 0000 0067    if (++rx_counter0 == 0)
; 0000 0068       {
; 0000 0069 #else
; 0000 006A    if (rx_wr_index0 == RX_BUFFER_SIZE0) rx_wr_index0=0;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 006B    if (++rx_counter0 == RX_BUFFER_SIZE0)
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 006C       {
; 0000 006D       rx_counter0=0;
;PCODE: $0000003E VOL: 0
; 0000 006E #endif
; 0000 006F       rx_buffer_overflow0=1;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0070       }
; 0000 0071    }
;PCODE: $00000042 VOL: 0
; 0000 0072 }
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART0 Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 0079 {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 007A char data;
; 0000 007B while (rx_counter0==0);
;PCODE: $0000004A VOL: 0
;	data -> R17
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007C data=rx_buffer0[rx_rd_index0++];
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007D #if RX_BUFFER_SIZE0 != 256
; 0000 007E if (rx_rd_index0 == RX_BUFFER_SIZE0) rx_rd_index0=0;
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 007F #endif
; 0000 0080 #asm("cli")
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
	cli
;PCODE: $0000005B VOL: 0
; 0000 0081 --rx_counter0;
;PCODE: $0000005C VOL: 0
; 0000 0082 #asm("sei")
;PCODE: $0000005D VOL: 0
	sei
;PCODE: $0000005E VOL: 0
; 0000 0083 return data;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0084 }
;PCODE: $00000062 VOL: 0
;#pragma used-
;#endif
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 0094 {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0095 if (tx_counter0)
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0096    {
; 0000 0097    --tx_counter0;
;PCODE: $00000067 VOL: 0
; 0000 0098    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0099 #if TX_BUFFER_SIZE0 != 256
; 0000 009A    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 009B #endif
; 0000 009C    }
;PCODE: $00000072 VOL: 0
; 0000 009D }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 00A4 {
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 00A5 while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 00A6 #asm("cli")
;PCODE: $0000007F VOL: 0
	cli
;PCODE: $00000080 VOL: 0
; 0000 00A7 if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00A8    {
; 0000 00A9    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00AA #if TX_BUFFER_SIZE0 != 256
; 0000 00AB    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00AC #endif
; 0000 00AD    ++tx_counter0;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AE    }
; 0000 00AF else
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00B0    UDR0=c;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B1 #asm("sei")
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
	sei
;PCODE: $0000009A VOL: 0
; 0000 00B2 }
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;#pragma used-
;#endif
;
;// Get a character from the USART1 Receiver
;#pragma used+
;char getchar1(void)
; 0000 00B9 {
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00BA char status,data;
; 0000 00BB while (1)
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $000000A2 VOL: 0
; 0000 00BC       {
; 0000 00BD       while (((status=UCSR1A) & RX_COMPLETE)==0);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00BE       data=UDR1;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00BF       if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
; 0000 00C0          return data;
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00C1       }
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00C2 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;#pragma used-
;
;// Write a character to the USART1 Transmitter
;#pragma used+
;void putchar1(char c)
; 0000 00C8 {
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C9 while ((UCSR1A & DATA_REGISTER_EMPTY)==0);
;	c -> Y+0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CA UDR1=c;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00CB }
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;#pragma used-
;
;// Standard Input/Output functions
;#include <stdio.h>
;#include <string.h>
;
;bit status;
;bit output = 1;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 00D7 {
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00D8 // Reinitialize Timer1 value
; 0000 00D9 TCNT1H=0xEE56 >> 8;
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 00DA TCNT1L=0xEE56 & 0xff;
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00DB // Place your code here
; 0000 00DC     if(status)
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00DD     {
; 0000 00DE         output = ~output;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 00DF         PORTD.7 = output;
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00E0     }
; 0000 00E1     if(!status)
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 00E2     {
; 0000 00E3         PORTD.7 = 0;
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
; 0000 00E4     }
; 0000 00E5 
; 0000 00E6 }
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;
;
;// Declare your global variables here
;char string[6];
;char string_n[6] = "nyala";

	.DSEG
;char string_m[6] = "matii";
;
;void setting(void)
; 0000 00EF {

	.CSEG
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
; 0000 00F0     char k;
; 0000 00F1 
; 0000 00F2     putchar(13);
;PCODE: $000000E7 VOL: 0
;	k -> R17
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 00F3     putchar1(13);
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
; 0000 00F4 
; 0000 00F5     putsf("###############################################################################################");putchar(13);
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 00F6     putsf("#                                                                                             #");putchar(13);
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F7     putsf("#                                                                                             #");putchar(13);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 00F8     putsf("#                                                                                             #");putchar(13);
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 00F9     putsf("#                                                                                             #");putchar(13);
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 00FA     putsf("#                 :::::::::::::::::::::::::::::::::::::::::                                   #");putchar(13);
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00FB     putsf("#                 ::::::::::::$$$$$$$$$$$$$$$$$::::::::::::                                   #");putchar(13);
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 00FC     putsf("#                 [    Cool Edit Pro v2.1 Build 3097.0                                        #");putchar(13);
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00FD     putsf("#                    >Registration for Win98/ME/2000/XP                                       #");putchar(13);
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 00FE     putsf("#                    >Protection: Trial                                                       #");putchar(13);
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 00FF     putsf("#                    >Release Date: 17-04-2003                                                #");putchar(13);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0100     putsf("#                    >Site: http://www.syntrillium.com                                        #");putchar(13);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 0101     putsf("#                 [ ===================================== ]                                   #");putchar(13);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 0102     putsf("#                 [----------by Crack Demon 2003----------]                                   #");putchar(13);
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0103     putsf("#                 [ ===================================== ]                                   #");putchar(13);
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0104     putsf("#                 :::::::::::::::::::::::::::::::::::::::::                                   #");putchar(13);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 0105     putsf("#                 ::::::::::::$$$$$$$$$$$$$$$$$::::::::::::                                   #");putchar(13);
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 0106     putsf("#                                                                                             #");putchar(13);
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0107     putsf("#                                                                                             #");putchar(13);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 0108     putsf("#                                                                                             #");putchar(13);
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0109     putsf("#                                                                                             #");putchar(13);
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 010A     putsf("###############################################################################################");putchar(13);
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 010B 
; 0000 010C     ulang :
;PCODE: $00000188 VOL: 0
; 0000 010D 
; 0000 010E     putchar(13);
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 010F     putsf("ENTER SET MODE");putchar(13);
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 0110     putchar(13);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0111     putsf(" Y / N");putchar(13);
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0112     putchar(13);
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 0113     putsf("-->");
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0114 
; 0000 0115     k =getchar();
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 0116     putchar(k);putchar(13);
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 0117     putchar(13);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 0118     if(k == 'Y')
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0119     {
; 0000 011A         status = 1;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 011B         putchar(13);
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 011C         putsf("LED TELAH DINYALAKAN");putchar(13);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
; 0000 011D         putchar(13);
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 011E     }
; 0000 011F     if(k == 'N')
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0120     {
; 0000 0121         status = 0;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 0122         putchar(13);
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0123         putsf("LED TELAH DIMATIKAN");putchar(13);
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 0124         putchar(13);
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 0125     }
; 0000 0126 
; 0000 0127     goto ulang;
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 0128 }
;PCODE: $000001D7 VOL: 0
;
;void main(void)
; 0000 012B {
;PCODE: $000001D8 VOL: 0
; 0000 012C // Declare your local variables here
; 0000 012D 
; 0000 012E // Input/Output Ports initialization
; 0000 012F // Port A initialization
; 0000 0130 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0131 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0132 PORTA=0x00;
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
; 0000 0133 DDRA=0x00;
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 0134 
; 0000 0135 // Port B initialization
; 0000 0136 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0137 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0138 PORTB=0x00;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
; 0000 0139 DDRB=0x00;
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 013A 
; 0000 013B // Port C initialization
; 0000 013C // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 013D // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 013E PORTC=0x00;
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 013F DDRC=0x00;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 0140 
; 0000 0141 // Port D initialization
; 0000 0142 // Func7=Out Func6=In Func5=In Func4=In Func3=Out Func2=In Func1=In Func0=In
; 0000 0143 // State7=0 State6=T State5=T State4=T State3=1 State2=P State1=P State0=P
; 0000 0144 PORTD=0x0F;
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 0145 DDRD=0x88;
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0146 
; 0000 0147 // Port E initialization
; 0000 0148 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 0149 // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 014A PORTE=0x03;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 014B DDRE=0x02;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 014C 
; 0000 014D // Port F initialization
; 0000 014E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0150 PORTF=0x00;
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0151 DDRF=0x00;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0152 
; 0000 0153 // Port G initialization
; 0000 0154 // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0155 // State4=T State3=T State2=T State1=T State0=T
; 0000 0156 PORTG=0x00;
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0157 DDRG=0x00;
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 0158 
; 0000 0159 // Timer/Counter 0 initialization
; 0000 015A // Clock source: System Clock
; 0000 015B // Clock value: Timer 0 Stopped
; 0000 015C // Mode: Normal top=0xFF
; 0000 015D // OC0 output: Disconnected
; 0000 015E ASSR=0x00;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 015F TCCR0=0x00;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0160 TCNT0=0x00;
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 0161 OCR0=0x00;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 0162 
; 0000 0163 // Timer/Counter 1 initialization
; 0000 0164 // Clock source: System Clock
; 0000 0165 // Clock value: 10.800 kHz
; 0000 0166 // Mode: Normal top=0xFFFF
; 0000 0167 // OC1A output: Discon.
; 0000 0168 // OC1B output: Discon.
; 0000 0169 // OC1C output: Discon.
; 0000 016A // Noise Canceler: Off
; 0000 016B // Input Capture on Falling Edge
; 0000 016C // Timer1 Overflow Interrupt: On
; 0000 016D // Input Capture Interrupt: Off
; 0000 016E // Compare A Match Interrupt: Off
; 0000 016F // Compare B Match Interrupt: Off
; 0000 0170 // Compare C Match Interrupt: Off
; 0000 0171 TCCR1A=0x00;
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0172 TCCR1B=0x05;
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
; 0000 0173 TCNT1H=0xAA;
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0174 TCNT1L=0x56;
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
; 0000 0175 ICR1H=0x00;
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0176 ICR1L=0x00;
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
; 0000 0177 OCR1AH=0x00;
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
; 0000 0178 OCR1AL=0x00;
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 0179 OCR1BH=0x00;
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
; 0000 017A OCR1BL=0x00;
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
; 0000 017B OCR1CH=0x00;
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 017C OCR1CL=0x00;
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 017D 
; 0000 017E // Timer/Counter 2 initialization
; 0000 017F // Clock source: System Clock
; 0000 0180 // Clock value: Timer2 Stopped
; 0000 0181 // Mode: Normal top=0xFF
; 0000 0182 // OC2 output: Disconnected
; 0000 0183 TCCR2=0x00;
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
; 0000 0184 TCNT2=0x00;
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0185 OCR2=0x00;
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
; 0000 0186 
; 0000 0187 // Timer/Counter 3 initialization
; 0000 0188 // Clock source: System Clock
; 0000 0189 // Clock value: Timer3 Stopped
; 0000 018A // Mode: Normal top=0xFFFF
; 0000 018B // OC3A output: Discon.
; 0000 018C // OC3B output: Discon.
; 0000 018D // OC3C output: Discon.
; 0000 018E // Noise Canceler: Off
; 0000 018F // Input Capture on Falling Edge
; 0000 0190 // Timer3 Overflow Interrupt: Off
; 0000 0191 // Input Capture Interrupt: Off
; 0000 0192 // Compare A Match Interrupt: Off
; 0000 0193 // Compare B Match Interrupt: Off
; 0000 0194 // Compare C Match Interrupt: Off
; 0000 0195 TCCR3A=0x00;
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 0196 TCCR3B=0x00;
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
; 0000 0197 TCNT3H=0x00;
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0198 TCNT3L=0x00;
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
; 0000 0199 ICR3H=0x00;
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 019A ICR3L=0x00;
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 019B OCR3AH=0x00;
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
; 0000 019C OCR3AL=0x00;
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 019D OCR3BH=0x00;
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 019E OCR3BL=0x00;
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 019F OCR3CH=0x00;
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
; 0000 01A0 OCR3CL=0x00;
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 01A1 
; 0000 01A2 // External Interrupt(s) initialization
; 0000 01A3 // INT0: On
; 0000 01A4 // INT0 Mode: Low level
; 0000 01A5 // INT1: On
; 0000 01A6 // INT1 Mode: Low level
; 0000 01A7 // INT2: Off
; 0000 01A8 // INT3: Off
; 0000 01A9 // INT4: Off
; 0000 01AA // INT5: Off
; 0000 01AB // INT6: Off
; 0000 01AC // INT7: Off
; 0000 01AD EICRA=0x00;
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
; 0000 01AE EICRB=0x00;
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 01AF EIMSK=0x03;
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 01B0 EIFR=0x03;
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 01B1 
; 0000 01B2 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 01B3 TIMSK=0x04;
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 01B4 
; 0000 01B5 ETIMSK=0x00;
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
; 0000 01B6 
; 0000 01B7 // USART0 initialization
; 0000 01B8 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01B9 // USART0 Receiver: On
; 0000 01BA // USART0 Transmitter: On
; 0000 01BB // USART0 Mode: Asynchronous
; 0000 01BC // USART0 Baud Rate: 38400
; 0000 01BD UCSR0A=0x00;
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 01BE UCSR0B=0xD8;
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
; 0000 01BF UCSR0C=0x06;
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 01C0 UBRR0H=0x00;
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
; 0000 01C1 UBRR0L=0x11;
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 01C2 
; 0000 01C3 // USART1 initialization
; 0000 01C4 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01C5 // USART1 Receiver: On
; 0000 01C6 // USART1 Transmitter: On
; 0000 01C7 // USART1 Mode: Asynchronous
; 0000 01C8 // USART1 Baud Rate: 9600
; 0000 01C9 UCSR1A=0x00;
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 01CA UCSR1B=0x18;
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 01CB UCSR1C=0x06;
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 01CC UBRR1H=0x00;
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 01CD UBRR1L=0x47;
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 01CE 
; 0000 01CF // Analog Comparator initialization
; 0000 01D0 // Analog Comparator: Off
; 0000 01D1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01D2 ACSR=0x80;
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
; 0000 01D3 SFIOR=0x00;
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 01D4 
; 0000 01D5 // ADC initialization
; 0000 01D6 // ADC disabled
; 0000 01D7 ADCSRA=0x00;
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 01D8 
; 0000 01D9 // SPI initialization
; 0000 01DA // SPI disabled
; 0000 01DB SPCR=0x00;
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 01DC 
; 0000 01DD // TWI initialization
; 0000 01DE // TWI disabled
; 0000 01DF TWCR=0x00;
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
; 0000 01E0 
; 0000 01E1 // Global enable interrupts
; 0000 01E2 #asm("sei")
;PCODE: $0000025D VOL: 0
	sei
;PCODE: $0000025E VOL: 0
; 0000 01E3 if(!PIND.0) setting();
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 01E4 
; 0000 01E5 while (1)
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
; 0000 01E6       {
; 0000 01E7         // Place your code here
; 0000 01E8         putchar('B');
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 01E9         putchar('B');
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 01EA         putchar('B');
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 01EB         putchar('B');
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 01EC         putchar('B');
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 01ED         putchar('B');
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 01EE         putchar('B');
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 01EF         putchar('B');
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 01F0         putchar('B');
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 01F1         putchar('B');
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 01F2         putchar('B');
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 01F3         putchar('B');
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
; 0000 01F4         putchar('B');
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 01F5         putchar('B');
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
; 0000 01F6         putchar('B');
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 01F7         putchar('B');
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
; 0000 01F8         putchar('B');
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 01F9         putchar('B');
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 01FA         putchar('B');
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 01FB         putchar('B');
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
; 0000 01FC         putchar('B');
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 01FD         putchar('B');
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 01FE         putchar('B');
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 01FF         putchar('B');
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
; 0000 0200         putchar('B');
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0201         putchar('B');
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0202         putchar('B');
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0203         putchar('B');
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 0204         putchar(13);
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0205 
; 0000 0206         putchar1('M');
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 0207         putchar1('M');
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 0208         putchar1('M');
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0209         putchar1('M');
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 020A         putchar1('M');
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 020B         putchar1('M');
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 020C         putchar1('M');
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 020D         putchar1('M');
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 020E         putchar1('M');
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 020F         putchar1('M');
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
; 0000 0210         putchar1('M');
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 0211         putchar1('M');
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0212         putchar1('M');
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 0213         putchar1('M');
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0214         putchar1('M');
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0215         putchar1('M');
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0216         putchar1('M');
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0217         putchar1('M');
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0218         putchar1('M');
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
;PCODE: $000002F4 VOL: 0
; 0000 0219         putchar1('M');
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 021A         putchar1('M');
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
; 0000 021B         putchar1('M');
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 021C         putchar1('M');
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 021D         putchar1(13);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 021E 
; 0000 021F         puts("ahhahahahahahahahha");
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 0220         putsf("kakakkakakakakkakakakakk");
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
; 0000 0221       };
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 0222 }
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0

	.DSEG
_0x35:
	.BYTE 0x14
