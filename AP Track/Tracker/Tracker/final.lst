
AVRASM ver. 2.1.30  D:\Punya Koko\LPKTA\Tracker\Tracker\final.asm Thu May 02 15:49:30 2013

D:\Punya Koko\LPKTA\Tracker\Tracker\final.asm(961): warning: Register r2 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 223
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _crc=R2
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c023      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 c03d      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c041      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _matrix:
000013 0a07
000014 0e0d
000015 0e0f
000016 0a0d      	.DB  0x7,0xA,0xD,0xE,0xF,0xE,0xD,0xA
000017 0507
000018 0102
000019 0100
00001a 0502      	.DB  0x7,0x5,0x2,0x1,0x0,0x1,0x2,0x5
                 _tbl10_G100:
00001b 2710
00001c 03e8
00001d 0064
00001e 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00001f 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000020 1000
000021 0100
000022 0010
000023 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 __RESET:
000024 94f8      	CLI
000025 27ee      	CLR  R30
000026 bbec      	OUT  EECR,R30
000027 bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
000028 e1f8      	LDI  R31,0x18
000029 b7a4      	IN   R26,MCUSR
00002a 7fa7      	CBR  R26,8
00002b bfa4      	OUT  MCUSR,R26
00002c bdf1      	OUT  WDTCR,R31
00002d bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
00002e e08d      	LDI  R24,(14-2)+1
00002f e0a2      	LDI  R26,2
                 __CLEAR_REG:
000030 93ed      	ST   X+,R30
000031 958a      	DEC  R24
000032 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000033 e880      	LDI  R24,__CLEAR_SRAM_SIZE
000034 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
000038 e0e0      	LDI  R30,__GPIOR0_INIT
000039 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
00003a bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
00003b bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00003c edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00003d bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
00003e e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
00003f c1be      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/***************************************************************************************
                 ;*
                 ;*				HANYA UNTUK TUJUAN EDUKASIONAL
                 ;*				FOR EDUCATION PURPOSE ONLY
                 ;*
                 ;*				COPYRIGHT (c)2012, HANDIKO GESANG ANUGRAH SEJATI
                 ;*				(handikogesang@gmail.com)
                 ;*
                 ;*				2 FEBRUARY 2012
                 ;*
                 ;*				BASIC APRS BEACON, GPS PARSER, & APRS ENCODER ONLY
                 ;*				TANPA FITUR SMART BEACONING(TM), TELEMETRY, DAN PC CONFIG
                 ;*
                 ;*				LAST REVISION 14 APRIL 2012
                 ;*
                 ;*				DOKUMEN INI BEBAS UNTUK DISEBARLUASKAN.
                 ;*				HARAP TIDAK MELAKUKAN PERUBAHAN APAPUN ATAS ISI DOKUMEN INI
                 ;*				DAN MENCANTUMKAN NAMA DAN EMAIL PENULIS JIKA INGIN MENYEBAR-
                 ;*				LUASKAN DOKUMEN INI.
                 ;*
                 ;* Project 		: 	APRS BEACON
                 ;* Version 		: 	GPS SUPPORTED, EEPROM DATA PROTECTOR SUPPORTED
                 ;* Date    		: 	02/02/2012
                 ;* Author  		: 	HANDIKO GESANG ANUGRAH S.
                 ;* Company 		: 	TIM INSTRUMENTASI TELEMETRI DAN TELEKONTROL
                 ;* 	  			LABORATORIUM SENSOR DAN SISTEM TELEKONTROL
                 ;* 	  			JURUSAN TEKNIK FISIKA
                 ;*           			FAKULTAS TEKNIK
                 ;*           			UNIVERSITAS GADJAH MADA
                 ;*
                 ;* Chip type           	: 	ATtiny2313
                 ;* Program type        	: 	Application
                 ;* Clock frequency     	: 	11.059200 MHz
                 ;* Memory model        	: 	Tiny
                 ;* External SRAM size  	: 	0
                 ;* Data Stack size     	: 	32
                 ;*
                 ;* File			:	final.c
                 ;*
                 ;* Fungsi - fungsi	: 	void set_dac(char value)
                 ;* 				void set_nada(char i_nada)
                 ;* 				void kirim_karakter(unsigned char input)
                 ;* 				void kirim_paket(void)
                 ;* 				void ubah_nada(void)
                 ;* 				void hitung_crc(char in_crc)
                 ;* 				void kirim_crc(void)
                 ;* 				void ekstrak_gps(void)
                 ;* 				void init_usart(void)
                 ;* 				void clear_usart(void)
                 ;* 				void timer_detik(char detik)
                 ;*
                 ;* Variabel global	:	char rx_buffer[RX_BUFFER_SIZE]
                 ;* 				bit rx_buffer_overflow
                 ;*                               flash char matrix[ ]
                 ;*				eeprom char data_1[ ]
                 ;*				eeprom char posisi_lat[ ]
                 ;*				eeprom char posisi_long[ ]
                 ;*				eeprom char data_extension[ ]
                 ;*				eeprom char komentar[ ]
                 ;*				eeprom char status[ ]
                 ;*				eeprom char beacon_stat
                 ;*				char xcount
                 ;*				bit nada
                 ;*				static char bit_stuff
                 ;*				unsigned short crc;
                 ;*
                 ;* Konstanta custom	:	_1200
                 ;* 				_2200
                 ;* 				CONST_1200
                 ;* 				CONST_2200
                 ;* 				GAP_TIME_
                 ;*				INITIAL_TIME_C
                 ;*				FWD_TIME_C
                 ;*				FLAG_
                 ;*				CONTROL_FIELD_
                 ;*				PROTOCOL_ID_
                 ;*				TD_POSISI_
                 ;*				TD_STATUS_
                 ;*				SYM_TAB_OVL_
                 ;*				SYM_CODE_
                 ;*
                 ;* Chip I/O		:	TX_NOW  PIND.3
                 ;* 				PTT     PORTB.3
                 ;* 				DAC_0   PORTB.7
                 ;* 				DAC_1   PORTB.6
                 ;* 				DAC_2   PORTB.5
                 ;* 				DAC_3   PORTB.4
                 ;* 				L_BUSY	PORTD.5
                 ;* 				L_STBY  PORTD.4
                 ;*
                 ;* Vektor		:	RJMP __RESET
                 ;*				RJMP _ext_int1_isr
                 ;*				RJMP _timer1_ovf_isr
                 ;*
                 ;* Fuse bit		:	BODLEVEL1 = 0
                 ;*
                 ;*
                 ;***************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;*
                 ;*/
                 ;// definisi konstanta kondisi tone yang dikirimkan
                 ;#define _1200		0
                 ;#define _2200		1
                 ;
                 ;// definisi konstanta waktu de-sampling (rekonstruksi) diskrit gelombang sinus untuk tone
                 ;	// 1200Hz dan 2200Hz dalam microsecond (us). Silahkan fine tune konstanta ini untuk
                 ;        // adjusting baudrate dan cek hasilnya dengan menginputkan audio dari hardware APRS
                 ;        // pada PC / Laptop lalu cek hasil tone dan baudrate dengan Cool Edit pro pada
                 ;        // tampilan waveform atau spektral.
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi ukuran
                 ;#ifdef	_OPTIMIZE_SIZE_
                 ;	#define CONST_1200      46
                 ;	#define CONST_2200      22
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi kecepatan
                 ;#else
                 ;	#define CONST_1200      50
                 ;	#define CONST_2200      25
                 ;#endif
                 ;
                 ;// waktu jeda antara transmisi data dalam detik (s)
                 ;#define GAP_TIME_	18
                 ;
                 ;// konstanta waktu timer1_ovf_isr awal
                 ;#define INITIAL_TIME_C	5
                 ;
                 ;// konstanta waktu timer1_ovf_isr selanjutnya
                 ;#define FWD_TIME_C	2
                 ;
                 ;// konstanta waktu opening flag
                 ;#define TX_DELAY_	40
                 ;
                 ;// definisi konstanta karakter Flag
                 ;#define FLAG_		0x7E
                 ;
                 ;// definisi konstanta karakter Control Field
                 ;#define	CONTROL_FIELD_	0x03
                 ;
                 ;// definisi konstanta karakter PID
                 ;#define PROTOCOL_ID_	0xF0
                 ;
                 ;// definisi konstanta karakter Tipe Data posisi
                 ;#define TD_POSISI_	'!'
                 ;
                 ;// definisi konstanta karakter Tipe Data status
                 ;#define TD_STATUS_	'>'
                 ;
                 ;// definisi konstanta karakter simbol tabel dan overlay
                 ;#define SYM_TAB_OVL_	'/'
                 ;
                 ;// definisi konstanta karakter simbol station (Area Locns.)
                 ;#define SYM_CODE_	'l'
                 ;
                 ;// konstanta waktu closing flag
                 ;#define TX_TAIL_	2
                 ;
                 ;//	AKHIR DARI DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;
                 ;
                 ;/**************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <delay.h>
                 ;#include <stdarg.h>
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI INPUT - OUTPUT ATTINY2313
                 ;*
                 ;*/
                 ;// definisi input TX manual (request interupsi eksternal) INT1
                 ;#define TX_NOW  PIND.3
                 ;
                 ;// definisi output LED TX dan transistor sebagai switch TX (Hi = TX, Lo = waiting)
                 ;#define PTT     PORTB.3
                 ;
                 ;// definisi output tegangan DAC ladder resistor sebagai generator sinusoid ( DAC_0 = LSB,
                 ;	// DAC_3 = MSB )
                 ;#define DAC_0   PORTB.7
                 ;#define DAC_1   PORTB.6
                 ;#define DAC_2   PORTB.5
                 ;#define DAC_3   PORTB.4
                 ;
                 ;// definisi output LED saat terima dan ekstrak data GPS (Hi = parsing, Lo = waiting)
                 ;#define L_BUSY	PORTD.5
                 ;
                 ;// definisi output LED saat menunggu interupsi (Hi = waiting, Lo = ada proses)
                 ;#define L_STBY  PORTD.4
                 ;
                 ;//	AKHIR DARI DEFINISI INPUT - OUTPUT ATTINY2313
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;*
                 ;*/
                 ;void set_dac(char value);
                 ;void set_nada(char i_nada);
                 ;void kirim_karakter(unsigned char input);
                 ;void kirim_paket(void);
                 ;void ubah_nada(void);
                 ;void hitung_crc(char in_crc);
                 ;void kirim_crc(void);
                 ;void ekstrak_gps(void);
                 ;void init_usart(void);
                 ;void clear_usart(void);
                 ;void timer_detik(char detik);
                 ;
                 ;//	AKHIR DARI DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI VARIABEL GLOBAL
                 ;*
                 ;*/
                 ;
                 ;// variabel penyimpan nilai rekonstruksi diskrit gelombang sinusoid (matrix 16 ele.)
                 ;flash char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
                 ;
                 ;// variabel penyimpan data adresses
                 ;eeprom char data_1[28] =
                 ;{
                 ;	// destination field, tergeser kiri 1 bit
                 ;        ('A'<<1),('P'<<1),('Z'<<1),('T'<<1),('2'<<1),('3'<<1),0b11100000,
                 ;
                 ;        // source field, tergeser kiri 1 bit
                 ;	('Y'<<1),('D'<<1),('2'<<1),('X'<<1),('A'<<1),('C'<<1),('9'<<1),
                 ;
                 ;        // first path, tergeser kiri 1 bit
                 ;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('1'<<1),(' '<<1),('1'<<1),
                 ;
                 ;        // last path, tergeser kiri 1 bit
                 ;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),('2'<<1)+1
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi lintang dan update data gps
                 ;eeprom char posisi_lat[8] =
                 ;{
                 ;	// latitude
                 ;        '0','7','4','5','.','3','1','S'
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi bujur dan update data gps
                 ;eeprom char posisi_long[9] =
                 ;{
                 ;	// longitude
                 ;        '1','1','0','2','2','.','5','2','E'
                 ;};
                 ;
                 ;// variabel penyimpan data extensi tipe PHGD
                 ;eeprom char data_extension[7] =
                 ;{
                 ;	// header tipe data ekstensi
                 ;        'P','H','G',
                 ;
                 ;        /************************************************************************************************
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;	|	PHGD CODE (Power Height Gain Directivity)						|
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;        |	P		|	H		|	G		|	D		|
                 ;        |-----------------------|-----------------------|-----------------------|-----------------------|
                 ;        |  0 rep.of  0 watts	|  0 rep.of  10 ft.	|  0 rep.of   0dBi	|  0 rep.of  omni.	|
                 ;        |  1 rep.of  1 watts	|  1 rep.of  20 ft.	|  1 rep.of   1dBi	|  1 rep.of  NE		|
                 ;        |  2 rep.of  4 watts	|  2 rep.of  40 ft.	|  2 rep.of   2dBi	|  2 rep.of  E		|
                 ;        |  3 rep.of  9 watts	|  3 rep.of  80 ft.	|  3 rep.of   3dBi	|  3 rep.of  SE		|
                 ;        |  4 rep.of  16 watts   |  4 rep.of  160 ft.	|  4 rep.of   4dBi	|  4 rep.of  S		|
                 ;        |  5 rep.of  25 watts 	|  5 rep.of  320 ft.	|  5 rep.of   5dBi	|  5 rep.of  SW		|
                 ;        |  6 rep.of  36 watts	|  6 rep.of  640 ft.	|  6 rep.of   6dBi	|  6 rep.of  W		|
                 ;        |  7 rep.of  49 watts	|  7 rep.of  1280 ft.	|  7 rep.of   7dBi	|  7 rep.of  NW		|
                 ;        |  8 rep.of  64 watts	|  8 rep.of  2560 ft.	|  8 rep.of   8dBi	|  8 rep.of  N		|
                 ;        |  9 rep.of  81 watts	|  9 rep.of  5120 ft.	|  9 rep.of   9dBi	|-----------------------|
                 ;        *************************************************************************************************/
                 ;
                 ;
                 ;        // nilai representasi dari PHGD
                 ;        // power : 4 watts, P = 2
                 ;        '2',
                 ;
                 ;        // height above average terrain : 10 feet, H = 0
                 ;        '0',
                 ;
                 ;        // antenna gain : 0dBi, G = 0
                 ;        '0',
                 ;
                 ;        // antenna directivity : omnidirectional, D = 0
                 ;        '0'
                 ;
                 ;};
                 ;
                 ;// variabel penyimpan konstanta string komentar
                 ;eeprom char komentar[14] =
                 ;{
                 ;	// komentar
                 ;        'L','a','b','.','S','S','T','K',' ','T','i','m','-','1'
                 ;
                 ;};
                 ;
                 ;// variabel penyimpan konstanta string status
                 ;eeprom char status[47] =
                 ;{
                 ;	// status teks
                 ;        'A','T','t','i','n','y','2','3','1','3',' ',
                 ;        'A','P','R','S',' ','t','r','a','c','k','e','r',' ',
                 ;        'h','a','n','d','i','k','o','g','e','s','a','n','g','@','g','m','a','i','l','.','c','o','m'
                 ;};
                 ;
                 ;// variabel pengingat urutan beacon dan status
                 ;eeprom char beacon_stat = 0;
                 ;
                 ;// variabel penyimpan nilai urutan interupsi, 0 ketika inisialisasi dan reset, 1 ketika TX,
                 ;	// 2 - GAP_TIME_ ketika parsing data gps
                 ;eeprom char xcount = 0;
                 ;
                 ;// variabel penyimpan tone terakhir, _1200 = 0, _2200 = 1, inisialisasi sebagai 1200Hz
                 ;bit nada = _1200;
                 ;
                 ;// variabel penyimpan enablisasi bit stuffing, 0 = disable bit stuffing, 1 = enable bit stuffing
                 ;static char bit_stuff = 0;
                 ;
                 ;// variabel penyimpan nilai sementara dan nilai akhir CRC-16 CCITT
                 ;unsigned short crc;
                 ;
                 ;//	AKHIR DARI DEKLARASI VARIABEL GLOBAL
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	KONSTANTA EVALUATOR
                 ;*
                 ;*/
                 ;// cek define _1200
                 ;#ifndef	_1200
                 ;#error	"KONSTANTA _1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define _2200
                 ;#ifndef	_2200
                 ;#error	"KONSTANTA _2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_1200
                 ;#ifndef	CONST_1200
                 ;#error	"KONSTANTA CONST_1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_2200
                 ;#ifndef	CONST_2200
                 ;#error	"KONSTANTA CONST_2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define GAP_TIME_
                 ;#ifndef	GAP_TIME_
                 ;#error	"KONSTANTA GAP_TIME_ BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define INITIAL_TIME_C
                 ;#ifndef	INITIAL_TIME_C
                 ;#error	"KONSTANTA INITIAL_TIME_C BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define FWD_TIME_C
                 ;#ifndef	FWD_TIME_C
                 ;#error	"KONSTANTA FWD_TIME_C BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek nilai GAP_TIME_ (harus antara 15 - 30)
                 ;#if	(GAP_TIME_ < 15)
                 ;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu singkat menyebabkan kepadatan traffic"
                 ;#endif
                 ;#if	(GAP_TIME_ > 60)
                 ;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu panjang menyebabkan 'loose of track'  "
                 ;#endif
                 ;
                 ;// cek nilai INITIAL_TIME_C (harus kurang dari 7)
                 ;#if	(INITIAL_TIME_C > 6)
                 ;#error	"INITIAL_TIME_C bernilai terlalu besar"
                 ;#endif
                 ;#if	(INITIAL_TIME_C < 1)
                 ;#error	"Nilai INITIAL_TIME_C tidak valid"
                 ;#endif
                 ;
                 ;// cek nilai FWD_TIME_C (harus kurang dari 7)
                 ;#if	(FWD_TIME_C > 6)
                 ;#error	"FWD_TIME_C bernilai terlalu besar"
                 ;#endif
                 ;#if	(FWD_TIME_C < 1)
                 ;#error	"Nilai FWD_TIME_C tidak valid"
                 ;#endif
                 ;
                 ;//	AKHIR DARI KONSTANTA EVALUATOR
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0196 /***************************************************************************************
                 ; 0000 0197 *	ABSTRAKSI	:	interupsi eksternal, ketika input TX_NOW bernilai LOW,
                 ; 0000 0198 *				[EXT_INT1] aktif
                 ; 0000 0199 *
                 ; 0000 019A *      	INPUT		:	input TX_NOW
                 ; 0000 019B *	OUTPUT		:       LED standby dan LED busy
                 ; 0000 019C *	RETURN		:       tak ada
                 ; 0000 019D */
                 ; 0000 019E {
                 
                 	.CSEG
                 _ext_int1_isr:
000040 d1e6      	RCALL SUBOPT_0x0
                 ; 0000 019F 	// matikan LED standby
                 ; 0000 01A0         L_STBY = 0;
                 ; 0000 01A1 
                 ; 0000 01A2         // tunggu 250ms (bounce switch)
                 ; 0000 01A3         delay_ms(250);
000041 efea      	LDI  R30,LOW(250)
000042 e0f0      	LDI  R31,HIGH(250)
000043 d1f2      	RCALL SUBOPT_0x1
                 ; 0000 01A4 
                 ; 0000 01A5         // kirim paket data
                 ; 0000 01A6         kirim_paket();
000044 d02c      	RCALL _kirim_paket
                 ; 0000 01A7 
                 ; 0000 01A8         // nyalakan LED standby
                 ; 0000 01A9         L_STBY = 1;
000045 9a94      	SBI  0x12,4
                 ; 0000 01AA 
                 ; 0000 01AB } 	// EndOf interrupt [EXT_INT1] void ext_int1_isr(void)
000046 c01c      	RJMP _0x76
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 01B0 /***************************************************************************************
                 ; 0000 01B1 *	ABSTRAKSI  	: 	interupsi overflow TIMER 1 [TIM1_OVF], di-set overflow
                 ; 0000 01B2 *				ketika waktu telah mencapai 1 detik. Pengendali urutan
                 ; 0000 01B3 *				waktu (timeline)antara transmisi data APRS dan parsing
                 ; 0000 01B4 *				data gps
                 ; 0000 01B5 *
                 ; 0000 01B6 *      	INPUT		:	tak ada
                 ; 0000 01B7 *	OUTPUT		:       kondisi LED standby dan LED busy
                 ; 0000 01B8 *	RETURN		:       tak ada
                 ; 0000 01B9 */
                 ; 0000 01BA {
                 _timer1_ovf_isr:
000047 d1df      	RCALL SUBOPT_0x0
                 ; 0000 01BB 	// matikan LED stanby
                 ; 0000 01BC         L_STBY = 0;
                 ; 0000 01BD 
                 ; 0000 01BE         // tambahkan 1 nilai variabel xcount
                 ; 0000 01BF         xcount++;
000048 d1f0      	RCALL SUBOPT_0x2
000049 5fef      	SUBI R30,-LOW(1)
00004a d254      	RCALL __EEPROMWRB
00004b 50e1      	SUBI R30,LOW(1)
                 ; 0000 01C0 
                 ; 0000 01C1         // seleksi nilai variabel xcount
                 ; 0000 01C2         // kirim paket data APRS ketika timer bernilai detik ke-1
                 ; 0000 01C3         if(xcount == 1)
00004c d1ec      	RCALL SUBOPT_0x2
00004d 30e1      	CPI  R30,LOW(0x1)
00004e f411      	BRNE _0x9
                 ; 0000 01C4         {	// jika ya
                 ; 0000 01C5                 // kirim paket
                 ; 0000 01C6         	kirim_paket();
00004f d021      	RCALL _kirim_paket
                 ; 0000 01C7         }
                 ; 0000 01C8         // terima dan ekstrak data gps ketika timer detik bernilai genap saja
                 ; 0000 01C9         else if((xcount%2) == 0)
000050 c00e      	RJMP _0xA
                 _0x9:
000051 d1e7      	RCALL SUBOPT_0x2
000052 70e1      	ANDI R30,LOW(0x1)
000053 f421      	BRNE _0xB
                 ; 0000 01CA         {	// jika ya
                 ; 0000 01CB         	// nyalakan LED busy
                 ; 0000 01CC                 L_BUSY = 1;
000054 9a95      	SBI  0x12,5
                 ; 0000 01CD 
                 ; 0000 01CE                 // dapatkan data koordinat sekarang
                 ; 0000 01CF                 ekstrak_gps();
000055 d126      	RCALL _ekstrak_gps
                 ; 0000 01D0 
                 ; 0000 01D1                 //matikan LED busy
                 ; 0000 01D2                 L_BUSY = 0;
000056 9895      	CBI  0x12,5
                 ; 0000 01D3         }
                 ; 0000 01D4         // jika timer detik tidak lulus seleksi di atas, tunggu hingga GAP_TIME_ habis
                 ; 0000 01D5         else if(xcount == GAP_TIME_)
000057 c007      	RJMP _0x10
                 _0xB:
000058 d1e0      	RCALL SUBOPT_0x2
000059 31e2      	CPI  R30,LOW(0x12)
00005a f421      	BRNE _0x11
                 ; 0000 01D6         {	// jika ya
                 ; 0000 01D7         	// reset nilai detik ke-
                 ; 0000 01D8                 xcount = 0;
00005b e7a2      	LDI  R26,LOW(_xcount)
00005c e0b0      	LDI  R27,HIGH(_xcount)
00005d e0e0      	LDI  R30,LOW(0)
00005e d240      	RCALL __EEPROMWRB
                 ; 0000 01D9         }
                 ; 0000 01DA 
                 ; 0000 01DB         // nyalakan LED standby
                 ; 0000 01DC         L_STBY = 1;
                 _0x11:
                 _0x10:
                 _0xA:
00005f 9a94      	SBI  0x12,4
                 ; 0000 01DD 
                 ; 0000 01DE         // reset kembali konstanta waktu timer
                 ; 0000 01DF         timer_detik(FWD_TIME_C);
000060 e0e2      	LDI  R30,LOW(2)
000061 93ea      	ST   -Y,R30
000062 d184      	RCALL _timer_detik
                 ; 0000 01E0 
                 ; 0000 01E1 }       // EndOf interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 _0x76:
000063 91e9      	LD   R30,Y+
000064 bfef      	OUT  SREG,R30
000065 91f9      	LD   R31,Y+
000066 91e9      	LD   R30,Y+
000067 91b9      	LD   R27,Y+
000068 91a9      	LD   R26,Y+
000069 9199      	LD   R25,Y+
00006a 9189      	LD   R24,Y+
00006b 9179      	LD   R23,Y+
00006c 9169      	LD   R22,Y+
00006d 90f9      	LD   R15,Y+
00006e 9019      	LD   R1,Y+
00006f 9009      	LD   R0,Y+
000070 9518      	RETI
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_paket(void)
                 ; 0000 01E6 /***************************************************************************************
                 ; 0000 01E7 *	ABSTRAKSI  	: 	pengendali urutan pengiriman data APRS
                 ; 0000 01E8 *				penyusun protokol APRS
                 ; 0000 01E9 *
                 ; 0000 01EA *      	INPUT		:	tak ada
                 ; 0000 01EB *	OUTPUT		:       kondisi LED dan output transistor switch TX
                 ; 0000 01EC *	RETURN		:       tak ada
                 ; 0000 01ED */
                 ; 0000 01EE {
                 _kirim_paket:
                 ; 0000 01EF 	char i;
                 ; 0000 01F0 
                 ; 0000 01F1         // inisialisasi nilai CRC dengan 0xFFFF
                 ; 0000 01F2 	crc = 0xFFFF;
000071 931a      	ST   -Y,R17
                 ;	i -> R17
000072 efef      	LDI  R30,LOW(65535)
000073 efff      	LDI  R31,HIGH(65535)
000074 011f      	MOVW R2,R30
                 ; 0000 01F3 
                 ; 0000 01F4         // tambahkan 1 nilai counter pancar
                 ; 0000 01F5         beacon_stat++;
000075 d1c7      	RCALL SUBOPT_0x3
000076 5fef      	SUBI R30,-LOW(1)
000077 d227      	RCALL __EEPROMWRB
000078 50e1      	SUBI R30,LOW(1)
                 ; 0000 01F6 
                 ; 0000 01F7         // nyalakan LED TX dan PTT switch
                 ; 0000 01F8 	PTT = 1;
000079 9ac3      	SBI  0x18,3
                 ; 0000 01F9 
                 ; 0000 01FA         // tunggu 500ms
                 ; 0000 01FB         delay_ms(500);
00007a d1c6      	RCALL SUBOPT_0x4
                 ; 0000 01FC 
                 ; 0000 01FD         /**********************************************************************************
                 ; 0000 01FE 
                 ; 0000 01FF         			APRS AX.25 PROTOCOL
                 ; 0000 0200 
                 ; 0000 0201         |------------------------------------------------------------------------
                 ; 0000 0202         |   opn. FLAG	|	DESTINATION	|	SOURCE	|	DIGI'S	| CONTROL...
                 ; 0000 0203         |---------------|-----------------------|---------------|---------------|
                 ; 0000 0204         |   0x7E 1Bytes |	7 Bytes		|       7 Bytes |  0 - 56 Bytes	|
                 ; 0000 0205         |------------------------------------------------------------------------
                 ; 0000 0206 
                 ; 0000 0207         	-----------------------------------------------------------------
                 ; 0000 0208         DIGI'S..|	CONTROL FIELD	|	PROTOCOL ID	|	INFO	| FCS...
                 ; 0000 0209                 |-----------------------|-----------------------|---------------|
                 ; 0000 020A                 |    0x03 1 Bytes	|     0xF0 1 Bytes	|  0 - 256 Bytes|
                 ; 0000 020B                 -----------------------------------------------------------------
                 ; 0000 020C 
                 ; 0000 020D         	--------------------------------|
                 ; 0000 020E         INFO... |	FCS	|   cls. FLAG	|
                 ; 0000 020F                 |---------------|---------------|
                 ; 0000 0210                 |	2 Bytes	|   0x7E 1Bytes |
                 ; 0000 0211                 --------------------------------|
                 ; 0000 0212 
                 ; 0000 0213         Sumber : APRS101, Tucson Amateur Packet Radio Club. www.tapr.org
                 ; 0000 0214         ************************************************************************************/
                 ; 0000 0215 
                 ; 0000 0216         // kirim karakter opening flag
                 ; 0000 0217         for(i=0;i<TX_DELAY_;i++)
00007b e010      	LDI  R17,LOW(0)
                 _0x17:
00007c 3218      	CPI  R17,40
00007d f420      	BRSH _0x18
                 ; 0000 0218         	kirim_karakter(FLAG_);
00007e e7ee      	LDI  R30,LOW(126)
00007f d1c4      	RCALL SUBOPT_0x5
000080 5f1f      	SUBI R17,-1
000081 cffa      	RJMP _0x17
                 _0x18:
                 ; 0000 021B bit_stuff = 0;
000082 d1c3      	RCALL SUBOPT_0x6
                 ; 0000 021C 
                 ; 0000 021D         // kirimkan field : destination, source, PATH 1, PATH 2, control, Protocol ID, dan
                 ; 0000 021E         	// data type ID
                 ; 0000 021F         for(i=0;i<28;i++)
000083 e010      	LDI  R17,LOW(0)
                 _0x1A:
000084 311c      	CPI  R17,28
000085 f430      	BRSH _0x1B
                 ; 0000 0220         	kirim_karakter(data_1[i]);
000086 d1c3      	RCALL SUBOPT_0x7
000087 50a0      	SUBI R26,LOW(-_data_1)
000088 40b0      	SBCI R27,HIGH(-_data_1)
000089 d1c3      	RCALL SUBOPT_0x8
00008a 5f1f      	SUBI R17,-1
00008b cff8      	RJMP _0x1A
                 _0x1B:
                 ; 0000 0223 kirim_karakter(0x03);
00008c e0e3      	LDI  R30,LOW(3)
00008d d1b6      	RCALL SUBOPT_0x5
                 ; 0000 0224 
                 ; 0000 0225         // krimkan protocol ID
                 ; 0000 0226         kirim_karakter(PROTOCOL_ID_);
00008e efe0      	LDI  R30,LOW(240)
00008f d1b4      	RCALL SUBOPT_0x5
                 ; 0000 0227 
                 ; 0000 0228         // jika sudah 20 kali memancar,
                 ; 0000 0229         if(beacon_stat == 20)
000090 d1ac      	RCALL SUBOPT_0x3
000091 31e4      	CPI  R30,LOW(0x14)
000092 f481      	BRNE _0x1C
                 ; 0000 022A         {
                 ; 0000 022B         	// jika ya
                 ; 0000 022C                 // kirim tipe data status
                 ; 0000 022D                 kirim_karakter(TD_STATUS_);
000093 e3ee      	LDI  R30,LOW(62)
000094 d1af      	RCALL SUBOPT_0x5
                 ; 0000 022E 
                 ; 0000 022F                 // kirim teks status
                 ; 0000 0230                 for(i=0;i<47;i++)
000095 e010      	LDI  R17,LOW(0)
                 _0x1E:
000096 321f      	CPI  R17,47
000097 f430      	BRSH _0x1F
                 ; 0000 0231                 	kirim_karakter(status[i]);
000098 d1b1      	RCALL SUBOPT_0x7
000099 5bae      	SUBI R26,LOW(-_status)
00009a 4fbf      	SBCI R27,HIGH(-_status)
00009b d1b1      	RCALL SUBOPT_0x8
00009c 5f1f      	SUBI R17,-1
00009d cff8      	RJMP _0x1E
                 _0x1F:
                 ; 0000 0234 beacon_stat = 0;
00009e e7a1      	LDI  R26,LOW(_beacon_stat)
00009f e0b0      	LDI  R27,HIGH(_beacon_stat)
0000a0 e0e0      	LDI  R30,LOW(0)
0000a1 d1fd      	RCALL __EEPROMWRB
                 ; 0000 0235 
                 ; 0000 0236                 // lompat ke kirim crc
                 ; 0000 0237                 goto lompat;
0000a2 c02d      	RJMP _0x20
                 ; 0000 0238         }
                 ; 0000 0239 
                 ; 0000 023A         // krimkan tipe data posisi
                 ; 0000 023B         kirim_karakter(TD_POSISI_);
                 _0x1C:
0000a3 e2e1      	LDI  R30,LOW(33)
0000a4 d19f      	RCALL SUBOPT_0x5
                 ; 0000 023C 
                 ; 0000 023D         // kirimkan posisi lintang
                 ; 0000 023E         for(i=0;i<8;i++)
0000a5 e010      	LDI  R17,LOW(0)
                 _0x22:
0000a6 3018      	CPI  R17,8
0000a7 f430      	BRSH _0x23
                 ; 0000 023F         	kirim_karakter(posisi_lat[i]);
0000a8 d1a1      	RCALL SUBOPT_0x7
0000a9 5ea4      	SUBI R26,LOW(-_posisi_lat)
0000aa 4fbf      	SBCI R27,HIGH(-_posisi_lat)
0000ab d1a1      	RCALL SUBOPT_0x8
0000ac 5f1f      	SUBI R17,-1
0000ad cff8      	RJMP _0x22
                 _0x23:
                 ; 0000 0242 kirim_karakter('/');
0000ae e2ef      	LDI  R30,LOW(47)
0000af d194      	RCALL SUBOPT_0x5
                 ; 0000 0243 
                 ; 0000 0244         // kirimkan posisi bujur
                 ; 0000 0245 	for(i=0;i<9;i++)
0000b0 e010      	LDI  R17,LOW(0)
                 _0x25:
0000b1 3019      	CPI  R17,9
0000b2 f430      	BRSH _0x26
                 ; 0000 0246         	kirim_karakter(posisi_long[i]);
0000b3 d196      	RCALL SUBOPT_0x7
0000b4 5dac      	SUBI R26,LOW(-_posisi_long)
0000b5 4fbf      	SBCI R27,HIGH(-_posisi_long)
0000b6 d196      	RCALL SUBOPT_0x8
0000b7 5f1f      	SUBI R17,-1
0000b8 cff8      	RJMP _0x25
                 _0x26:
                 ; 0000 0249 kirim_karakter('l');
0000b9 e6ec      	LDI  R30,LOW(108)
0000ba d189      	RCALL SUBOPT_0x5
                 ; 0000 024A 
                 ; 0000 024B         // hanya kirim PHGD code dan komentar pada pancaran ke-5
                 ; 0000 024C         if(beacon_stat == 5)
0000bb d181      	RCALL SUBOPT_0x3
0000bc 30e5      	CPI  R30,LOW(0x5)
0000bd f491      	BRNE _0x27
                 ; 0000 024D         {
                 ; 0000 024E         	// kirimkan field informasi : data ekstensi tipe PHGD
                 ; 0000 024F         	for(i=0;i<7;i++)
0000be e010      	LDI  R17,LOW(0)
                 _0x29:
0000bf 3017      	CPI  R17,7
0000c0 f430      	BRSH _0x2A
                 ; 0000 0250         		kirim_karakter(data_extension[i]);
0000c1 d188      	RCALL SUBOPT_0x7
0000c2 5da3      	SUBI R26,LOW(-_data_extension)
0000c3 4fbf      	SBCI R27,HIGH(-_data_extension)
0000c4 d188      	RCALL SUBOPT_0x8
0000c5 5f1f      	SUBI R17,-1
0000c6 cff8      	RJMP _0x29
                 _0x2A:
                 ; 0000 0253 for(i=0;i<14;i++)
0000c7 e010      	LDI  R17,LOW(0)
                 _0x2C:
0000c8 301e      	CPI  R17,14
0000c9 f430      	BRSH _0x2D
                 ; 0000 0254         		kirim_karakter(komentar[i]);
0000ca d17f      	RCALL SUBOPT_0x7
0000cb 5cac      	SUBI R26,LOW(-_komentar)
0000cc 4fbf      	SBCI R27,HIGH(-_komentar)
0000cd d17f      	RCALL SUBOPT_0x8
0000ce 5f1f      	SUBI R17,-1
0000cf cff8      	RJMP _0x2C
                 _0x2D:
                 ; 0000 0255 }
                 ; 0000 0256 
                 ; 0000 0257 
                 ; 0000 0258         // label lompatan
                 ; 0000 0259         lompat:
                 _0x27:
                 _0x20:
                 ; 0000 025A 
                 ; 0000 025B         // kirimkan field : FCS (CRC-16 CCITT)
                 ; 0000 025C         kirim_crc();
0000d0 d00a      	RCALL _kirim_crc
                 ; 0000 025D 
                 ; 0000 025E         // kirimkan karakter closing flag
                 ; 0000 025F         for(i=0;i<TX_TAIL_;i++)
0000d1 e010      	LDI  R17,LOW(0)
                 _0x2F:
0000d2 3012      	CPI  R17,2
0000d3 f420      	BRSH _0x30
                 ; 0000 0260         	kirim_karakter(FLAG_);
0000d4 e7ee      	LDI  R30,LOW(126)
0000d5 d16e      	RCALL SUBOPT_0x5
0000d6 5f1f      	SUBI R17,-1
0000d7 cffa      	RJMP _0x2F
                 _0x30:
                 ; 0000 0263 PORTB.3 = 0;
0000d8 98c3      	CBI  0x18,3
                 ; 0000 0264 
                 ; 0000 0265 
                 ; 0000 0266 }       // EndOf void kirim_paket(void)
0000d9 9119      	LD   R17,Y+
0000da 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_crc(void)
                 ; 0000 026B /***************************************************************************************
                 ; 0000 026C *	ABSTRAKSI  	: 	Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
                 ; 0000 026D *				nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
                 ; 0000 026E *				Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 026F *				leading one.
                 ; 0000 0270 *
                 ; 0000 0271 *      	INPUT		:	tak ada
                 ; 0000 0272 *	OUTPUT		:       tak ada
                 ; 0000 0273 *	RETURN		:       tak ada
                 ; 0000 0274 */
                 ; 0000 0275 {
                 _kirim_crc:
                 ; 0000 0276 	static unsigned char crc_lo;
                 ; 0000 0277 	static unsigned char crc_hi;
                 ; 0000 0278 
                 ; 0000 0279         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
                 ; 0000 027A         crc_lo = crc ^ 0xFF;
0000db efef      	LDI  R30,LOW(255)
0000dc 25e2      	EOR  R30,R2
0000dd 93e0 0081 	STS  _crc_lo_S0000003000,R30
                 ; 0000 027B 
                 ; 0000 027C         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
                 ; 0000 027D         crc_hi = (crc >> 8) ^ 0xFF;
0000df 2de3      	MOV  R30,R3
0000e0 70f0      	ANDI R31,HIGH(0x0)
0000e1 efaf      	LDI  R26,LOW(255)
0000e2 27ea      	EOR  R30,R26
0000e3 93e0 0082 	STS  _crc_hi_S0000003000,R30
                 ; 0000 027E 
                 ; 0000 027F         // kirim 8 LSB
                 ; 0000 0280         kirim_karakter(crc_lo);
0000e5 91e0 0081 	LDS  R30,_crc_lo_S0000003000
0000e7 d15c      	RCALL SUBOPT_0x5
                 ; 0000 0281 
                 ; 0000 0282         // kirim 8 MSB
                 ; 0000 0283         kirim_karakter(crc_hi);
0000e8 91e0 0082 	LDS  R30,_crc_hi_S0000003000
0000ea d159      	RCALL SUBOPT_0x5
                 ; 0000 0284 
                 ; 0000 0285 }       // EndOf void kirim_crc(void)
0000eb 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_karakter(unsigned char input)
                 ; 0000 028A /***************************************************************************************
                 ; 0000 028B *	ABSTRAKSI  	: 	mengirim data APRS karakter-demi-karakter, menghitung FCS
                 ; 0000 028C *				field dan melakukan bit stuffing. Polarisasi data adalah
                 ; 0000 028D *				NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
                 ; 0000 028E *				bit terakhir yang ditahan jika bit masukan adalah bit 1.
                 ; 0000 028F *				Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
                 ; 0000 0290 *				masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
                 ; 0000 0291 * 				merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
                 ; 0000 0292 *				tone adalah tidak penting dalam polarisasi data NRZI.
                 ; 0000 0293 *
                 ; 0000 0294 *      	INPUT		:	byte data protokol APRS
                 ; 0000 0295 *	OUTPUT		:       tak ada
                 ; 0000 0296 *	RETURN		:       tak ada
                 ; 0000 0297 */
                 ; 0000 0298 {
                 _kirim_karakter:
0000ec 92ff      	PUSH R15
                 ; 0000 0299 	char i;
                 ; 0000 029A 	bit in_bit;
                 ; 0000 029B 
                 ; 0000 029C         // kirimkan setiap byte data (8 bit)
                 ; 0000 029D 	for(i=0;i<8;i++)
0000ed 931a      	ST   -Y,R17
                 ;	input -> Y+1
                 ;	i -> R17
                 ;	in_bit -> R15.0
0000ee e010      	LDI  R17,LOW(0)
                 _0x34:
0000ef 3018      	CPI  R17,8
0000f0 f510      	BRSH _0x35
                 ; 0000 029E         {
                 ; 0000 029F         	// ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
                 ; 0000 02A0                 in_bit = (input >> i) & 0x01;
0000f1 2fe1      	MOV  R30,R17
0000f2 81a9      	LDD  R26,Y+1
0000f3 d17b      	RCALL __LSRB12
0000f4 fbe0      	BST  R30,0
0000f5 f8f0      	BLD  R15,0
                 ; 0000 02A1 
                 ; 0000 02A2                 // jika data adalah flag, nol-kan pengingat bit stuffing
                 ; 0000 02A3                 if(input==0x7E)	{bit_stuff = 0;}
0000f6 37ae      	CPI  R26,LOW(0x7E)
0000f7 f411      	BRNE _0x36
0000f8 d14d      	RCALL SUBOPT_0x6
                 ; 0000 02A4 
                 ; 0000 02A5                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
                 ; 0000 02A6                 else		{hitung_crc(in_bit);}
0000f9 c005      	RJMP _0x37
                 _0x36:
0000fa e0e0      	LDI  R30,0
0000fb fcf0      	SBRC R15,0
0000fc e0e1      	LDI  R30,1
0000fd 93ea      	ST   -Y,R30
0000fe d018      	RCALL _hitung_crc
                 _0x37:
                 ; 0000 02A7 
                 ; 0000 02A8                 // jika bit data saat ini adalah
                 ; 0000 02A9                 // nol
                 ; 0000 02AA                 if(!in_bit)
0000ff fef0      	SBRS R15,0
                 ; 0000 02AB                 {	// jika ya
                 ; 0000 02AC                 	// ubah tone dan bentuk gelombang sinus
                 ; 0000 02AD                         ubah_nada();
000100 c00e      	RJMP _0x74
                 ; 0000 02AE 
                 ; 0000 02AF                         // nol-kan pengingat bit stuffing
                 ; 0000 02B0                         bit_stuff = 0;
                 ; 0000 02B1                 }
                 ; 0000 02B2                 // satu
                 ; 0000 02B3                 else
                 ; 0000 02B4                 {	// jika ya
                 ; 0000 02B5                 	// jaga tone dan bentuk gelombang sinus
                 ; 0000 02B6                         set_nada(nada);
000101 e0e0      	LDI  R30,0
000102 9998      	SBIC 0x13,0
000103 e0e1      	LDI  R30,1
000104 93ea      	ST   -Y,R30
000105 d04f      	RCALL _set_nada
                 ; 0000 02B7 
                 ; 0000 02B8                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
                 ; 0000 02B9                         bit_stuff++;
000106 91e0 0080 	LDS  R30,_bit_stuff_G000
000108 5fef      	SUBI R30,-LOW(1)
000109 93e0 0080 	STS  _bit_stuff_G000,R30
                 ; 0000 02BA 
                 ; 0000 02BB                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
                 ; 0000 02BC                         if(bit_stuff==5)
00010b 91a0 0080 	LDS  R26,_bit_stuff_G000
00010d 30a5      	CPI  R26,LOW(0x5)
00010e f411      	BRNE _0x3A
                 ; 0000 02BD                         {
                 ; 0000 02BE                         	// kirim bit nol :
                 ; 0000 02BF                                 // ubah tone dan bentuk gelombang sinus
                 ; 0000 02C0                                 ubah_nada();
                 _0x74:
00010f d01a      	RCALL _ubah_nada
                 ; 0000 02C1 
                 ; 0000 02C2                                 // nol-kan pengingat bit stuffing
                 ; 0000 02C3                                 bit_stuff = 0;
000110 d135      	RCALL SUBOPT_0x6
                 ; 0000 02C4 
                 ; 0000 02C5                         }
                 ; 0000 02C6                 }
                 _0x3A:
                 ; 0000 02C7         }
000111 5f1f      	SUBI R17,-1
000112 cfdc      	RJMP _0x34
                 _0x35:
                 ; 0000 02C8 
                 ; 0000 02C9 }      // EndOf void kirim_karakter(unsigned char input)
000113 8118      	LDD  R17,Y+0
000114 9622      	ADIW R28,2
000115 90ff      	POP  R15
000116 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			hitung_crc(char in_crc)
                 ; 0000 02CE /***************************************************************************************
                 ; 0000 02CF *	ABSTRAKSI  	: 	menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
                 ; 0000 02D0 *				generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 02D1 *				leading one
                 ; 0000 02D2 *
                 ; 0000 02D3 *      	INPUT		:	bit data yang terkirim
                 ; 0000 02D4 *	OUTPUT		:       tak ada
                 ; 0000 02D5 *	RETURN		:       tak ada
                 ; 0000 02D6 */
                 ; 0000 02D7 {
                 _hitung_crc:
                 ; 0000 02D8 	static unsigned short xor_in;
                 ; 0000 02D9 
                 ; 0000 02DA         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
                 ; 0000 02DB 	xor_in = crc ^ in_crc;
                 ;	in_crc -> Y+0
000117 81e8      	LD   R30,Y
000118 d136      	RCALL SUBOPT_0x9
000119 25e2      	EOR  R30,R2
00011a 25f3      	EOR  R31,R3
00011b 93e0 0083 	STS  _xor_in_S0000005000,R30
00011d 93f0 0084 	STS  _xor_in_S0000005000+1,R31
                 ; 0000 02DC 
                 ; 0000 02DD         // geser kanan nilai CRC sebanyak 1 bit
                 ; 0000 02DE 	crc >>= 1;
00011f 9436      	LSR  R3
000120 9427      	ROR  R2
                 ; 0000 02DF 
                 ; 0000 02E0         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
                 ; 0000 02E1         if(xor_in & 0x01)
000121 91e0 0083 	LDS  R30,_xor_in_S0000005000
000123 70e1      	ANDI R30,LOW(0x1)
000124 f021      	BREQ _0x3B
                 ; 0000 02E2         	// maka nilai CRC di-Exor-kan dengan generator polinomial
                 ; 0000 02E3                 crc ^= 0x8408;
000125 e0e8      	LDI  R30,LOW(33800)
000126 e8f4      	LDI  R31,HIGH(33800)
                +
000127 262e     +EOR R2 , R30
000128 263f     +EOR R3 , R31
                 	__EORWRR 2,3,30,31
                 ; 0000 02E4 
                 ; 0000 02E5 }      // EndOf void hitung_crc(char in_crc)
                 _0x3B:
000129 c029      	RJMP _0x2060002
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ubah_nada(void)
                 ; 0000 02EA /***************************************************************************************
                 ; 0000 02EB *	ABSTRAKSI  	: 	Menukar seting tone terakhir dengan tone yang baru. Tone
                 ; 0000 02EC *				1200Hz dan 2200Hz masing - masing merepresentasikan bit
                 ; 0000 02ED *				0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
                 ; 0000 02EE *				penting dalam polarisasi data NRZI.
                 ; 0000 02EF *
                 ; 0000 02F0 *      	INPUT		:	tak ada
                 ; 0000 02F1 *	OUTPUT		:       tak ada
                 ; 0000 02F2 *	RETURN		:       tak ada
                 ; 0000 02F3 */
                 ; 0000 02F4 {
                 _ubah_nada:
                 ; 0000 02F5 	// jika tone terakhir adalah :
                 ; 0000 02F6         // 1200Hz
                 ; 0000 02F7         if(nada ==_1200)
00012a 9998      	SBIC 0x13,0
00012b c002      	RJMP _0x3C
                 ; 0000 02F8 	{	// jika ya
                 ; 0000 02F9         	// ubah tone saat ini menjadi 2200Hz
                 ; 0000 02FA                 nada = _2200;
00012c 9a98      	SBI  0x13,0
                 ; 0000 02FB 
                 ; 0000 02FC                 // bangkitkan gelombang sinus 2200Hz
                 ; 0000 02FD         	set_nada(nada);
00012d c001      	RJMP _0x75
                 ; 0000 02FE 	}
                 ; 0000 02FF         // 2200Hz
                 ; 0000 0300         else
                 _0x3C:
                 ; 0000 0301         {	// jika ya
                 ; 0000 0302         	// ubah tone saat ini menjadi 1200Hz
                 ; 0000 0303                 nada = _1200;
00012e 9898      	CBI  0x13,0
                 ; 0000 0304 
                 ; 0000 0305                 // bangkitkan gelombang sinus 1200Hz
                 ; 0000 0306         	set_nada(nada);
                 _0x75:
00012f e0e0      	LDI  R30,0
000130 9998      	SBIC 0x13,0
000131 e0e1      	LDI  R30,1
000132 93ea      	ST   -Y,R30
000133 d021      	RCALL _set_nada
                 ; 0000 0307         }
                 ; 0000 0308 
                 ; 0000 0309 }       // EndOf void ubah_nada(void)
000134 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_dac(char value)
                 ; 0000 030E /***************************************************************************************
                 ; 0000 030F *	ABSTRAKSI  	: 	Men-set dan reset output DAC sebagai bilangan biner yang
                 ; 0000 0310 *				merepresentasikan nilai diskrit dari gelombang sinus yang
                 ; 0000 0311 *				sedang dibentuk saat ini sehingga membentuk tegangan sampling
                 ; 0000 0312 *				dari gelombang.
                 ; 0000 0313 *
                 ; 0000 0314 *      	INPUT		:	nilai matrix rekonstruksi diskrit gelombang sinusoid
                 ; 0000 0315 *	OUTPUT		:       DAC 0 - 3, tegangan kontinyu pada output Low Pass Filter
                 ; 0000 0316 *	RETURN		:       tak ada
                 ; 0000 0317 */
                 ; 0000 0318 {
                 _set_dac:
                 ; 0000 0319 	// ambil nilai LSB dari matrix rekonstruksi dan set sebagai DAC-0
                 ; 0000 031A         DAC_0 = value & 0x01;
                 ;	value -> Y+0
000135 81e8      	LD   R30,Y
000136 70e1      	ANDI R30,LOW(0x1)
000137 f411      	BRNE _0x42
000138 98c7      	CBI  0x18,7
000139 c001      	RJMP _0x43
                 _0x42:
00013a 9ac7      	SBI  0x18,7
                 _0x43:
                 ; 0000 031B 
                 ; 0000 031C         // ambil nilai dari matrix rekonstruksi, geser kanan 1 bit, ambil bit paling kanan
                 ; 0000 031D         	// dan set sebagai DAC-1
                 ; 0000 031E         DAC_1 =( value >> 1 ) & 0x01;
00013b 81e8      	LD   R30,Y
00013c 95e6      	LSR  R30
00013d 70e1      	ANDI R30,LOW(0x1)
00013e f411      	BRNE _0x44
00013f 98c6      	CBI  0x18,6
000140 c001      	RJMP _0x45
                 _0x44:
000141 9ac6      	SBI  0x18,6
                 _0x45:
                 ; 0000 031F 
                 ; 0000 0320         // ambil nilai dari matrix rekonstruksi, geser kanan 2 bit, ambil bit paling kanan
                 ; 0000 0321         	// dan set sebagai DAC-2
                 ; 0000 0322         DAC_2 =( value >> 2 ) & 0x01;
000142 81e8      	LD   R30,Y
000143 95e6      	LSR  R30
000144 95e6      	LSR  R30
000145 70e1      	ANDI R30,LOW(0x1)
000146 f411      	BRNE _0x46
000147 98c5      	CBI  0x18,5
000148 c001      	RJMP _0x47
                 _0x46:
000149 9ac5      	SBI  0x18,5
                 _0x47:
                 ; 0000 0323 
                 ; 0000 0324         // ambil nilai dari matrix rekonstruksi, geser kanan 3 bit, ambil bit tersebut dan
                 ; 0000 0325         	// set sebagai DAC-3 (MSB)
                 ; 0000 0326         DAC_3 =( value >> 3 ) & 0x01;
00014a 81e8      	LD   R30,Y
00014b 95e6      	LSR  R30
00014c 95e6      	LSR  R30
00014d 95e6      	LSR  R30
00014e 70e1      	ANDI R30,LOW(0x1)
00014f f411      	BRNE _0x48
000150 98c4      	CBI  0x18,4
000151 c001      	RJMP _0x49
                 _0x48:
000152 9ac4      	SBI  0x18,4
                 _0x49:
                 ; 0000 0327 
                 ; 0000 0328 }      	// EndOf void set_dac(char value)
                 _0x2060002:
000153 9621      	ADIW R28,1
000154 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_nada(char i_nada)
                 ; 0000 032D /***************************************************************************************
                 ; 0000 032E *	ABSTRAKSI  	: 	Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
                 ; 0000 032F *				dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
                 ; 0000 0330 *				tuning pada jumlah masing - masing perulangan for dan
                 ; 0000 0331 *				konstanta waktu untuk meng-adjust parameter baudrate dan
                 ; 0000 0332 *				frekuensi tone.
                 ; 0000 0333 *
                 ; 0000 0334 *      	INPUT		:	nilai frekuensi tone yang akan ditransmisikan
                 ; 0000 0335 *	OUTPUT		:       nilai DAC
                 ; 0000 0336 *	RETURN		:       tak ada
                 ; 0000 0337 */
                 ; 0000 0338 {
                 _set_nada:
                 ; 0000 0339 	char i;
                 ; 0000 033A 
                 ; 0000 033B         // jika frekuensi tone yang akan segera dipancarkan adalah :
                 ; 0000 033C         // 1200Hz
                 ; 0000 033D 	if(i_nada == _1200)
000155 931a      	ST   -Y,R17
                 ;	i_nada -> Y+1
                 ;	i -> R17
000156 81e9      	LDD  R30,Y+1
000157 30e0      	CPI  R30,0
000158 f451      	BRNE _0x4A
                 ; 0000 033E     	{
                 ; 0000 033F         	// jika ya
                 ; 0000 0340         	for(i=0; i<16; i++)
000159 e010      	LDI  R17,LOW(0)
                 _0x4C:
00015a 3110      	CPI  R17,16
00015b f430      	BRSH _0x4D
                 ; 0000 0341         	{
                 ; 0000 0342                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0343                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0344                 	set_dac(matrix[i]);
00015c d0f4      	RCALL SUBOPT_0xA
                 ; 0000 0345 
                 ; 0000 0346                         // bangkitkan frekuensi 1200Hz dari konstanta waktu
                 ; 0000 0347         		delay_us(CONST_1200);
                +
00015d ea8a     +LDI R24 , LOW ( 170 )
                +__DELAY_USB_LOOP :
00015e 958a     +DEC R24
00015f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 170
                 ; 0000 0348         	}
000160 5f1f      	SUBI R17,-1
000161 cff8      	RJMP _0x4C
                 _0x4D:
                 ; 0000 0349     	}
                 ; 0000 034A         // 2200Hz
                 ; 0000 034B     	else
000162 c012      	RJMP _0x4E
                 _0x4A:
                 ; 0000 034C     	{
                 ; 0000 034D         	// jika ya
                 ; 0000 034E         	for(i=0; i<16; i++)
000163 e010      	LDI  R17,LOW(0)
                 _0x50:
000164 3110      	CPI  R17,16
000165 f430      	BRSH _0x51
                 ; 0000 034F         	{
                 ; 0000 0350                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0351                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0352                 	set_dac(matrix[i]);
000166 d0ea      	RCALL SUBOPT_0xA
                 ; 0000 0353 
                 ; 0000 0354                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 0355                 	delay_us(CONST_2200);
                +
000167 e581     +LDI R24 , LOW ( 81 )
                +__DELAY_USB_LOOP :
000168 958a     +DEC R24
000169 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 81
                 ; 0000 0356                 }
00016a 5f1f      	SUBI R17,-1
00016b cff8      	RJMP _0x50
                 _0x51:
                 ; 0000 0357                 // sekali lagi, untuk mengatur baudrate lakukan fine tune pada jumlah for
                 ; 0000 0358                 for(i=0; i<13; i++)
00016c e010      	LDI  R17,LOW(0)
                 _0x53:
00016d 301d      	CPI  R17,13
00016e f430      	BRSH _0x54
                 ; 0000 0359                 {
                 ; 0000 035A                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 035B                 		// dan urutan perulangan for
                 ; 0000 035C                 	set_dac(matrix[i]);
00016f d0e1      	RCALL SUBOPT_0xA
                 ; 0000 035D 
                 ; 0000 035E                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 035F                 	delay_us(CONST_2200);
                +
000170 e581     +LDI R24 , LOW ( 81 )
                +__DELAY_USB_LOOP :
000171 958a     +DEC R24
000172 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 81
                 ; 0000 0360                 }
000173 5f1f      	SUBI R17,-1
000174 cff8      	RJMP _0x53
                 _0x54:
                 ; 0000 0361     	}
                 _0x4E:
                 ; 0000 0362 
                 ; 0000 0363 } 	// EndOf void set_nada(char i_nada)
000175 8118      	LDD  R17,Y+0
000176 9622      	ADIW R28,2
000177 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			getComma(void)
                 ; 0000 0368 /***************************************************************************************
                 ; 0000 0369 *	ABSTRAKSI  	: 	Menunggu data RX serial berupa karakter koma dan segera
                 ; 0000 036A *				kembali pada fungsi yang memanggilnya.
                 ; 0000 036B *
                 ; 0000 036C *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 036D *	OUTPUT		:       tak ada
                 ; 0000 036E *	RETURN		:       tak ada
                 ; 0000 036F */
                 ; 0000 0370 {
                 _getComma:
                 ; 0000 0371 	// jika data yang diterima bukan karakter koma, terima terus
                 ; 0000 0372         	// jika data yang diterima adalah koma, keluar
                 ; 0000 0373         while(getchar() != ',');
                 _0x55:
000178 d0aa      	RCALL _getchar
000179 32ec      	CPI  R30,LOW(0x2C)
00017a f7e9      	BRNE _0x55
                 ; 0000 0374 
                 ; 0000 0375 }      	// EndOf void getComma(void)
00017b 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ekstrak_gps(void)
                 ; 0000 037A /***************************************************************************************
                 ; 0000 037B *	ABSTRAKSI  	: 	Menunggu interupsi RX data serial dari USART, memparsing
                 ; 0000 037C *				data $GPGLL yang diterima menjadi data posisi, dan mengupdate
                 ; 0000 037D *				data variabel posisi.
                 ; 0000 037E *
                 ; 0000 037F *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 0380 *	OUTPUT		:       tak ada
                 ; 0000 0381 *	RETURN		:       tak ada
                 ; 0000 0382 */
                 ; 0000 0383 {
                 _ekstrak_gps:
                 ; 0000 0384 	int i;
                 ; 0000 0385         static char buff_posisi[17];
                 ; 0000 0386 
                 ; 0000 0387         // aktifkan USART param. : 4800baudrate, 8, N, 1
                 ; 0000 0388         init_usart();
00017c d132      	RCALL __SAVELOCR2
                 ;	i -> R16,R17
00017d d058      	RCALL _init_usart
                 ; 0000 0389 
                 ; 0000 038A         /************************************************************************************************
                 ; 0000 038B         	$GPGLL - GLL - Geographic Position Latitude / Longitude
                 ; 0000 038C 
                 ; 0000 038D                 Contoh : $GPGLL,3723.2475,N,12158.3416,W,161229.487,A*2C
                 ; 0000 038E 
                 ; 0000 038F         |-----------------------------------------------------------------------------------------------|
                 ; 0000 0390         |	Nama		| 	Contoh		|		Deskripsi			|
                 ; 0000 0391         |-----------------------|-----------------------|-----------------------------------------------|
                 ; 0000 0392         |	Message ID	|	$GPGLL		|	header protokol GLL			|
                 ; 0000 0393         |	Latitude	|	3723.2475	|	ddmm.mmmm 	, d=degree, m=minute	|
                 ; 0000 0394         |	N/S indicator	|	N		|	N=utara, S=selatan			|
                 ; 0000 0395         |	Longitude	|	12158.3416	|	dddmm.mmmm	, d=degree, m=minute	|
                 ; 0000 0396         |	W/E indicator	|	W		|	W=barat, E=timur			|
                 ; 0000 0397         |	Waktu UTC (GMT)	|	161229.487	|	HHMMSS.SS  ,H=hour, M=minute, S=second	|
                 ; 0000 0398         |	Status		|	A		|	A=data valid, V=data invalid		|
                 ; 0000 0399         |	Checksum	|	*2C		|						|
                 ; 0000 039A         |-----------------------------------------------------------------------------------------------|
                 ; 0000 039B 
                 ; 0000 039C         	Sumber : GPS SiRF EM-406A datasheet
                 ; 0000 039D 
                 ; 0000 039E         *************************************************************************************************/
                 ; 0000 039F 
                 ; 0000 03A0         // jika data yang diterima bukan karakter $, terima terus
                 ; 0000 03A1         	// jika data yang diterima adalah $, lanjutkan
                 ; 0000 03A2         while(getchar() != '$');
                 _0x58:
00017e d0a4      	RCALL _getchar
00017f 32e4      	CPI  R30,LOW(0x24)
000180 f7e9      	BRNE _0x58
                 ; 0000 03A3 
                 ; 0000 03A4         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter G)
                 ; 0000 03A5 	getchar();
000181 d0a1      	RCALL _getchar
                 ; 0000 03A6 
                 ; 0000 03A7         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter P)
                 ; 0000 03A8         getchar();
000182 d0a0      	RCALL _getchar
                 ; 0000 03A9 
                 ; 0000 03AA         // tunggu data, jika yang diterima adalah karakter G
                 ; 0000 03AB         if(getchar() == 'R')
000183 d09f      	RCALL _getchar
000184 35e2      	CPI  R30,LOW(0x52)
000185 f009      	BREQ PC+2
000186 c04d      	RJMP _0x5B
                 ; 0000 03AC         {
                 ; 0000 03AD         	// maka
                 ; 0000 03AE         	// tunggu data, jika yang diterima adalah karakter L
                 ; 0000 03AF                 if(getchar() == 'M')
000187 d09b      	RCALL _getchar
000188 34ed      	CPI  R30,LOW(0x4D)
000189 f009      	BREQ PC+2
00018a c049      	RJMP _0x5C
                 ; 0000 03B0         	{
                 ; 0000 03B1                 	// maka
                 ; 0000 03B2                         // tunggu data, jika yang diterima adalah karakter L
                 ; 0000 03B3                         if(getchar() == 'C')
00018b d097      	RCALL _getchar
00018c 34e3      	CPI  R30,LOW(0x43)
00018d f009      	BREQ PC+2
00018e c045      	RJMP _0x5D
                 ; 0000 03B4                 	{
                 ; 0000 03B5                         	// maka
                 ; 0000 03B6                                 // tunggu koma dan lanjutkan
                 ; 0000 03B7                                 getComma();
00018f dfe8      	RCALL _getComma
                 ; 0000 03B8                                 getComma();
000190 dfe7      	RCALL _getComma
                 ; 0000 03B9                                 getComma();
000191 dfe6      	RCALL _getComma
                 ; 0000 03BA 
                 ; 0000 03BB                                 // ambil 7 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03BC                         	for(i=0; i<7; i++)	buff_posisi[i] = getchar();
000192 d0c5      	RCALL SUBOPT_0xB
                 _0x5F:
                +
000193 3007     +CPI R16 , LOW ( 7 )
000194 e0e0     +LDI R30 , HIGH ( 7 )
000195 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
000196 f444      	BRGE _0x60
000197 2fe0      	MOV  R30,R16
000198 57eb      	SUBI R30,-LOW(_buff_posisi_S000000A000)
000199 93ef      	PUSH R30
00019a d088      	RCALL _getchar
00019b 91af      	POP  R26
00019c 93ec      	ST   X,R30
00019d d0bd      	RCALL SUBOPT_0xC
00019e cff4      	RJMP _0x5F
                 _0x60:
                 ; 0000 03BF getComma();
00019f dfd8      	RCALL _getComma
                 ; 0000 03C0 
                 ; 0000 03C1                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03C2                                 buff_posisi[7] = getchar();
0001a0 d082      	RCALL _getchar
                +
0001a1 93e0 008c+STS _buff_posisi_S000000A000 + ( 7 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,7
                 ; 0000 03C3 
                 ; 0000 03C4                                 // tunggu koma dan lanjutkan
                 ; 0000 03C5                                 getComma();
0001a3 dfd4      	RCALL _getComma
                 ; 0000 03C6 
                 ; 0000 03C7                                 // ambil 8 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03C8                                 for(i=0; i<8; i++)	buff_posisi[i+8] = getchar();
0001a4 d0b3      	RCALL SUBOPT_0xB
                 _0x62:
                +
0001a5 3008     +CPI R16 , LOW ( 8 )
0001a6 e0e0     +LDI R30 , HIGH ( 8 )
0001a7 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0001a8 f444      	BRGE _0x63
0001a9 2fe0      	MOV  R30,R16
                +
0001aa 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001ab 93ef      	PUSH R30
0001ac d076      	RCALL _getchar
0001ad 91af      	POP  R26
0001ae 93ec      	ST   X,R30
0001af d0ab      	RCALL SUBOPT_0xC
0001b0 cff4      	RJMP _0x62
                 _0x63:
                 ; 0000 03CB getComma();
0001b1 dfc6      	RCALL _getComma
                 ; 0000 03CC 
                 ; 0000 03CD                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03CE                                 buff_posisi[16] = getchar();
0001b2 d070      	RCALL _getchar
                +
0001b3 93e0 0095+STS _buff_posisi_S000000A000 + ( 16 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,16
                 ; 0000 03CF 
                 ; 0000 03D0                                 // segera matikan USART untuk menghindari interupsi [USART_RXC]
                 ; 0000 03D1                                 clear_usart();
0001b5 d02a      	RCALL _clear_usart
                 ; 0000 03D2 
                 ; 0000 03D3                                 // pindahkan data dari buffer kedalam variabel posisi
                 ; 0000 03D4                                 for(i=0;i<8;i++)	{posisi_lat[i]=buff_posisi[i];}
0001b6 d0a1      	RCALL SUBOPT_0xB
                 _0x65:
                +
0001b7 3008     +CPI R16 , LOW ( 8 )
0001b8 e0e0     +LDI R30 , HIGH ( 8 )
0001b9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
0001ba f45c      	BRGE _0x66
0001bb 01f8      	MOVW R30,R16
0001bc 5ee4      	SUBI R30,LOW(-_posisi_lat)
0001bd 4fff      	SBCI R31,HIGH(-_posisi_lat)
0001be 010f      	MOVW R0,R30
0001bf e8a5      	LDI  R26,LOW(_buff_posisi_S000000A000)
0001c0 0fa0      	ADD  R26,R16
0001c1 91ec      	LD   R30,X
0001c2 01d0      	MOVW R26,R0
0001c3 d0db      	RCALL __EEPROMWRB
0001c4 d096      	RCALL SUBOPT_0xC
0001c5 cff1      	RJMP _0x65
                 _0x66:
                 ; 0000 03D5         			for(i=0;i<9;i++)	{posisi_long[i]=buff_posisi[i+8];}
0001c6 d091      	RCALL SUBOPT_0xB
                 _0x68:
                +
0001c7 3009     +CPI R16 , LOW ( 9 )
0001c8 e0e0     +LDI R30 , HIGH ( 9 )
0001c9 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
0001ca f44c      	BRGE _0x69
0001cb 01d8      	MOVW R26,R16
0001cc 5dac      	SUBI R26,LOW(-_posisi_long)
0001cd 4fbf      	SBCI R27,HIGH(-_posisi_long)
0001ce 2fe0      	MOV  R30,R16
                +
0001cf 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001d0 81e0      	LD   R30,Z
0001d1 d0cd      	RCALL __EEPROMWRB
0001d2 d088      	RCALL SUBOPT_0xC
0001d3 cff3      	RJMP _0x68
                 _0x69:
                 ; 0000 03D6 
                 ; 0000 03D7                         }
                 ; 0000 03D8                 }
                 _0x5D:
                 ; 0000 03D9         }
                 _0x5C:
                 ; 0000 03DA 
                 ; 0000 03DB } 	// EndOf void ekstrak_gps(void)
                 _0x5B:
0001d4 d0e0      	RCALL __LOADLOCR2P
0001d5 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			init_usart(void)
                 ; 0000 03E0 /***************************************************************************************
                 ; 0000 03E1 *	ABSTRAKSI  	: 	Setting parameter USART : RX only, 4800baud, 8, N, 1
                 ; 0000 03E2 *
                 ; 0000 03E3 *      	INPUT		:	tak ada
                 ; 0000 03E4 *	OUTPUT		:       tak ada
                 ; 0000 03E5 *	RETURN		:       tak ada
                 ; 0000 03E6 */
                 ; 0000 03E7 {
                 _init_usart:
                 ; 0000 03E8 	// set parameter 4800baud, 8, N, 1
                 ; 0000 03E9 	UCSRA=0x00;
0001d6 e0e0      	LDI  R30,LOW(0)
0001d7 b9eb      	OUT  0xB,R30
                 ; 0000 03EA 	UCSRB=0x10;
0001d8 e1e0      	LDI  R30,LOW(16)
0001d9 b9ea      	OUT  0xA,R30
                 ; 0000 03EB 	UCSRC=0x06;
0001da e0e6      	LDI  R30,LOW(6)
0001db b9e3      	OUT  0x3,R30
                 ; 0000 03EC 	UBRRH=0x00;
0001dc e0e0      	LDI  R30,LOW(0)
0001dd b9e2      	OUT  0x2,R30
                 ; 0000 03ED 	UBRRL=0x8F;
0001de e8ef      	LDI  R30,LOW(143)
0001df c005      	RJMP _0x2060001
                 ; 0000 03EE 
                 ; 0000 03EF }       // EndOf void init_usart(void)
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			clear_usart(void)
                 ; 0000 03F4 /***************************************************************************************
                 ; 0000 03F5 *	ABSTRAKSI  	: 	Me-nonaktifkan dan menghapus parameter USART
                 ; 0000 03F6 *
                 ; 0000 03F7 *      	INPUT		:	tak ada
                 ; 0000 03F8 *	OUTPUT		:       tak ada
                 ; 0000 03F9 *	RETURN		:       tak ada
                 ; 0000 03FA */
                 ; 0000 03FB {
                 _clear_usart:
                 ; 0000 03FC 	// hapus parameter terakhir dari USART
                 ; 0000 03FD         UCSRA=0;
0001e0 e0e0      	LDI  R30,LOW(0)
0001e1 b9eb      	OUT  0xB,R30
                 ; 0000 03FE 	UCSRB=0;
0001e2 b9ea      	OUT  0xA,R30
                 ; 0000 03FF 	UCSRC=0;
0001e3 b9e3      	OUT  0x3,R30
                 ; 0000 0400 	UBRRH=0;
0001e4 b9e2      	OUT  0x2,R30
                 ; 0000 0401 	UBRRL=0;
                 _0x2060001:
0001e5 b9e9      	OUT  0x9,R30
                 ; 0000 0402 
                 ; 0000 0403 }       // EndOf void clear_usart(void)
0001e6 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			timer_detik(char detik)
                 ; 0000 0408 /***************************************************************************************
                 ; 0000 0409 *	ABSTRAKSI  	: 	Menghitung nilai register TCNT1H dan TCNT1L dari input nilai
                 ; 0000 040A *				konstanta timer dalam satuan detik. Formula untuk menghitung
                 ; 0000 040B *				nilai register :
                 ; 0000 040C *				_TCNT1 = (TCNT1H << 8) + TCNT1L
                 ; 0000 040D *				_TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
                 ; 0000 040E *
                 ; 0000 040F *      	INPUT		:	konstanta timer dalam satuan detik
                 ; 0000 0410 *	OUTPUT		:       tak ada
                 ; 0000 0411 *	RETURN		:       tak ada
                 ; 0000 0412 */
                 ; 0000 0413 {
                 _timer_detik:
                 ; 0000 0414 	unsigned short _TCNT1;
                 ; 0000 0415 
                 ; 0000 0416         // hitung nilai vaiabel _TCNT1 dari nilai input berdasarkan formula :
                 ; 0000 0417          	// _TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
                 ; 0000 0418                 // menjadi bilangan 16 bit
                 ; 0000 0419 	_TCNT1 = (1 + 0xFFFF) - (detik * 10800);
0001e7 d0c7      	RCALL __SAVELOCR2
                 ;	detik -> Y+2
                 ;	_TCNT1 -> R16,R17
0001e8 81aa      	LDD  R26,Y+2
0001e9 e0b0      	LDI  R27,0
0001ea e3e0      	LDI  R30,LOW(10800)
0001eb e2fa      	LDI  R31,HIGH(10800)
0001ec d08a      	RCALL __MULW12U
0001ed 2766      	CLR  R22
0001ee 2777      	CLR  R23
                +
0001ef e0a0     +LDI R26 , LOW ( 0x10000 )
0001f0 e0b0     +LDI R27 , HIGH ( 0x10000 )
0001f1 e081     +LDI R24 , BYTE3 ( 0x10000 )
0001f2 e090     +LDI R25 , BYTE4 ( 0x10000 )
                 	__GETD2N 0x10000
0001f3 d093      	RCALL __SWAPD12
0001f4 d075      	RCALL __SUBD12
0001f5 018f      	MOVW R16,R30
                 ; 0000 041A 
                 ; 0000 041B         // ambil 8 bit paling kanan dan jadikan nilai register TCNT1L
                 ; 0000 041C         TCNT1L = _TCNT1 & 0xFF;
0001f6 2fe0      	MOV  R30,R16
0001f7 bdec      	OUT  0x2C,R30
                 ; 0000 041D 
                 ; 0000 041E         // ambil 8 bit paling kiri dan jadikan nilai register TCNT1H
                 ; 0000 041F         TCNT1H = _TCNT1 >> 8;
0001f8 2fe1      	MOV  R30,R17
0001f9 70f0      	ANDI R31,HIGH(0x0)
0001fa bded      	OUT  0x2D,R30
                 ; 0000 0420 
                 ; 0000 0421 }       // EndOf void timer_detik(char detik)
0001fb d0b6      	RCALL __LOADLOCR2
0001fc 9623      	ADIW R28,3
0001fd 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void main(void)
                 ; 0000 0426 /***************************************************************************************
                 ; 0000 0427 *
                 ; 0000 0428 *	MAIN PROGRAM
                 ; 0000 0429 *
                 ; 0000 042A */
                 ; 0000 042B {
                 _main:
                 ; 0000 042C 	// pengaturan clock CPU dan menjaga agar kompatibel dengan versi code vision terdahulu
                 ; 0000 042D #pragma optsize-
                 ; 0000 042E 	CLKPR=0x80;
0001fe e8e0      	LDI  R30,LOW(128)
0001ff bde6      	OUT  0x26,R30
                 ; 0000 042F 	CLKPR=0x00;
000200 e0e0      	LDI  R30,LOW(0)
000201 bde6      	OUT  0x26,R30
                 ; 0000 0430 	#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0431 #pragma optsize+
                 ; 0000 0432 	#endif
                 ; 0000 0433 
                 ; 0000 0434         // set bit register PORTB
                 ; 0000 0435         PORTB=0x00;
000202 bbe8      	OUT  0x18,R30
                 ; 0000 0436 
                 ; 0000 0437         // set bit Data Direction Register PORTB
                 ; 0000 0438 	DDRB=0xF8;
000203 efe8      	LDI  R30,LOW(248)
000204 bbe7      	OUT  0x17,R30
                 ; 0000 0439 
                 ; 0000 043A         // set bit register PORTD
                 ; 0000 043B         PORTD=0x09;
000205 e0e9      	LDI  R30,LOW(9)
000206 bbe2      	OUT  0x12,R30
                 ; 0000 043C 
                 ; 0000 043D         // set bit Data Direction Register PORTD
                 ; 0000 043E 	DDRD=0x30;
000207 e3e0      	LDI  R30,LOW(48)
000208 bbe1      	OUT  0x11,R30
                 ; 0000 043F 
                 ; 0000 0440         // set register Analog Comparator
                 ; 0000 0441         ACSR=0x80;
000209 e8e0      	LDI  R30,LOW(128)
00020a b9e8      	OUT  0x8,R30
                 ; 0000 0442 
                 ; 0000 0443         // set register EXT_IRQ_1 (External Interrupt 1 Request), Low Interrupt
                 ; 0000 0444 	GIMSK=0x80;
00020b bfeb      	OUT  0x3B,R30
                 ; 0000 0445 	MCUCR=0x08;
00020c e0e8      	LDI  R30,LOW(8)
00020d bfe5      	OUT  0x35,R30
                 ; 0000 0446 	EIFR=0x80;
00020e e8e0      	LDI  R30,LOW(128)
00020f bfea      	OUT  0x3A,R30
                 ; 0000 0447 
                 ; 0000 0448         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
                 ; 0000 0449 	TCCR1B=0x05;
000210 e0e5      	LDI  R30,LOW(5)
000211 bdee      	OUT  0x2E,R30
                 ; 0000 044A 
                 ; 0000 044B         // set konstanta waktu 5 detik sebagai awalan
                 ; 0000 044C         timer_detik(INITIAL_TIME_C);
000212 93ea      	ST   -Y,R30
000213 dfd3      	RCALL _timer_detik
                 ; 0000 044D 
                 ; 0000 044E         // set interupsi timer untuk Timer 1
                 ; 0000 044F         TIMSK=0x80;
000214 e8e0      	LDI  R30,LOW(128)
000215 bfe9      	OUT  0x39,R30
                 ; 0000 0450 
                 ; 0000 0451         // enable watchdog dan set nilai register untuk overflow :
                 ; 0000 0452 // preprosesor direktif #pragma's
                 ; 0000 0453 #pragma optsize-
                 ; 0000 0454 
                 ; 0000 0455 	/*=======================================================
                 ; 0000 0456         |                                         		|
                 ; 0000 0457         |	WATCHDOG OVERFLOW'S TIME CONSTANTS             	|
                 ; 0000 0458         |							|
                 ; 0000 0459         |-------------------------------------------------------|
                 ; 0000 045A         |	WDTCR	|	WDTCR	|	OVERFLOW	|
                 ; 0000 045B         |---------------|---------------|-----------------------|
                 ; 0000 045C         |	0x39	|	0x29	|	8 DETIK		|
                 ; 0000 045D         |	0x38	|	0x28	|	4 DETIK		|
                 ; 0000 045E         |	0x1F	|	0x0F	|	2 DETIK		|
                 ; 0000 045F         |	0x1E	|	0x0E	|	1 DETIK		|
                 ; 0000 0460         |-------------------------------------------------------|
                 ; 0000 0461         | Sumber : ATMEL datasheet for ATTINY2313               |
                 ; 0000 0462         ========================================================*/
                 ; 0000 0463 
                 ; 0000 0464         // set konstanta waktu watchdog overflow
                 ; 0000 0465         WDTCR=0x39;
000216 e3e9      	LDI  R30,LOW(57)
000217 bde1      	OUT  0x21,R30
                 ; 0000 0466 	WDTCR=0x29;
000218 e2e9      	LDI  R30,LOW(41)
000219 bde1      	OUT  0x21,R30
                 ; 0000 0467 	#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0468 #pragma optsize+
                 ; 0000 0469 	#endif
                 ; 0000 046A 
                 ; 0000 046B         // indikator awalan hardware aktif :
                 ; 0000 046C         // nyalakan LED busy
                 ; 0000 046D         L_BUSY = 1;
00021a 9a95      	SBI  0x12,5
                 ; 0000 046E 
                 ; 0000 046F         // tunggu 500ms
                 ; 0000 0470         delay_ms(500);
00021b d025      	RCALL SUBOPT_0x4
                 ; 0000 0471 
                 ; 0000 0472         // nyalakan LED standby
                 ; 0000 0473         L_STBY = 1;
00021c 9a94      	SBI  0x12,4
                 ; 0000 0474 
                 ; 0000 0475         // tunggu 500ms
                 ; 0000 0476         delay_ms(500);
00021d d023      	RCALL SUBOPT_0x4
                 ; 0000 0477 
                 ; 0000 0478         // matikan LED busy
                 ; 0000 0479         L_BUSY = 0;
00021e 9895      	CBI  0x12,5
                 ; 0000 047A 
                 ; 0000 047B         // tunggu 500ms
                 ; 0000 047C         delay_ms(500);
00021f d021      	RCALL SUBOPT_0x4
                 ; 0000 047D 
                 ; 0000 047E         // aktifkan interupsi global (berdasar setting register)
                 ; 0000 047F         #asm("sei")
000220 9478      	sei
                 ; 0000 0480 
                 ; 0000 0481         // tidak lakukan apapun selain menunggu interupsi timer1_ovf_isr
                 ; 0000 0482         while (1)
                 _0x70:
                 ; 0000 0483         {
                 ; 0000 0484         	// blok ini kosong
                 ; 0000 0485         };
000221 cfff      	RJMP _0x70
                 ; 0000 0486 
                 ; 0000 0487 }	// END OF MAIN PROGRAM
                 _0x73:
000222 cfff      	RJMP _0x73
                 ;/*
                 ;*
                 ;*	END OF FILE
                 ;*
                 ;****************************************************************************************/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 getchar0:
000223 9b5f           sbis usr,rxc
000224 cffe           rjmp getchar0
000225 b1ec           in   r30,udr
000226 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _data_1:
000000 82
000001 a0
000002 b4
000003 a8        	.DB  LOW(0xA8B4A082),HIGH(0xA8B4A082),BYTE3(0xA8B4A082),BYTE4(0xA8B4A082)
000004 64
000005 66
000006 e0
000007 b2        	.DB  LOW(0xB2E06664),HIGH(0xB2E06664),BYTE3(0xB2E06664),BYTE4(0xB2E06664)
000008 88
000009 64
00000a b0
00000b 82        	.DB  LOW(0x82B06488),HIGH(0x82B06488),BYTE3(0x82B06488),BYTE4(0x82B06488)
00000c 86
00000d 72
00000e ae
00000f 92        	.DB  LOW(0x92AE7286),HIGH(0x92AE7286),BYTE3(0x92AE7286),BYTE4(0x92AE7286)
000010 88
000011 8a
000012 62
000013 40        	.DB  LOW(0x40628A88),HIGH(0x40628A88),BYTE3(0x40628A88),BYTE4(0x40628A88)
000014 62
000015 ae
000016 92
000017 88        	.DB  LOW(0x8892AE62),HIGH(0x8892AE62),BYTE3(0x8892AE62),BYTE4(0x8892AE62)
000018 8a
000019 64
00001a 40
00001b 65        	.DB  LOW(0x6540648A),HIGH(0x6540648A),BYTE3(0x6540648A),BYTE4(0x6540648A)
                 _posisi_lat:
00001c 30
00001d 37
00001e 34
00001f 35        	.DB  LOW(0x35343730),HIGH(0x35343730),BYTE3(0x35343730),BYTE4(0x35343730)
000020 2e
000021 33
000022 31
000023 53        	.DB  LOW(0x5331332E),HIGH(0x5331332E),BYTE3(0x5331332E),BYTE4(0x5331332E)
                 _posisi_long:
000024 31
000025 31
000026 30
000027 32        	.DB  LOW(0x32303131),HIGH(0x32303131),BYTE3(0x32303131),BYTE4(0x32303131)
000028 32
000029 2e
00002a 35
00002b 32        	.DB  LOW(0x32352E32),HIGH(0x32352E32),BYTE3(0x32352E32),BYTE4(0x32352E32)
00002c 45        	.DB  0x45
                 _data_extension:
00002d 50
00002e 48
00002f 47
000030 32        	.DB  LOW(0x32474850),HIGH(0x32474850),BYTE3(0x32474850),BYTE4(0x32474850)
000031 30 30     	.DW  0x3030
000033 30        	.DB  0x30
                 _komentar:
000034 4c
000035 61
000036 62
000037 2e        	.DB  LOW(0x2E62614C),HIGH(0x2E62614C),BYTE3(0x2E62614C),BYTE4(0x2E62614C)
000038 53
000039 53
00003a 54
00003b 4b        	.DB  LOW(0x4B545353),HIGH(0x4B545353),BYTE3(0x4B545353),BYTE4(0x4B545353)
00003c 20
00003d 54
00003e 69
00003f 6d        	.DB  LOW(0x6D695420),HIGH(0x6D695420),BYTE3(0x6D695420),BYTE4(0x6D695420)
000040 2d 31     	.DW  0x312D
                 _status:
000042 41
000043 54
000044 74
000045 69        	.DB  LOW(0x69745441),HIGH(0x69745441),BYTE3(0x69745441),BYTE4(0x69745441)
000046 6e
000047 79
000048 32
000049 33        	.DB  LOW(0x3332796E),HIGH(0x3332796E),BYTE3(0x3332796E),BYTE4(0x3332796E)
00004a 31
00004b 33
00004c 20
00004d 41        	.DB  LOW(0x41203331),HIGH(0x41203331),BYTE3(0x41203331),BYTE4(0x41203331)
00004e 50
00004f 52
000050 53
000051 20        	.DB  LOW(0x20535250),HIGH(0x20535250),BYTE3(0x20535250),BYTE4(0x20535250)
000052 74
000053 72
000054 61
000055 63        	.DB  LOW(0x63617274),HIGH(0x63617274),BYTE3(0x63617274),BYTE4(0x63617274)
000056 6b
000057 65
000058 72
000059 20        	.DB  LOW(0x2072656B),HIGH(0x2072656B),BYTE3(0x2072656B),BYTE4(0x2072656B)
00005a 68
00005b 61
00005c 6e
00005d 64        	.DB  LOW(0x646E6168),HIGH(0x646E6168),BYTE3(0x646E6168),BYTE4(0x646E6168)
00005e 69
00005f 6b
000060 6f
000061 67        	.DB  LOW(0x676F6B69),HIGH(0x676F6B69),BYTE3(0x676F6B69),BYTE4(0x676F6B69)
000062 65
000063 73
000064 61
000065 6e        	.DB  LOW(0x6E617365),HIGH(0x6E617365),BYTE3(0x6E617365),BYTE4(0x6E617365)
000066 67
000067 40
000068 67
000069 6d        	.DB  LOW(0x6D674067),HIGH(0x6D674067),BYTE3(0x6D674067),BYTE4(0x6D674067)
00006a 61
00006b 69
00006c 6c
00006d 2e        	.DB  LOW(0x2E6C6961),HIGH(0x2E6C6961),BYTE3(0x2E6C6961),BYTE4(0x2E6C6961)
00006e 63 6f     	.DW  0x6F63
000070 6d        	.DB  0x6D
                 _beacon_stat:
000071 00        	.DB  0x0
                 _xcount:
000072 00        	.DB  0x0
                 
                 	.DSEG
                 _bit_stuff_G000:
000080           	.BYTE 0x1
                 _crc_lo_S0000003000:
000081           	.BYTE 0x1
                 _crc_hi_S0000003000:
000082           	.BYTE 0x1
                 _xor_in_S0000005000:
000083           	.BYTE 0x2
                 _buff_posisi_S000000A000:
000085           	.BYTE 0x11
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
000227 920a      	ST   -Y,R0
000228 921a      	ST   -Y,R1
000229 92fa      	ST   -Y,R15
00022a 936a      	ST   -Y,R22
00022b 937a      	ST   -Y,R23
00022c 938a      	ST   -Y,R24
00022d 939a      	ST   -Y,R25
00022e 93aa      	ST   -Y,R26
00022f 93ba      	ST   -Y,R27
000230 93ea      	ST   -Y,R30
000231 93fa      	ST   -Y,R31
000232 b7ef      	IN   R30,SREG
000233 93ea      	ST   -Y,R30
000234 9894      	CBI  0x12,4
000235 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x1:
000236 93fa      	ST   -Y,R31
000237 93ea      	ST   -Y,R30
000238 c025      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x2:
000239 e7a2      	LDI  R26,LOW(_xcount)
00023a e0b0      	LDI  R27,HIGH(_xcount)
00023b d058      	RCALL __EEPROMRDB
00023c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x3:
00023d e7a1      	LDI  R26,LOW(_beacon_stat)
00023e e0b0      	LDI  R27,HIGH(_beacon_stat)
00023f d054      	RCALL __EEPROMRDB
000240 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x4:
000241 efe4      	LDI  R30,LOW(500)
000242 e0f1      	LDI  R31,HIGH(500)
000243 cff2      	RJMP SUBOPT_0x1
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 16 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x5:
000244 93ea      	ST   -Y,R30
000245 cea6      	RJMP _kirim_karakter
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x6:
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 0080 	STS  _bit_stuff_G000,R30
000249 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x7:
00024a 2fa1      	MOV  R26,R17
00024b e0b0      	LDI  R27,0
00024c 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x8:
00024d d046      	RCALL __EEPROMRDB
00024e cff5      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x9:
00024f e0f0      	LDI  R31,0
000250 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:10 WORDS
                 SUBOPT_0xA:
000251 2fe1      	MOV  R30,R17
000252 dffc      	RCALL SUBOPT_0x9
000253 5dea      	SUBI R30,LOW(-_matrix*2)
000254 4fff      	SBCI R31,HIGH(-_matrix*2)
000255 91e4      	LPM  R30,Z
000256 93ea      	ST   -Y,R30
000257 cedd      	RJMP _set_dac
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
                +
000258 e000     +LDI R16 , LOW ( 0 )
000259 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
00025a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xC:
                +
00025b 5f0f     +SUBI R16 , LOW ( - 1 )
00025c 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00025d 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
00025e 91e9      	ld   r30,y+
00025f 91f9      	ld   r31,y+
000260 9630      	adiw r30,0
000261 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000262 ec8d     +LDI R24 , LOW ( 0xACD )
000263 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000264 9701     +SBIW R24 , 1
000265 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000266 95a8      	wdr
000267 9731      	sbiw r30,1
000268 f7c9      	brne __delay_ms0
                 __delay_ms1:
000269 9508      	ret
                 
                 __SUBD12:
00026a 1bea      	SUB  R30,R26
00026b 0bfb      	SBC  R31,R27
00026c 0b68      	SBC  R22,R24
00026d 0b79      	SBC  R23,R25
00026e 9508      	RET
                 
                 __LSRB12:
00026f 23ee      	TST  R30
000270 2e0e      	MOV  R0,R30
000271 2fea      	MOV  R30,R26
000272 f019      	BREQ __LSRB12R
                 __LSRB12L:
000273 95e6      	LSR  R30
000274 940a      	DEC  R0
000275 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000276 9508      	RET
                 
                 __MULW12U:
000277 2e0a      	MOV  R0,R26
000278 2e1b      	MOV  R1,R27
000279 e181      	LDI  R24,17
00027a 27aa      	CLR  R26
00027b 1bbb      	SUB  R27,R27
00027c c005      	RJMP __MULW12U1
                 __MULW12U3:
00027d f410      	BRCC __MULW12U2
00027e 0da0      	ADD  R26,R0
00027f 1db1      	ADC  R27,R1
                 __MULW12U2:
000280 95b6      	LSR  R27
000281 95a7      	ROR  R26
                 __MULW12U1:
000282 95f7      	ROR  R31
000283 95e7      	ROR  R30
000284 958a      	DEC  R24
000285 f7b9      	BRNE __MULW12U3
000286 9508      	RET
                 
                 __SWAPD12:
000287 2e18      	MOV  R1,R24
000288 2f86      	MOV  R24,R22
000289 2d61      	MOV  R22,R1
00028a 2e19      	MOV  R1,R25
00028b 2f97      	MOV  R25,R23
00028c 2d71      	MOV  R23,R1
                 
                 __SWAPW12:
00028d 2e1b      	MOV  R1,R27
00028e 2fbf      	MOV  R27,R31
00028f 2df1      	MOV  R31,R1
                 
                 __SWAPB12:
000290 2e1a      	MOV  R1,R26
000291 2fae      	MOV  R26,R30
000292 2de1      	MOV  R30,R1
000293 9508      	RET
                 
                 __EEPROMRDB:
000294 99e1      	SBIC EECR,EEWE
000295 cffe      	RJMP __EEPROMRDB
000296 93ff      	PUSH R31
000297 b7ff      	IN   R31,SREG
000298 94f8      	CLI
000299 bbae      	OUT  EEARL,R26
00029a 9ae0      	SBI  EECR,EERE
00029b b3ed      	IN   R30,EEDR
00029c bfff      	OUT  SREG,R31
00029d 91ff      	POP  R31
00029e 9508      	RET
                 
                 __EEPROMWRB:
00029f 9be1      	SBIS EECR,EEWE
0002a0 c002      	RJMP __EEPROMWRB1
0002a1 95a8      	WDR
0002a2 cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0002a3 b79f      	IN   R25,SREG
0002a4 94f8      	CLI
0002a5 bbae      	OUT  EEARL,R26
0002a6 9ae0      	SBI  EECR,EERE
0002a7 b38d      	IN   R24,EEDR
0002a8 17e8      	CP   R30,R24
0002a9 f019      	BREQ __EEPROMWRB0
0002aa bbed      	OUT  EEDR,R30
0002ab 9ae2      	SBI  EECR,EEMWE
0002ac 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0002ad bf9f      	OUT  SREG,R25
0002ae 9508      	RET
                 
                 __SAVELOCR2:
0002af 931a      	ST   -Y,R17
0002b0 930a      	ST   -Y,R16
0002b1 9508      	RET
                 
                 __LOADLOCR2:
0002b2 8119      	LDD  R17,Y+1
0002b3 8108      	LD   R16,Y
0002b4 9508      	RET
                 
                 __LOADLOCR2P:
0002b5 9109      	LD   R16,Y+
0002b6 9119      	LD   R17,Y+
0002b7 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :   8 r1 :  12 r2 :   5 r3 :   4 r4 :   0 r5 :   0 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  17 r17:  55 r18:   0 r19:   0 r20:   0 r21:   0 r22:   6 r23:   6 
r24:  22 r25:   9 r26:  43 r27:  24 r28:   5 r29:   0 r30: 189 r31:  27 
x  :   5 y  :  55 z  :   2 
Registers used: 19 out of 35 (54.3%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   1 add   :   2 
adiw  :   5 and   :   0 andi  :   8 asr   :   0 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   1 brcs  :   0 break :   0 breq  :   7 
brge  :   4 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  23 brpl  :   0 brsh  :  12 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :   9 
cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :   4 
cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   4 cpi   :  28 cpse  :   0 dec   :   7 des   :   0 eor   :   6 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   0 ld    :  25 ldd   :   6 ldi   :  96 lds   :   5 lpm   :   2 
lsl   :   0 lsr   :   9 mov   :  25 movw  :   6 mul   :   0 muls  :   0 
mulsu :   0 neg   :   0 nop   :   0 or    :   0 ori   :   0 out   :  40 
pop   :   4 push  :   4 rcall :  98 ret   :  29 reti  :   1 rjmp  :  66 
rol   :   0 ror   :   4 sbc   :   3 sbci  :  10 sbi   :  15 sbic  :   4 
sbis  :   2 sbiw  :   2 sbr   :   0 sbrc  :   1 sbrs  :   1 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   0 ses   :   0 set   :   0 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  30 std   :   0 
sts   :   8 sub   :   2 subi  :  30 swap  :   0 tst   :   1 wdr   :   2 

Instructions used: 52 out of 114 (45.6%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000570   1358     34   1392    2048  68.0%
[.dseg] 0x000060 0x000096      0     22     22     223   9.9%
[.eseg] 0x000000 0x000073      0    115    115     128  89.8%

Assembly complete, 0 errors, 1 warnings
