;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/11/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 12.000000 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;#define DATA_OUT PORTD.1
;
;bit b1 = 0;
;bit b2 = 0;
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0020 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0021 	// Reinitialize Timer1 value
; 0000 0022 	TCNT1H=0xF6;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0023 	TCNT1L=0x3C;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0024 	// Place your code here
; 0000 0025 
; 0000 0026         DATA_OUT=(b2^ACO);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0027         b2=b1;
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0028         b1=ACO;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0029 }
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 002E {
;PCODE: $0000002B VOL: 0
; 0000 002F 	// Declare your local variables here
; 0000 0030 
; 0000 0031 	// Crystal Oscillator division factor: 1
; 0000 0032 #pragma optsize-
; 0000 0033 	CLKPR=0x80;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0034 	CLKPR=0x00;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 0035 	#ifdef _OPTIMIZE_SIZE_
; 0000 0036 #pragma optsize+
; 0000 0037 	#endif
; 0000 0038 
; 0000 0039 	// Input/Output Ports initialization
; 0000 003A 	// Port A initialization
; 0000 003B 	// Func2=In Func1=In Func0=In
; 0000 003C 	// State2=T State1=T State0=T
; 0000 003D 	PORTA=0x00;
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 003E 	DDRA=0x00;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 003F 
; 0000 0040 	// Port B initialization
; 0000 0041 	// Func7=Out Func6=Out Func5=Out Func4=Out Func3=In Func2=In Func1=In Func0=In
; 0000 0042 	// State7=0 State6=0 State5=0 State4=0 State3=T State2=T State1=T State0=T
; 0000 0043 	PORTB=0x00;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0044 	DDRB=0xF0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0045 
; 0000 0046 	// Port D initialization
; 0000 0047 	// Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 0048 	// State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 0049 	PORTD=0x03;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 004A 	DDRD=0x02;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004B 
; 0000 004C 	// Timer/Counter 0 initialization
; 0000 004D 	// Clock source: System Clock
; 0000 004E 	// Clock value: Timer 0 Stopped
; 0000 004F 	// Mode: Normal top=0xFF
; 0000 0050 	// OC0A output: Disconnected
; 0000 0051 	// OC0B output: Disconnected
; 0000 0052 	TCCR0A=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0053 	TCCR0B=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0054 	TCNT0=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0055 
; 0000 0056 	// Timer/Counter 1 initialization
; 0000 0057 	// Clock source: System Clock
; 0000 0058 	// Clock value: 12000.000 kHz
; 0000 0059 	// Mode: Normal top=0xFFFF
; 0000 005A 	// OC1A output: Discon.
; 0000 005B 	// OC1B output: Discon.
; 0000 005C 	// Noise Canceler: Off
; 0000 005D 	// Input Capture on Falling Edge
; 0000 005E 	// Timer1 Overflow Interrupt: On
; 0000 005F 	// Input Capture Interrupt: Off
; 0000 0060 	// Compare A Match Interrupt: Off
; 0000 0061 	// Compare B Match Interrupt: Off
; 0000 0062 	TCCR1A=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0063 	TCCR1B=0x01;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0064 	TCNT1H=0xF6;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0065 	TCNT1L=0x3C;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0066 
; 0000 0067 	// External Interrupt(s) initialization
; 0000 0068 	// INT0: Off
; 0000 0069 	// INT1: Off
; 0000 006A 	// Interrupt on any change on pins PCINT0-7: Off
; 0000 006B 	GIMSK=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 006C 	MCUCR=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 006D 
; 0000 006E 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 006F 	TIMSK=0x80;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0070 
; 0000 0071 	// USART initialization
; 0000 0072 	// USART disabled
; 0000 0073 	UCSRB=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0074 
; 0000 0075 	// Analog Comparator initialization
; 0000 0076 	// Analog Comparator: On
; 0000 0077 	// Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0078 	ACSR=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0079 	// Digital input buffer on AIN0: On
; 0000 007A 	// Digital input buffer on AIN1: On
; 0000 007B 	//DIDR=0x03;
; 0000 007C         DIDR=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007D 
; 0000 007E 	// Global enable interrupts
; 0000 007F 	#asm("sei")
;PCODE: $00000056 VOL: 0
	sei
;PCODE: $00000057 VOL: 0
; 0000 0080 
; 0000 0081 	while (1)
;PCODE: $00000058 VOL: 0
; 0000 0082       	{
; 0000 0083       		// Place your code here
; 0000 0084 
; 0000 0085       	}
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0086 }
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
