;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 8/14/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;// Declare your global variables here
;#include <math.h>
;#include <stdio.h>
;#include <delay.h>
;
;#define DAT     PORTD.0
;#define CLK     PORTD.1
;#define FUD     PORTD.2
;#define RST     PORTD.3
;
;#define IN_MHZ  PIND.4
;#define IN_10K  PIND.5
;#define IN_100  PIND.6
;
;#define LOW     0
;#define HIGH    1
;
;eeprom unsigned long in_freq = 10000000;
;unsigned long clk_freq = 125000000;

	.DSEG
;
;void dds_reset(void)
; 0000 0031 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0032         CLK = LOW;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0033         FUD = LOW;
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 0034 
; 0000 0035         RST = LOW;      delay_us(5);
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0036         RST = HIGH;     delay_us(5);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0037         RST = LOW;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0038 
; 0000 0039         CLK = LOW;      delay_us(5);
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A         CLK = HIGH;     delay_us(5);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
; 0000 003B         CLK = LOW;
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003C 
; 0000 003D         DAT = LOW;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 003E 
; 0000 003F         FUD = LOW;      delay_us(5);
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 0040         FUD = HIGH;     delay_us(5);
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0041         FUD = LOW;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0042 }
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;
;void send_data(void)
; 0000 0045 {
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 0046         unsigned long data_word = (in_freq * pow(2,32)) / clk_freq;
; 0000 0047         int i;
; 0000 0048 
; 0000 0049         FUD = HIGH;     delay_us(5);
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;	data_word -> Y+2
;	i -> R16,R17
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004A         FUD = LOW;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 004B 
; 0000 004C         for(i=0; i<40; i++)
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 004D         {
; 0000 004E                 DAT = (data_word & 0x01);       delay_us(5);
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 004F 
; 0000 0050                 if(i == 39) goto finish;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0051                 data_word = data_word >> 1;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0052 
; 0000 0053                 finish:
;PCODE: $00000062 VOL: 0
; 0000 0054                 CLK = HIGH;     delay_us(5);
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0055                 CLK = LOW;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0056         }
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0057 
; 0000 0058         FUD = HIGH;     delay_us(5);
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0059         FUD = LOW;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 005A }
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;
;void io_init(void)
; 0000 005D {
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 005E         // Port A initialization
; 0000 005F         // Func2=In Func1=In Func0=In
; 0000 0060         // State2=P State1=P State0=P
; 0000 0061         PORTA=0x07;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0062         DDRA=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 0063 
; 0000 0064         // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0065         // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0066         PORTB=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 0067         DDRB=0xFF;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0068 
; 0000 0069         // Func6=In Func5=In Func4=In Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 006A         // State6=P State5=P State4=P State3=0 State2=0 State1=0 State0=0
; 0000 006B         PORTD=0x70;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 006C         DDRD=0x0F;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 006D }
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;
;void main(void)
; 0000 0070 {
;PCODE: $00000086 VOL: 0
; 0000 0071 #pragma optsize-
; 0000 0072         CLKPR=0x80;
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 0073         CLKPR=0x00;
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 0074         #ifdef _OPTIMIZE_SIZE_
; 0000 0075 #pragma optsize+
; 0000 0076         #endif
; 0000 0077 
; 0000 0078         ACSR=0x80;
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
; 0000 0079         DIDR=0x00;
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 007A 
; 0000 007B         // Alphanumeric LCD initialization
; 0000 007C         // Connections specified in the
; 0000 007D         // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 007E         // RS - PORTB Bit 0
; 0000 007F         // RD - PORTB Bit 1
; 0000 0080         // EN - PORTB Bit 2
; 0000 0081         // D4 - PORTB Bit 4
; 0000 0082         // D5 - PORTB Bit 5
; 0000 0083         // D6 - PORTB Bit 6
; 0000 0084         // D7 - PORTB Bit 7
; 0000 0085         // Characters/line: 16
; 0000 0086         lcd_init(16);
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0087 
; 0000 0088         dds_reset();
;PCODE: $00000092 VOL: 0
; 0000 0089         send_data();
;PCODE: $00000093 VOL: 0
; 0000 008A 
; 0000 008B         while (1)
;PCODE: $00000094 VOL: 0
; 0000 008C         {
; 0000 008D 
; 0000 008E         }
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
; 0000 008F }
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
