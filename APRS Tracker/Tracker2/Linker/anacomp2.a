;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/22/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <delay.h>
;
;#define DAC_0   PORTB.7	//LSB
;#define DAC_1   PORTB.6
;#define DAC_2   PORTB.5
;#define DAC_3   PORTB.4	//MSB
;
;#define DATA_OUT	PORTD.5
;#define CARIER_DET	PORTD.3
;#define LED_1200	PORTD.4
;#define LED_2200	PORTD.2
;
;#define CONST_1200      46
;#define CONST_2200      22
;
;#define _1200	0
;#define _2200	1
;
;#define _TCNT0	((unsigned char)(1+0xFF)-(0.0001*1382400))
;
;bit data = 0;
;bit d_data = 0;
;bit tone;
;char t = 0;
;char v_2200 = 0;
;eeprom char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
;char int_anacomp = 0;
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 0036 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0037 	// Place your code here
; 0000 0038         TCNT0 = _TCNT0;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0039         t++;
;PCODE: $0000000E VOL: 0
; 0000 003A         if(t > 8)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003B         {
; 0000 003C         	t = 0;
;PCODE: $00000012 VOL: 0
; 0000 003D                 tone = 0;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 003E                 PORTD.2 = 0;
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 003F                 PORTD.4 = 0;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0040         }
; 0000 0041         if(LED_1200 ^ LED_2200)
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0042         {
; 0000 0043         	if((t < 3)||(t > 5))
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0044                 {
; 0000 0045                 	CARIER_DET = 1;
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0046                 }
; 0000 0047                 else
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
; 0000 0048                 {
; 0000 0049                 	CARIER_DET = 0;
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
; 0000 004A                 }
;PCODE: $0000002E VOL: 0
; 0000 004B         }
; 0000 004C }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;// Analog Comparator interrupt service routine
;interrupt [ANA_COMP] void ana_comp_isr(void)
; 0000 0050 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0051 	// Place your code here
; 0000 0052 	int_anacomp++;
;PCODE: $00000035 VOL: 0
; 0000 0053         if(int_anacomp == 2)
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0054         {
; 0000 0055         	int_anacomp = 0;
;PCODE: $00000039 VOL: 0
; 0000 0056                 tone = 1;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0057                 if((t>2)&&(t<6))
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0058         	{
; 0000 0059         		v_2200++;
;PCODE: $00000046 VOL: 0
; 0000 005A                 	if(v_2200 == 2)
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005B                 	{
; 0000 005C                 		v_2200 = 0;
;PCODE: $0000004A VOL: 0
; 0000 005D                         	LED_2200 = 1;
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005E                 		LED_1200 = 0;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 005F                         	d_data = data;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
; 0000 0060                         	data = _2200;
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0061                 	}
; 0000 0062         	}
;PCODE: $0000005B VOL: 0
; 0000 0063         	else if((t>6)&&(t<10))
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0064         	{
; 0000 0065         		v_2200 = 0;
;PCODE: $00000068 VOL: 0
; 0000 0066                 	LED_2200 = 0;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0067                 	LED_1200 = 1;
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 0068                 	d_data = data;
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
; 0000 0069                 	data = _1200;
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 006A         	}
; 0000 006B         	t = 0;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 006C                 DATA_OUT = !(data ^ d_data);
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 006D         }
; 0000 006E }
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;
;void set_dac(char value)
; 0000 0071 {
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0072 	DAC_0 = value & 0x01; 		//LSB
;	value -> Y+0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
; 0000 0073         DAC_1 =( value >> 1 ) & 0x01;
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0074         DAC_2 =( value >> 2 ) & 0x01;
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0075         DAC_3 =( value >> 3 ) & 0x01; 	//MSB
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
; 0000 0076 }
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;
;void set_nada(void)
; 0000 0079 {
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 007A 	char i;
; 0000 007B         if(tone)
;PCODE: $000000C2 VOL: 0
;	i -> R17
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 007C         {
; 0000 007D         	if(DATA_OUT)
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
; 0000 007E     		{
; 0000 007F         		for(i=0; i<16; i++)
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 0080         		{
; 0000 0081                 		set_dac(matrix[i]);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 0082                         	delay_us(CONST_1200);
;PCODE: $000000D8 VOL: 0
; 0000 0083         		}
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0084     		}
; 0000 0085        		else
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 0086     		{
; 0000 0087         		for(i=0; i<16; i++)
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0088         		{
; 0000 0089                 		set_dac(matrix[i]);
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 008A                         	delay_us(CONST_2200);
;PCODE: $000000EF VOL: 0
; 0000 008B                 	}
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
; 0000 008C                 	for(i=0; i<13; i++)
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 008D                 	{
; 0000 008E                 		set_dac(matrix[i]);
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
; 0000 008F                         	delay_us(CONST_2200);
;PCODE: $00000104 VOL: 0
; 0000 0090                 	}
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
; 0000 0091     		}
;PCODE: $0000010A VOL: 0
; 0000 0092         }
; 0000 0093 }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0098 {
;PCODE: $0000010F VOL: 0
; 0000 0099 // Declare your local variables here
; 0000 009A 
; 0000 009B // Crystal Oscillator division factor: 1
; 0000 009C #pragma optsize-
; 0000 009D CLKPR=0x80;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 009E CLKPR=0x00;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 009F #ifdef _OPTIMIZE_SIZE_
; 0000 00A0 #pragma optsize+
; 0000 00A1 #endif
; 0000 00A2 
; 0000 00A3 // Port B initialization
; 0000 00A4 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 00A5 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
; 0000 00A6 PORTB=0x00;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 00A7 DDRB=0xFC;
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 00A8 
; 0000 00A9 // Port D initialization
; 0000 00AA // Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=In Func0=In
; 0000 00AB // State6=0 State5=0 State4=0 State3=0 State2=0 State1=T State0=T
; 0000 00AC PORTD=0x00;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 00AD DDRD=0x7C;
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AE 
; 0000 00AF CARIER_DET = 1;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
; 0000 00B0 
; 0000 00B1 // Timer/Counter 0 initialization
; 0000 00B2 // Clock source: System Clock
; 0000 00B3 // Clock value: 1382.400 kHz
; 0000 00B4 // Mode: Normal top=0xFF
; 0000 00B5 // OC0A output: Disconnected
; 0000 00B6 // OC0B output: Disconnected
; 0000 00B7 TCCR0A=0x00;
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 00B8 TCCR0B=0x02;
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
; 0000 00B9 TCNT0 = _TCNT0;
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 00BA 
; 0000 00BB // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00BC TIMSK=0x02;
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00BD 
; 0000 00BE // Analog Comparator initialization
; 0000 00BF // Analog Comparator: On
; 0000 00C0 // Interrupt on Output Toggle
; 0000 00C1 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00C2 ACSR=0x08;
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00C3 // Digital input buffer on AIN0: On
; 0000 00C4 // Digital input buffer on AIN1: On
; 0000 00C5 DIDR=0x03;
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00C6 
; 0000 00C7 PORTD.2 = 0;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 00C8 PORTD.4 = 1;
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 00C9 PORTD.5 = 0;
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
; 0000 00CA delay_ms(200);
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 00CB PORTD.2 = 0;
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00CC PORTD.4 = 0;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 00CD PORTD.5 = 1;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 00CE delay_ms(200);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 00CF PORTD.2 = 1;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00D0 PORTD.4 = 0;
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 00D1 PORTD.5 = 0;
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
; 0000 00D2 delay_ms(200);
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 00D3 PORTD.2 = 0;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 00D4 PORTD.4 = 1;
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
; 0000 00D5 PORTD.5 = 0;
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 00D6 delay_ms(200);
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
; 0000 00D7 
; 0000 00D8 // Global enable interrupts
; 0000 00D9 #asm("sei")
;PCODE: $0000014E VOL: 0
	sei
;PCODE: $0000014F VOL: 0
; 0000 00DA 
; 0000 00DB while (1)
;PCODE: $00000150 VOL: 0
; 0000 00DC       	{
; 0000 00DD       		// Place your code here
; 0000 00DE                 //set_nada();
; 0000 00DF       	}
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 00E0 }
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
