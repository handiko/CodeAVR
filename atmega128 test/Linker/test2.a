;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/28/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// External Interrupt 0 service routine
;interrupt [EXT_INT0] void ext_int0_isr(void)
; 0000 001E {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 001F // Place your code here
; 0000 0020     PORTD.7 = 1;
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0021     delay_ms(3000);
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0022     PORTD.7 = 0;
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0023 
; 0000 0024 }
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;
;// External Interrupt 1 service routine
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0028 {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0029 // Place your code here
; 0000 002A     PORTD.7 = 1;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002B     delay_ms(3000);
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002C     PORTD.7 = 0;
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
; 0000 002D 
; 0000 002E }
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0034 {
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0035 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0036 // Delay needed for the stabilization of the ADC input voltage
; 0000 0037 delay_us(10);
;PCODE: $0000002A VOL: 0
; 0000 0038 // Start the AD conversion
; 0000 0039 ADCSRA|=0x40;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 003A // Wait for the AD conversion to complete
; 0000 003B while ((ADCSRA & 0x10)==0);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 003C ADCSRA|=0x10;
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 003D return ADCW;
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 003E }
;PCODE: $00000038 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 0043 {
;PCODE: $00000039 VOL: 0
; 0000 0044 // Declare your local variables here
; 0000 0045 
; 0000 0046 // Input/Output Ports initialization
; 0000 0047 // Port A initialization
; 0000 0048 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0049 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 004A PORTA=0x00;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 004B DDRA=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 004C 
; 0000 004D // Port B initialization
; 0000 004E // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 004F // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0050 PORTB=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0051 DDRB=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0052 
; 0000 0053 // Port C initialization
; 0000 0054 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0055 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0056 PORTC=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0057 DDRC=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0058 
; 0000 0059 // Port D initialization
; 0000 005A // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 005B // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 005C PORTD=0b00000011;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 005D DDRD=0xFF;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 005E 
; 0000 005F // Port E initialization
; 0000 0060 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0061 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0062 PORTE=0x00;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0063 DDRE=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 0064 
; 0000 0065 // Port F initialization
; 0000 0066 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0067 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0068 PORTF=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0069 DDRF=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 006A 
; 0000 006B // Port G initialization
; 0000 006C // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 006D // State4=T State3=T State2=T State1=T State0=T
; 0000 006E PORTG=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006F DDRG=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0070 
; 0000 0071 // Timer/Counter 0 initialization
; 0000 0072 // Clock source: System Clock
; 0000 0073 // Clock value: Timer 0 Stopped
; 0000 0074 // Mode: Normal top=0xFF
; 0000 0075 // OC0 output: Disconnected
; 0000 0076 ASSR=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0077 TCCR0=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0078 TCNT0=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0079 OCR0=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 007A 
; 0000 007B // Timer/Counter 1 initialization
; 0000 007C // Clock source: System Clock
; 0000 007D // Clock value: Timer1 Stopped
; 0000 007E // Mode: Normal top=0xFFFF
; 0000 007F // OC1A output: Discon.
; 0000 0080 // OC1B output: Discon.
; 0000 0081 // OC1C output: Discon.
; 0000 0082 // Noise Canceler: Off
; 0000 0083 // Input Capture on Falling Edge
; 0000 0084 // Timer1 Overflow Interrupt: Off
; 0000 0085 // Input Capture Interrupt: Off
; 0000 0086 // Compare A Match Interrupt: Off
; 0000 0087 // Compare B Match Interrupt: Off
; 0000 0088 // Compare C Match Interrupt: Off
; 0000 0089 TCCR1A=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 008A TCCR1B=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 008B TCNT1H=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 008C TCNT1L=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 008D ICR1H=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 008E ICR1L=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 008F OCR1AH=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0090 OCR1AL=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0091 OCR1BH=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0092 OCR1BL=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0093 OCR1CH=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0094 OCR1CL=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 0095 
; 0000 0096 // Timer/Counter 2 initialization
; 0000 0097 // Clock source: System Clock
; 0000 0098 // Clock value: Timer2 Stopped
; 0000 0099 // Mode: Normal top=0xFF
; 0000 009A // OC2 output: Disconnected
; 0000 009B TCCR2=0x00;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 009C TCNT2=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 009D OCR2=0x00;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009E 
; 0000 009F // Timer/Counter 3 initialization
; 0000 00A0 // Clock source: System Clock
; 0000 00A1 // Clock value: Timer3 Stopped
; 0000 00A2 // Mode: Normal top=0xFFFF
; 0000 00A3 // OC3A output: Discon.
; 0000 00A4 // OC3B output: Discon.
; 0000 00A5 // OC3C output: Discon.
; 0000 00A6 // Noise Canceler: Off
; 0000 00A7 // Input Capture on Falling Edge
; 0000 00A8 // Timer3 Overflow Interrupt: Off
; 0000 00A9 // Input Capture Interrupt: Off
; 0000 00AA // Compare A Match Interrupt: Off
; 0000 00AB // Compare B Match Interrupt: Off
; 0000 00AC // Compare C Match Interrupt: Off
; 0000 00AD TCCR3A=0x00;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00AE TCCR3B=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00AF TCNT3H=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00B0 TCNT3L=0x00;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00B1 ICR3H=0x00;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 00B2 ICR3L=0x00;
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00B3 OCR3AH=0x00;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B4 OCR3AL=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00B5 OCR3BH=0x00;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 00B6 OCR3BL=0x00;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00B7 OCR3CH=0x00;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00B8 OCR3CL=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00B9 
; 0000 00BA // External Interrupt(s) initialization
; 0000 00BB // INT0: On
; 0000 00BC // INT0 Mode: Low level
; 0000 00BD // INT1: On
; 0000 00BE // INT1 Mode: Low level
; 0000 00BF // INT2: Off
; 0000 00C0 // INT3: Off
; 0000 00C1 // INT4: Off
; 0000 00C2 // INT5: Off
; 0000 00C3 // INT6: Off
; 0000 00C4 // INT7: Off
; 0000 00C5 EICRA=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00C6 EICRB=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C7 EIMSK=0x03;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00C8 EIFR=0x03;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00C9 
; 0000 00CA // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00CB TIMSK=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00CC 
; 0000 00CD ETIMSK=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00CE 
; 0000 00CF // USART0 initialization
; 0000 00D0 // USART0 disabled
; 0000 00D1 UCSR0B=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00D2 
; 0000 00D3 // USART1 initialization
; 0000 00D4 // USART1 disabled
; 0000 00D5 UCSR1B=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D6 
; 0000 00D7 // Analog Comparator initialization
; 0000 00D8 // Analog Comparator: Off
; 0000 00D9 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00DA ACSR=0x80;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00DB SFIOR=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00DC 
; 0000 00DD // ADC initialization
; 0000 00DE // ADC Clock frequency: 691.200 kHz
; 0000 00DF // ADC Voltage Reference: AREF pin
; 0000 00E0 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00E1 ADCSRA=0x84;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00E2 
; 0000 00E3 // SPI initialization
; 0000 00E4 // SPI disabled
; 0000 00E5 SPCR=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00E6 
; 0000 00E7 // TWI initialization
; 0000 00E8 // TWI disabled
; 0000 00E9 TWCR=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00EA 
; 0000 00EB // Global enable interrupts
; 0000 00EC #asm("sei")
;PCODE: $000000B0 VOL: 0
	sei
;PCODE: $000000B1 VOL: 0
; 0000 00ED while(1)
;PCODE: $000000B2 VOL: 0
; 0000 00EE {
; 0000 00EF };
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00F0 }
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
