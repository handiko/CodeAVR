;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 5/24/2014
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdio.h>
;#include <stdint.h>
;#include <delay.h>
;#include <math.h>
;#include <stdlib.h>
;
;#define ADC_VREF_TYPE 0x00
;#define AFOUT	PORTB.4
;#define PTT	PORTB.5
;#define MERAH	PORTD.6
;#define HIJAU	PORTD.7
;#define VSENSE_ADC_	0
;#define TEMP_ADC_	1
;
;#define _1200		0
;#define _2200		1
;#define TX_DELAY_ 	45
;#define FLAG_		0x7E
;#define	CONTROL_FIELD_	0x03
;#define PROTOCOL_ID_	0xF0
;#define TD_POSISI_ 	'='
;#define TD_STATUS_	'>'
;#define TX_TAIL_	5
;
;void read_temp(void);
;void read_volt(void);
;void base91_lat(void);
;void base91_long(void);
;void base91_alt(void);
;void kirim_add_aprs(void);
;void kirim_ax25_head(void);
;void kirim_status(void);
;void kirim_paket(void);
;void kirim_crc(void);
;void kirim_karakter(unsigned char input);
;void hitung_crc(char in_crc);
;void ubah_nada(void);
;void set_nada(char i_nada);
;unsigned int read_adc(unsigned char adc_input);
;void waitComma(void);
;void waitDollar(void);
;void waitInvCo(void);
;void config(void);
;void extractGPS(void);
;
;eeprom char SYM_TAB_OVL_='/';
;eeprom char SYM_CODE_='O';
;eeprom unsigned char add_aprs[7]={('A'<<1),('P'<<1),('R'<<1),('S'<<1),(' '<<1),(' '<<1),('0'<<1)};
;eeprom unsigned char add_beacon[7]={('B'<<1),('E'<<1),('A'<<1),('C'<<1),('O'<<1),('N'<<1),('0'<<1)};
;eeprom unsigned char mycall[8]={"YC2WYA0"};
;eeprom unsigned char mydigi1[8]={"WIDE2 1"};
;eeprom unsigned char mydigi2[8]={"WIDE2 2"};
;eeprom unsigned char mydigi3[8]={"WIDE2 2"};
;eeprom char comment[100] ={"New Tracker"};
;eeprom char status[100]={"ProTrak! APRS & Telemetry Encoder"};
;eeprom char posisi_lat[11]={"0745.4821S"};
;eeprom char posisi_long[12]={"11022.5621E"};
;eeprom unsigned int altitude = 0;
;eeprom int m_int=21;
;eeprom char comp_lat[4];
;eeprom char comp_long[4];
;eeprom int timeIntv=4;
;eeprom char compstat='Y';
;eeprom char battvoltincomm='Y';
;eeprom char tempincomm='Y';
;eeprom char sendalt='Y';
;eeprom char gps='N';
;eeprom char sendtopc='N';
;eeprom char commsize=11;
;eeprom char statsize=33;
;
;char temp[7]={"020.0C"};

	.DSEG
;char volt[7]={"013.8V"};
;char comp_cst[3]={33,33,(0b00110110+33)};
;char beacon_stat;
;bit nada;
;static char bit_stuff;
;unsigned short crc;
;unsigned int tcnt1c;
;
;void read_temp(void)
; 0000 006B {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 006C 	int adc;
; 0000 006D         char adc_r,adc_p,adc_s,adc_d;
; 0000 006E 
; 0000 006F         adc = (5*read_adc(TEMP_ADC_)/1.024);
;PCODE: $0000000F VOL: 0
;	adc -> R16,R17
;	adc_r -> R19
;	adc_p -> R18
;	adc_s -> R21
;	adc_d -> R20
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0070         //itoa(adc,temp);
; 0000 0071 
; 0000 0072         adc_r = (adc/1000);
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0073         adc_p = ((adc%1000)/100);
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0074         adc_s = ((adc%100)/10);
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0075         adc_d = (adc%10);
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0076 
; 0000 0077         if(adc_r==0)temp[0]=' ';
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0078         else temp[0] = adc_r + '0';
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 0079         if((adc_p==0)&&(adc_r==0)) temp[1]=' ';
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 007A         else temp[1] = adc_p + '0';
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 007B         temp[2] = adc_s + '0';
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 007C         temp[4] = adc_d + '0';
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
; 0000 007D }
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;
;void read_volt(void)
; 0000 0080 {
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0081 	int adc;
; 0000 0082         char adc_r,adc_p,adc_s,adc_d;
; 0000 0083 
; 0000 0084         adc = (5*22*read_adc(VSENSE_ADC_))/102.4;
;PCODE: $0000005B VOL: 0
;	adc -> R16,R17
;	adc_r -> R19
;	adc_p -> R18
;	adc_s -> R21
;	adc_d -> R20
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 0085         //itoa(adc,volt);
; 0000 0086 
; 0000 0087         adc_r = (adc/1000);
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
; 0000 0088         adc_p = ((adc%1000)/100);
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0089         adc_s = ((adc%100)/10);
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 008A         adc_d = (adc%10);
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 008B 
; 0000 008C         if(adc_r==0)	volt[0]=' ';
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 008D         else volt[0] = adc_r + '0';
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 008E         if((adc_p==0)&&(adc_r==0)) volt[1]=' ';
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 008F         else volt[1] = adc_p + '0';
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 0090         volt[2] = adc_s + '0';
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 0091         volt[4] = adc_d + '0';
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
; 0000 0092 }
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;
;void base91_lat(void)
; 0000 0095 {
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 0096   	char deg;
; 0000 0097         char min;
; 0000 0098         float sec;
; 0000 0099         char sign;
; 0000 009A         float lat;
; 0000 009B         float f_lat;
; 0000 009C 
; 0000 009D         deg = ((posisi_lat[0]-48)*10) + (posisi_lat[1]-48);
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;	deg -> R17
;	min -> R16
;	sec -> Y+12
;	sign -> R19
;	lat -> Y+8
;	f_lat -> Y+4
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 009E         min = ((posisi_lat[2]-48)*10) + (posisi_lat[3]-48);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 009F         //sec = ((posisi_lat[5]-48)*1000.0) + ((posisi_lat[6]-48)*100.0)+((posisi_lat[7]-48)*10.0) + (posisi_lat[8]-48);
; 0000 00A0         sec = ((posisi_lat[5]-48)*100.0) + ((posisi_lat[6]-48)*10.0)+((posisi_lat[7]-48)*1.0);
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00A1         //sec = ((posisi_lat[5]-48)*10.0) + (posisi_lat[6]-48);
; 0000 00A2 
; 0000 00A3         if(posisi_lat[7]=='N') sign = 1.0;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 00A4         else sign = -1.0;
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00A5 
; 0000 00A6         //f_lat = (deg + (min/60.0) + (0.6*sec/360000.0));
; 0000 00A7         f_lat = (deg + (min/60.0) + (0.6*sec/36000.0));
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00A8         //f_lat = (deg + (min/60.0) + (0.6*sec/3600.0));
; 0000 00A9         lat = 380926 * (90 - (f_lat * sign));
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 00AA 
; 0000 00AB         comp_lat[0] = (lat/753571)+33;
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
; 0000 00AC         comp_lat[1] = ((fmod(lat,753571))/8281)+33;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00AD         comp_lat[2] = ((fmod(lat,8281))/91)+33;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 00AE         comp_lat[3] = (fmod(lat,91))+33;
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 00AF }
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;
;void base91_long(void)
; 0000 00B2 {
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00B3   	float deg;
; 0000 00B4         float min;
; 0000 00B5         float sec;
; 0000 00B6         char sign;
; 0000 00B7         float lon;
; 0000 00B8         float f_lon;
; 0000 00B9 
; 0000 00BA         deg = ((posisi_long[0]-48)*100) + ((posisi_long[1]-48)*10) + ((posisi_long[2]-48)*1);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;	deg -> Y+17
;	min -> Y+13
;	sec -> Y+9
;	sign -> R17
;	lon -> Y+5
;	f_lon -> Y+1
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 00BB         min = ((posisi_long[3]-48)*10) + (posisi_long[4]-48);
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
; 0000 00BC         //sec = ((posisi_long[6]-48)*1000.0) + ((posisi_long[7]-48)*100.0) + ((posisi_long[8]-48)*10.0) + (posisi_long[9]-48); 	// <---- 1 foot resolution
; 0000 00BD         sec = ((posisi_long[6]-48)*100.0) + ((posisi_long[7]-48)*10.0) + ((posisi_long[8]-48)*1.0);				// <---- 1 meter resolution
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 00BE         //sec = ((posisi_long[6]-48)*10.0) + (posisi_long[7]-48);  								// <---- 8 meter resolution
; 0000 00BF 
; 0000 00C0         if(posisi_long[8]=='E') sign = 1.0;
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 00C1         else			sign = -1.0;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 00C2 
; 0000 00C3         //f_lon = (deg + (min/60.0) + (0.6*sec/360000.0));	// <---- 1 foot resolution
; 0000 00C4         f_lon = (deg + (min/60.0) + (0.6*sec/36000.0)); 	// <---- 1 meter resolution
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 00C5         //f_lon = (deg + (min/60.0) + (0.6*sec/3600.0));	// <---- 8 meter resolution
; 0000 00C6         lon = 190463 * (180 - (f_lon * sign));
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
; 0000 00C7 
; 0000 00C8         comp_long[0] = (lon/753571)+33;
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 00C9         comp_long[1] = ((fmod(lon,753571))/8281)+33;
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 00CA         comp_long[2] = ((fmod(lon,8281))/91)+33;
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 00CB         comp_long[3] = (fmod(lon,91))+33;
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
; 0000 00CC }
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;
;void base91_alt(void)
; 0000 00CF {
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
; 0000 00D0 	int alt;
; 0000 00D1 
; 0000 00D2         alt = (500.5*log(altitude*1.0));
;PCODE: $000001D7 VOL: 0
;	alt -> R16,R17
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 00D3         comp_cst[0] = (alt/91)+33;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
; 0000 00D4         comp_cst[1] = (alt%91)+33;
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
; 0000 00D5 }
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;
;void kirim_add_aprs(void)
; 0000 00D8 {
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 00D9 	char i;
; 0000 00DA 
; 0000 00DB         for(i=0;i<7;i++)kirim_karakter(add_aprs[i]);
;PCODE: $000001F3 VOL: 0
;	i -> R17
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 00DC }
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;
;void kirim_add_beacon(void)
; 0000 00DF {
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 00E0 	char i;
; 0000 00E1 
; 0000 00E2         for(i=0;i<7;i++)kirim_karakter(add_beacon[i]);
;PCODE: $0000020D VOL: 0
;	i -> R17
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00E3 }
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;
;void kirim_ax25_head(void)
; 0000 00E6 {
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 00E7 	char i;
; 0000 00E8 
; 0000 00E9         for(i=0;i<6;i++)kirim_karakter(mycall[i]<<1);
;PCODE: $00000227 VOL: 0
;	i -> R17
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
; 0000 00EA if(((mydigi1[0]>47)&&(mydigi1[0]<58))||((mydigi1[0]>64)&&(mydigi1[0]<91)))
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
; 0000 00EB         {
; 0000 00EC         	kirim_karakter(mycall[6]<<1);
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
; 0000 00ED                 for(i=0;i<6;i++)kirim_karakter(mydigi1[i]<<1);
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 00EE if(((mydigi2[0]>47)&&(mydigi2[0]<58))||((mydigi2[0]>64)&&(mydigi2[0]<91)))
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00EF         	{
; 0000 00F0         		kirim_karakter(mydigi1[6]<<1);
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 00F1                 	for(i=0;i<6;i++)kirim_karakter(mydigi2[i]<<1);
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
; 0000 00F2 if(((mydigi3[0]>47)&&(mydigi3[0]<58))||((mydigi3[0]>64)&&(mydigi3[0]<91)))
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
; 0000 00F3         		{
; 0000 00F4         			kirim_karakter(mydigi2[6]<<1);
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
; 0000 00F5                 		for(i=0;i<6;i++)kirim_karakter(mydigi3[i]<<1);
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 00F6 kirim_karakter((mydigi3[6]<<1)+1);
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 00F7         		}
; 0000 00F8         		else
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 00F9         		{
; 0000 00FA         			kirim_karakter((mydigi2[6]<<1)+1);
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 00FB         		}
;PCODE: $000002CE VOL: 0
; 0000 00FC         	}
; 0000 00FD         	else
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 00FE         	{
; 0000 00FF         		kirim_karakter((mydigi1[6]<<1)+1);
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0100         	}
;PCODE: $000002D8 VOL: 0
; 0000 0101         }
; 0000 0102         else
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0103         {
; 0000 0104         	kirim_karakter((mycall[6]<<1)+1);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0105         }
;PCODE: $000002E2 VOL: 0
; 0000 0106 	kirim_karakter(CONTROL_FIELD_);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0107 	kirim_karakter(PROTOCOL_ID_);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0108 }
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;
;void kirim_status(void)
; 0000 010B {
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 010C 	char i;
; 0000 010D 
; 0000 010E         kirim_add_aprs();
;PCODE: $000002EE VOL: 0
;	i -> R17
;PCODE: $000002EF VOL: 0
; 0000 010F         kirim_ax25_head();
;PCODE: $000002F0 VOL: 0
; 0000 0110         kirim_karakter(TD_STATUS_);
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0111 	for(i=0;i<statsize;i++)
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 0112         {
; 0000 0113         	if(status[i]!=0)kirim_karakter(status[i]);
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
; 0000 0114         }
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0115 }
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;
;void kirim_beacon(void)
; 0000 0118 {
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
; 0000 0119 	char i;
; 0000 011A 
; 0000 011B         kirim_add_beacon();
;PCODE: $00000315 VOL: 0
;	i -> R17
;PCODE: $00000316 VOL: 0
; 0000 011C         kirim_ax25_head();
;PCODE: $00000317 VOL: 0
; 0000 011D         for(i=0;i<statsize;i++)kirim_karakter(status[i]);
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 011E }
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;
;void prepare(void)
; 0000 0121 {
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 0122 	char i;
; 0000 0123 
; 0000 0124         PTT = 1;
;PCODE: $00000332 VOL: 0
;	i -> R17
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
; 0000 0125 	delay_ms(100);
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
; 0000 0126 	for(i=0;i<TX_DELAY_;i++)kirim_karakter(0x00);
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
; 0000 0127 kirim_karakter(0x7E);
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0128 	bit_stuff = 0;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
; 0000 0129         crc = 0xFFFF;
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 012A }
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;
;void kirim_paket(void)
; 0000 012D {
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 012E 	char i;
; 0000 012F 
; 0000 0130         read_temp();
;PCODE: $00000355 VOL: 0
;	i -> R17
;PCODE: $00000356 VOL: 0
; 0000 0131         read_volt();
;PCODE: $00000357 VOL: 0
; 0000 0132         base91_lat();
;PCODE: $00000358 VOL: 0
; 0000 0133         base91_long();
;PCODE: $00000359 VOL: 0
; 0000 0134         base91_alt();
;PCODE: $0000035A VOL: 0
; 0000 0135         //altitude+=3;             	// <---------- incremental of altitude
; 0000 0136         //if(altitude>65500)altitude=0;	// <---------- altitude limiter
; 0000 0137 
; 0000 0138         MERAH = 1;
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
; 0000 0139         HIJAU = 0;
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
; 0000 013A 
; 0000 013B         beacon_stat++;
;PCODE: $0000035F VOL: 0
; 0000 013C         prepare();
;PCODE: $00000360 VOL: 0
; 0000 013D         if(beacon_stat==2)
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
; 0000 013E         {
; 0000 013F         	kirim_status();
;PCODE: $00000364 VOL: 0
; 0000 0140                 goto oke;
;PCODE: $00000365 VOL: 0
; 0000 0141         }
; 0000 0142         if(beacon_stat==3)
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 0143         {
; 0000 0144         	kirim_beacon();
;PCODE: $0000036A VOL: 0
; 0000 0145                 goto oke;
;PCODE: $0000036B VOL: 0
; 0000 0146         }
; 0000 0147         if((beacon_stat==1)||((beacon_stat%m_int)!=0))
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 0148         {
; 0000 0149         	kirim_add_aprs();
;PCODE: $00000379 VOL: 0
; 0000 014A         	kirim_ax25_head();
;PCODE: $0000037A VOL: 0
; 0000 014B         	kirim_karakter(TD_POSISI_);
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
; 0000 014C         	//if(compstat=='Y')
; 0000 014D                 //{
; 0000 014E         		kirim_karakter(SYM_TAB_OVL_);
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
; 0000 014F         		for(i=0;i<4;i++)kirim_karakter(comp_lat[i]);
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
; 0000 0150 for(i=0;i<4;i++)kirim_karakter(comp_long[i]);
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
; 0000 0151 kirim_karakter(SYM_CODE_);
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 0152         		for(i=0;i<3;i++)kirim_karakter(comp_cst[i]);
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
; 0000 0154 if(tempincomm=='Y')
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 0155                 {for(i=0;i<6;i++)if(temp[i]!=' ')kirim_karakter(temp[i]);
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 0156                 kirim_karakter(' ');}
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 0157                 if(battvoltincomm=='Y')
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
; 0000 0158                 {for(i=0;i<6;i++)if(volt[i]!=' ')kirim_karakter(volt[i]);
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
; 0000 0159                 kirim_karakter(' ');}
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
; 0000 015A                 for(i=0;i<commsize;i++)kirim_karakter(comment[i]);
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
;PCODE: $00000419 VOL: 0
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
; 0000 015C goto oke;
;PCODE: $0000041D VOL: 0
; 0000 015D         }
; 0000 015E         if((beacon_stat%m_int)==0)kirim_status();
;PCODE: $0000041E VOL: 0
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
;PCODE: $00000421 VOL: 0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
; 0000 015F 
; 0000 0160         oke:
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
; 0000 0161 	kirim_crc();
;PCODE: $00000429 VOL: 0
; 0000 0162         kirim_karakter(FLAG_);
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
; 0000 0163         kirim_karakter(FLAG_);
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
; 0000 0164         if(beacon_stat==100)beacon_stat=0;
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
; 0000 0165         PTT = 0;
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
; 0000 0166         MERAH = 0;
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
; 0000 0167         HIJAU = 0;
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
; 0000 0168 }
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
;
;void kirim_crc(void)
; 0000 016B {
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 016C 	static unsigned char crc_lo;
; 0000 016D 	static unsigned char crc_hi;
; 0000 016E 
; 0000 016F         crc_lo = crc ^ 0xFF;
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
; 0000 0170 	crc_hi = (crc >> 8) ^ 0xFF;
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 0171 	kirim_karakter(crc_lo);
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
; 0000 0172 	kirim_karakter(crc_hi);
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
; 0000 0173 }
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;
;void kirim_karakter(unsigned char input)
; 0000 0176 {
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
; 0000 0177 	char i;
; 0000 0178 	bit in_bit;
; 0000 0179 
; 0000 017A         for(i=0;i<8;i++)
;PCODE: $00000452 VOL: 0
;	input -> Y+1
;	i -> R17
;	in_bit -> R15.0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 017B         {
; 0000 017C         	in_bit = (input >> i) & 0x01;
;PCODE: $0000045C VOL: 0
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
; 0000 017D 		if(input==0x7E)	{bit_stuff = 0;}
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
; 0000 017E 		else		{hitung_crc(in_bit);}
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
; 0000 017F 
; 0000 0180 		if(!in_bit)
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0181                 {
; 0000 0182                 	ubah_nada();
;PCODE: $00000472 VOL: 0
; 0000 0183 			bit_stuff = 0;
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 0184                 }
; 0000 0185                 else
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
; 0000 0186                 {
; 0000 0187                 	set_nada(nada);
;PCODE: $00000477 VOL: 0
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
; 0000 0188 			bit_stuff++;
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
; 0000 0189 			if(bit_stuff==5)
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
; 0000 018A                         {
; 0000 018B                         	ubah_nada();
;PCODE: $00000481 VOL: 0
; 0000 018C                                 bit_stuff = 0;
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
; 0000 018D                         }
; 0000 018E                 }
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
; 0000 018F         }
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
; 0000 0190 }
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;
;void hitung_crc(char in_crc)
; 0000 0193 {
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0194 	static unsigned short xor_in;
; 0000 0195 	xor_in = crc ^ in_crc;
;	in_crc -> Y+0
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
; 0000 0196 	crc >>= 1;
;PCODE: $00000496 VOL: 0
; 0000 0197 	if(xor_in & 0x01)	crc ^= 0x8408;
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
; 0000 0198 }
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;
;void ubah_nada(void)
; 0000 019B {
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
; 0000 019C 	nada = ~nada;
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
; 0000 019D         set_nada(nada);
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
; 0000 019E }
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;
;void set_nada(char i_nada)
; 0000 01A1 {
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 01A2 	if(i_nada == _1200)
;	i_nada -> Y+0
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
; 0000 01A3     	{
; 0000 01A4         	delay_us(417);
;PCODE: $000004B1 VOL: 0
; 0000 01A5         	AFOUT = 1;
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
; 0000 01A6         	delay_us(417);
;PCODE: $000004B4 VOL: 0
; 0000 01A7         	AFOUT = 0;
;PCODE: $000004B5 VOL: 0
;PCODE: $000004B6 VOL: 0
; 0000 01A8     	}
; 0000 01A9         else
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
; 0000 01AA     	{
; 0000 01AB         	delay_us(208);
;PCODE: $000004B9 VOL: 0
; 0000 01AC         	AFOUT = 1;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 01AD         	delay_us(209);
;PCODE: $000004BC VOL: 0
; 0000 01AE         	AFOUT = 0;
;PCODE: $000004BD VOL: 0
;PCODE: $000004BE VOL: 0
; 0000 01AF                 delay_us(208);
;PCODE: $000004BF VOL: 0
; 0000 01B0         	AFOUT = 1;
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 01B1         	delay_us(209);
;PCODE: $000004C2 VOL: 0
; 0000 01B2         	AFOUT = 0;
;PCODE: $000004C3 VOL: 0
;PCODE: $000004C4 VOL: 0
; 0000 01B3     	}
;PCODE: $000004C5 VOL: 0
; 0000 01B4 }
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
;
;unsigned int read_adc(unsigned char adc_input)
; 0000 01B7 {
;PCODE: $000004C9 VOL: 0
;PCODE: $000004CA VOL: 0
; 0000 01B8 	ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 01B9 	delay_us(10);
;PCODE: $000004CE VOL: 0
; 0000 01BA 	ADCSRA|=0x40;
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
; 0000 01BB 	while ((ADCSRA & 0x10)==0);
;PCODE: $000004D1 VOL: 0
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
;PCODE: $000004D4 VOL: 0
;PCODE: $000004D5 VOL: 0
;PCODE: $000004D6 VOL: 0
; 0000 01BC 	ADCSRA|=0x10;
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
; 0000 01BD 	return ADCW;
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
; 0000 01BE }
;PCODE: $000004DC VOL: 0
;
;void waitComma(void)
; 0000 01C1 {
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
; 0000 01C2 	while(getchar()!=',');
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 01C3 }
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;
;void waitDollar(void)
; 0000 01C6 {
;PCODE: $000004E7 VOL: 0
;PCODE: $000004E8 VOL: 0
; 0000 01C7 	while(getchar()!='$');
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 01C8 }
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;
;void waitInvCo(void)
; 0000 01CB {
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
; 0000 01CC 	while(getchar()!='"');
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 01CD }
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;
;void mem_display(void)
; 0000 01D0 {
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
; 0000 01D1 	// configuration ECHO
; 0000 01D2         // mycall & SSID
; 0000 01D3         char k;
; 0000 01D4         char f[];
; 0000 01D5 
; 0000 01D6         #asm("cli")
;PCODE: $000004FD VOL: 0
;	k -> R17
;	f -> Y+1
;PCODE: $000004FE VOL: 0
	cli
;PCODE: $000004FF VOL: 0
; 0000 01D7 
; 0000 01D8         MERAH=1;
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
; 0000 01D9         HIJAU=0;
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
; 0000 01DA 
; 0000 01DB         putchar(13);
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
; 0000 01DC         putchar(13);putsf("Your ProTrak! model A Configuration is:");
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
; 0000 01DD         putchar(13);
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
; 0000 01DE         putchar(13);putsf("Callsign");
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
; 0000 01DF         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
; 0000 01E0         for(k=0;k<6;k++)if((mycall[k])!=' ')putchar(mycall[k]);
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
; 0000 01E1         if((mycall[6])>'0')
;PCODE: $00000542 VOL: 0
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
; 0000 01E2         {
; 0000 01E3         	putchar('-');
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
; 0000 01E4                 itoa(mycall[6]-48,f);
;PCODE: $00000550 VOL: 0
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
;PCODE: $00000556 VOL: 0
;PCODE: $00000557 VOL: 0
;PCODE: $00000558 VOL: 0
; 0000 01E5                 puts(f);
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
;PCODE: $0000055B VOL: 0
; 0000 01E6         }
; 0000 01E7 
; 0000 01E8         // digipath
; 0000 01E9         putchar(13);putsf("Digi Path(s)");
;PCODE: $0000055C VOL: 0
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
;PCODE: $00000560 VOL: 0
;PCODE: $00000561 VOL: 0
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
; 0000 01EA         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000564 VOL: 0
;PCODE: $00000565 VOL: 0
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
;PCODE: $00000569 VOL: 0
;PCODE: $0000056A VOL: 0
;PCODE: $0000056B VOL: 0
;PCODE: $0000056C VOL: 0
;PCODE: $0000056D VOL: 0
;PCODE: $0000056E VOL: 0
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
; 0000 01EB         if(mydigi1[0]!=0)
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 01EC         {
; 0000 01ED         	for(k=0;k<6;k++)if((mydigi1[k])!=' ')putchar(mydigi1[k]);
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
;PCODE: $0000057F VOL: 0
;PCODE: $00000580 VOL: 0
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 0
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
; 0000 01EE         	if(mydigi1[6]>'0')
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
; 0000 01EF         	{
; 0000 01F0         		putchar('-');
;PCODE: $0000059D VOL: 0
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
; 0000 01F1                         itoa(mydigi1[6]-48,f);
;PCODE: $000005A0 VOL: 0
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 01F2                         puts(f);
;PCODE: $000005A9 VOL: 0
;PCODE: $000005AA VOL: 0
;PCODE: $000005AB VOL: 0
; 0000 01F3         	}
; 0000 01F4         }
;PCODE: $000005AC VOL: 0
; 0000 01F5         if(mydigi2[0]!=0)
;PCODE: $000005AD VOL: 0
;PCODE: $000005AE VOL: 0
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 01F6         {
; 0000 01F7         	putchar(',');
;PCODE: $000005B2 VOL: 0
;PCODE: $000005B3 VOL: 0
;PCODE: $000005B4 VOL: 0
; 0000 01F8         	for(k=0;k<6;k++)if((mydigi2[k])!=' ')putchar(mydigi2[k]);
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
;PCODE: $000005B8 VOL: 0
;PCODE: $000005B9 VOL: 0
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
;PCODE: $000005BD VOL: 0
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
;PCODE: $000005C2 VOL: 0
;PCODE: $000005C3 VOL: 0
;PCODE: $000005C4 VOL: 0
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
; 0000 01F9         	if(mydigi2[6]>'0')
;PCODE: $000005CA VOL: 0
;PCODE: $000005CB VOL: 0
;PCODE: $000005CC VOL: 0
;PCODE: $000005CD VOL: 0
;PCODE: $000005CE VOL: 0
;PCODE: $000005CF VOL: 0
;PCODE: $000005D0 VOL: 0
;PCODE: $000005D1 VOL: 0
;PCODE: $000005D2 VOL: 0
;PCODE: $000005D3 VOL: 0
;PCODE: $000005D4 VOL: 0
; 0000 01FA         	{
; 0000 01FB         		putchar('-');
;PCODE: $000005D5 VOL: 0
;PCODE: $000005D6 VOL: 0
;PCODE: $000005D7 VOL: 0
; 0000 01FC                         itoa(mydigi2[6]-48,f);
;PCODE: $000005D8 VOL: 0
;PCODE: $000005D9 VOL: 0
;PCODE: $000005DA VOL: 0
;PCODE: $000005DB VOL: 0
;PCODE: $000005DC VOL: 0
;PCODE: $000005DD VOL: 0
;PCODE: $000005DE VOL: 0
;PCODE: $000005DF VOL: 0
;PCODE: $000005E0 VOL: 0
; 0000 01FD                         puts(f);
;PCODE: $000005E1 VOL: 0
;PCODE: $000005E2 VOL: 0
;PCODE: $000005E3 VOL: 0
; 0000 01FE         	}
; 0000 01FF         }
;PCODE: $000005E4 VOL: 0
; 0000 0200         if(mydigi3[0]!=0)
;PCODE: $000005E5 VOL: 0
;PCODE: $000005E6 VOL: 0
;PCODE: $000005E7 VOL: 0
;PCODE: $000005E8 VOL: 0
;PCODE: $000005E9 VOL: 0
; 0000 0201         {
; 0000 0202         	putchar(',');
;PCODE: $000005EA VOL: 0
;PCODE: $000005EB VOL: 0
;PCODE: $000005EC VOL: 0
; 0000 0203         	for(k=0;k<6;k++)if((mydigi3[k])!=' ')putchar(mydigi3[k]);
;PCODE: $000005ED VOL: 0
;PCODE: $000005EE VOL: 0
;PCODE: $000005EF VOL: 0
;PCODE: $000005F0 VOL: 0
;PCODE: $000005F1 VOL: 0
;PCODE: $000005F2 VOL: 0
;PCODE: $000005F3 VOL: 0
;PCODE: $000005F4 VOL: 0
;PCODE: $000005F5 VOL: 0
;PCODE: $000005F6 VOL: 0
;PCODE: $000005F7 VOL: 0
;PCODE: $000005F8 VOL: 0
;PCODE: $000005F9 VOL: 0
;PCODE: $000005FA VOL: 0
;PCODE: $000005FB VOL: 0
;PCODE: $000005FC VOL: 0
;PCODE: $000005FD VOL: 0
;PCODE: $000005FE VOL: 0
;PCODE: $000005FF VOL: 0
;PCODE: $00000600 VOL: 0
;PCODE: $00000601 VOL: 0
; 0000 0204         	if(mydigi3[6]>'0')
;PCODE: $00000602 VOL: 0
;PCODE: $00000603 VOL: 0
;PCODE: $00000604 VOL: 0
;PCODE: $00000605 VOL: 0
;PCODE: $00000606 VOL: 0
;PCODE: $00000607 VOL: 0
;PCODE: $00000608 VOL: 0
;PCODE: $00000609 VOL: 0
;PCODE: $0000060A VOL: 0
;PCODE: $0000060B VOL: 0
;PCODE: $0000060C VOL: 0
; 0000 0205         	{
; 0000 0206         		putchar('-');
;PCODE: $0000060D VOL: 0
;PCODE: $0000060E VOL: 0
;PCODE: $0000060F VOL: 0
; 0000 0207                         itoa(mydigi3[6]-48,f);
;PCODE: $00000610 VOL: 0
;PCODE: $00000611 VOL: 0
;PCODE: $00000612 VOL: 0
;PCODE: $00000613 VOL: 0
;PCODE: $00000614 VOL: 0
;PCODE: $00000615 VOL: 0
;PCODE: $00000616 VOL: 0
;PCODE: $00000617 VOL: 0
;PCODE: $00000618 VOL: 0
; 0000 0208                         puts(f);
;PCODE: $00000619 VOL: 0
;PCODE: $0000061A VOL: 0
;PCODE: $0000061B VOL: 0
; 0000 0209         	}
; 0000 020A         }
;PCODE: $0000061C VOL: 0
; 0000 020B 
; 0000 020C         // beacon interval
; 0000 020D         putchar(13);putsf("TX Interval");
;PCODE: $0000061D VOL: 0
;PCODE: $0000061E VOL: 0
;PCODE: $0000061F VOL: 0
;PCODE: $00000620 VOL: 0
;PCODE: $00000621 VOL: 0
;PCODE: $00000622 VOL: 0
;PCODE: $00000623 VOL: 0
;PCODE: $00000624 VOL: 0
; 0000 020E         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000625 VOL: 0
;PCODE: $00000626 VOL: 0
;PCODE: $00000627 VOL: 0
;PCODE: $00000628 VOL: 0
;PCODE: $00000629 VOL: 0
;PCODE: $0000062A VOL: 0
;PCODE: $0000062B VOL: 0
;PCODE: $0000062C VOL: 0
;PCODE: $0000062D VOL: 0
;PCODE: $0000062E VOL: 0
;PCODE: $0000062F VOL: 0
;PCODE: $00000630 VOL: 0
;PCODE: $00000631 VOL: 0
;PCODE: $00000632 VOL: 0
;PCODE: $00000633 VOL: 0
;PCODE: $00000634 VOL: 0
;PCODE: $00000635 VOL: 0
;PCODE: $00000636 VOL: 0
;PCODE: $00000637 VOL: 0
;PCODE: $00000638 VOL: 0
;PCODE: $00000639 VOL: 0
; 0000 020F         itoa(timeIntv,f);
;PCODE: $0000063A VOL: 0
;PCODE: $0000063B VOL: 0
;PCODE: $0000063C VOL: 0
;PCODE: $0000063D VOL: 0
;PCODE: $0000063E VOL: 0
;PCODE: $0000063F VOL: 0
; 0000 0210         puts(f);
;PCODE: $00000640 VOL: 0
;PCODE: $00000641 VOL: 0
;PCODE: $00000642 VOL: 0
; 0000 0211         putchar(' ');putsf("second(s)");
;PCODE: $00000643 VOL: 0
;PCODE: $00000644 VOL: 0
;PCODE: $00000645 VOL: 0
;PCODE: $00000646 VOL: 0
;PCODE: $00000647 VOL: 0
;PCODE: $00000648 VOL: 0
;PCODE: $00000649 VOL: 0
; 0000 0212         if(timeIntv>9999)putsf(" is too long");
;PCODE: $0000064A VOL: 0
;PCODE: $0000064B VOL: 0
;PCODE: $0000064C VOL: 0
;PCODE: $0000064D VOL: 0
;PCODE: $0000064E VOL: 0
;PCODE: $0000064F VOL: 0
;PCODE: $00000650 VOL: 0
;PCODE: $00000651 VOL: 0
; 0000 0213 
; 0000 0214         // symbol code / icon
; 0000 0215         putchar(13);putsf("Symbol / Icon");
;PCODE: $00000652 VOL: 0
;PCODE: $00000653 VOL: 0
;PCODE: $00000654 VOL: 0
;PCODE: $00000655 VOL: 0
;PCODE: $00000656 VOL: 0
;PCODE: $00000657 VOL: 0
;PCODE: $00000658 VOL: 0
;PCODE: $00000659 VOL: 0
; 0000 0216         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $0000065A VOL: 0
;PCODE: $0000065B VOL: 0
;PCODE: $0000065C VOL: 0
;PCODE: $0000065D VOL: 0
;PCODE: $0000065E VOL: 0
;PCODE: $0000065F VOL: 0
;PCODE: $00000660 VOL: 0
;PCODE: $00000661 VOL: 0
;PCODE: $00000662 VOL: 0
;PCODE: $00000663 VOL: 0
;PCODE: $00000664 VOL: 0
;PCODE: $00000665 VOL: 0
;PCODE: $00000666 VOL: 0
;PCODE: $00000667 VOL: 0
;PCODE: $00000668 VOL: 0
;PCODE: $00000669 VOL: 0
;PCODE: $0000066A VOL: 0
;PCODE: $0000066B VOL: 0
;PCODE: $0000066C VOL: 0
;PCODE: $0000066D VOL: 0
;PCODE: $0000066E VOL: 0
; 0000 0217         putchar(SYM_CODE_);
;PCODE: $0000066F VOL: 0
;PCODE: $00000670 VOL: 0
;PCODE: $00000671 VOL: 0
;PCODE: $00000672 VOL: 0
; 0000 0218 
; 0000 0219         // symbol table / overlay
; 0000 021A         putchar(13);putsf("Symbol Table / Overlay");
;PCODE: $00000673 VOL: 0
;PCODE: $00000674 VOL: 0
;PCODE: $00000675 VOL: 0
;PCODE: $00000676 VOL: 0
;PCODE: $00000677 VOL: 0
;PCODE: $00000678 VOL: 0
;PCODE: $00000679 VOL: 0
; 0000 021B         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $0000067A VOL: 0
;PCODE: $0000067B VOL: 0
;PCODE: $0000067C VOL: 0
;PCODE: $0000067D VOL: 0
;PCODE: $0000067E VOL: 0
;PCODE: $0000067F VOL: 0
;PCODE: $00000680 VOL: 0
;PCODE: $00000681 VOL: 0
;PCODE: $00000682 VOL: 0
;PCODE: $00000683 VOL: 0
;PCODE: $00000684 VOL: 0
;PCODE: $00000685 VOL: 0
;PCODE: $00000686 VOL: 0
;PCODE: $00000687 VOL: 0
;PCODE: $00000688 VOL: 0
;PCODE: $00000689 VOL: 0
;PCODE: $0000068A VOL: 0
;PCODE: $0000068B VOL: 0
; 0000 021C         putchar(SYM_TAB_OVL_);
;PCODE: $0000068C VOL: 0
;PCODE: $0000068D VOL: 0
;PCODE: $0000068E VOL: 0
;PCODE: $0000068F VOL: 0
; 0000 021D 
; 0000 021E         // comment
; 0000 021F         putchar(13);putsf("Comment");
;PCODE: $00000690 VOL: 0
;PCODE: $00000691 VOL: 0
;PCODE: $00000692 VOL: 0
;PCODE: $00000693 VOL: 0
;PCODE: $00000694 VOL: 0
;PCODE: $00000695 VOL: 0
;PCODE: $00000696 VOL: 0
; 0000 0220         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000697 VOL: 0
;PCODE: $00000698 VOL: 0
;PCODE: $00000699 VOL: 0
;PCODE: $0000069A VOL: 0
;PCODE: $0000069B VOL: 0
;PCODE: $0000069C VOL: 0
;PCODE: $0000069D VOL: 0
;PCODE: $0000069E VOL: 0
;PCODE: $0000069F VOL: 0
;PCODE: $000006A0 VOL: 0
;PCODE: $000006A1 VOL: 0
;PCODE: $000006A2 VOL: 0
;PCODE: $000006A3 VOL: 0
;PCODE: $000006A4 VOL: 0
;PCODE: $000006A5 VOL: 0
;PCODE: $000006A6 VOL: 0
;PCODE: $000006A7 VOL: 0
;PCODE: $000006A8 VOL: 0
;PCODE: $000006A9 VOL: 0
;PCODE: $000006AA VOL: 0
;PCODE: $000006AB VOL: 0
;PCODE: $000006AC VOL: 0
;PCODE: $000006AD VOL: 0
;PCODE: $000006AE VOL: 0
; 0000 0221         for(k=0;k<commsize;k++)
;PCODE: $000006AF VOL: 0
;PCODE: $000006B0 VOL: 0
;PCODE: $000006B1 VOL: 0
;PCODE: $000006B2 VOL: 0
;PCODE: $000006B3 VOL: 0
;PCODE: $000006B4 VOL: 0
;PCODE: $000006B5 VOL: 0
;PCODE: $000006B6 VOL: 0
;PCODE: $000006B7 VOL: 0
;PCODE: $000006B8 VOL: 0
; 0000 0222         {
; 0000 0223         	if(comment[k]!=0)putchar(comment[k]);
;PCODE: $000006B9 VOL: 0
;PCODE: $000006BA VOL: 0
;PCODE: $000006BB VOL: 0
;PCODE: $000006BC VOL: 0
;PCODE: $000006BD VOL: 0
;PCODE: $000006BE VOL: 0
;PCODE: $000006BF VOL: 0
;PCODE: $000006C0 VOL: 0
;PCODE: $000006C1 VOL: 0
;PCODE: $000006C2 VOL: 0
;PCODE: $000006C3 VOL: 0
;PCODE: $000006C4 VOL: 0
; 0000 0224         }
;PCODE: $000006C5 VOL: 0
;PCODE: $000006C6 VOL: 0
;PCODE: $000006C7 VOL: 0
;PCODE: $000006C8 VOL: 0
;PCODE: $000006C9 VOL: 0
;PCODE: $000006CA VOL: 0
; 0000 0225 
; 0000 0226         // status
; 0000 0227         putchar(13);putsf("Status");
;PCODE: $000006CB VOL: 0
;PCODE: $000006CC VOL: 0
;PCODE: $000006CD VOL: 0
;PCODE: $000006CE VOL: 0
;PCODE: $000006CF VOL: 0
;PCODE: $000006D0 VOL: 0
;PCODE: $000006D1 VOL: 0
; 0000 0228         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $000006D2 VOL: 0
;PCODE: $000006D3 VOL: 0
;PCODE: $000006D4 VOL: 0
;PCODE: $000006D5 VOL: 0
;PCODE: $000006D6 VOL: 0
;PCODE: $000006D7 VOL: 0
;PCODE: $000006D8 VOL: 0
;PCODE: $000006D9 VOL: 0
;PCODE: $000006DA VOL: 0
;PCODE: $000006DB VOL: 0
;PCODE: $000006DC VOL: 0
;PCODE: $000006DD VOL: 0
;PCODE: $000006DE VOL: 0
;PCODE: $000006DF VOL: 0
;PCODE: $000006E0 VOL: 0
;PCODE: $000006E1 VOL: 0
;PCODE: $000006E2 VOL: 0
;PCODE: $000006E3 VOL: 0
;PCODE: $000006E4 VOL: 0
;PCODE: $000006E5 VOL: 0
;PCODE: $000006E6 VOL: 0
;PCODE: $000006E7 VOL: 0
;PCODE: $000006E8 VOL: 0
;PCODE: $000006E9 VOL: 0
; 0000 0229         for(k=0;k<statsize;k++)
;PCODE: $000006EA VOL: 0
;PCODE: $000006EB VOL: 0
;PCODE: $000006EC VOL: 0
;PCODE: $000006ED VOL: 0
;PCODE: $000006EE VOL: 0
;PCODE: $000006EF VOL: 0
;PCODE: $000006F0 VOL: 0
;PCODE: $000006F1 VOL: 0
;PCODE: $000006F2 VOL: 0
;PCODE: $000006F3 VOL: 0
; 0000 022A         {
; 0000 022B         	if(status[k]!=0)putchar(status[k]);
;PCODE: $000006F4 VOL: 0
;PCODE: $000006F5 VOL: 0
;PCODE: $000006F6 VOL: 0
;PCODE: $000006F7 VOL: 0
;PCODE: $000006F8 VOL: 0
;PCODE: $000006F9 VOL: 0
;PCODE: $000006FA VOL: 0
;PCODE: $000006FB VOL: 0
;PCODE: $000006FC VOL: 0
;PCODE: $000006FD VOL: 0
;PCODE: $000006FE VOL: 0
;PCODE: $000006FF VOL: 0
; 0000 022C         }
;PCODE: $00000700 VOL: 0
;PCODE: $00000701 VOL: 0
;PCODE: $00000702 VOL: 0
;PCODE: $00000703 VOL: 0
;PCODE: $00000704 VOL: 0
;PCODE: $00000705 VOL: 0
; 0000 022D 
; 0000 022E         // status interval
; 0000 022F         putchar(13);putsf("Status Interval");
;PCODE: $00000706 VOL: 0
;PCODE: $00000707 VOL: 0
;PCODE: $00000708 VOL: 0
;PCODE: $00000709 VOL: 0
;PCODE: $0000070A VOL: 0
;PCODE: $0000070B VOL: 0
;PCODE: $0000070C VOL: 0
; 0000 0230         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $0000070D VOL: 0
;PCODE: $0000070E VOL: 0
;PCODE: $0000070F VOL: 0
;PCODE: $00000710 VOL: 0
;PCODE: $00000711 VOL: 0
;PCODE: $00000712 VOL: 0
;PCODE: $00000713 VOL: 0
;PCODE: $00000714 VOL: 0
;PCODE: $00000715 VOL: 0
;PCODE: $00000716 VOL: 0
;PCODE: $00000717 VOL: 0
;PCODE: $00000718 VOL: 0
;PCODE: $00000719 VOL: 0
;PCODE: $0000071A VOL: 0
;PCODE: $0000071B VOL: 0
;PCODE: $0000071C VOL: 0
;PCODE: $0000071D VOL: 0
;PCODE: $0000071E VOL: 0
;PCODE: $0000071F VOL: 0
;PCODE: $00000720 VOL: 0
;PCODE: $00000721 VOL: 0
; 0000 0231         itoa(m_int,f);
;PCODE: $00000722 VOL: 0
;PCODE: $00000723 VOL: 0
;PCODE: $00000724 VOL: 0
;PCODE: $00000725 VOL: 0
;PCODE: $00000726 VOL: 0
;PCODE: $00000727 VOL: 0
; 0000 0232         puts(f);
;PCODE: $00000728 VOL: 0
;PCODE: $00000729 VOL: 0
;PCODE: $0000072A VOL: 0
; 0000 0233         putchar(' ');putsf("transmission(s)");
;PCODE: $0000072B VOL: 0
;PCODE: $0000072C VOL: 0
;PCODE: $0000072D VOL: 0
;PCODE: $0000072E VOL: 0
;PCODE: $0000072F VOL: 0
;PCODE: $00000730 VOL: 0
;PCODE: $00000731 VOL: 0
; 0000 0234         if(m_int>99)putsf(" is too long");
;PCODE: $00000732 VOL: 0
;PCODE: $00000733 VOL: 0
;PCODE: $00000734 VOL: 0
;PCODE: $00000735 VOL: 0
;PCODE: $00000736 VOL: 0
;PCODE: $00000737 VOL: 0
;PCODE: $00000738 VOL: 0
;PCODE: $00000739 VOL: 0
; 0000 0235 
; 0000 0236         // BASE-91 Comppresion ?
; 0000 0237         putchar(13);putsf("BASE-91 ? (Y/N)");
;PCODE: $0000073A VOL: 0
;PCODE: $0000073B VOL: 0
;PCODE: $0000073C VOL: 0
;PCODE: $0000073D VOL: 0
;PCODE: $0000073E VOL: 0
;PCODE: $0000073F VOL: 0
;PCODE: $00000740 VOL: 0
;PCODE: $00000741 VOL: 0
; 0000 0238         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000742 VOL: 0
;PCODE: $00000743 VOL: 0
;PCODE: $00000744 VOL: 0
;PCODE: $00000745 VOL: 0
;PCODE: $00000746 VOL: 0
;PCODE: $00000747 VOL: 0
;PCODE: $00000748 VOL: 0
;PCODE: $00000749 VOL: 0
;PCODE: $0000074A VOL: 0
;PCODE: $0000074B VOL: 0
;PCODE: $0000074C VOL: 0
;PCODE: $0000074D VOL: 0
;PCODE: $0000074E VOL: 0
;PCODE: $0000074F VOL: 0
;PCODE: $00000750 VOL: 0
;PCODE: $00000751 VOL: 0
;PCODE: $00000752 VOL: 0
;PCODE: $00000753 VOL: 0
;PCODE: $00000754 VOL: 0
;PCODE: $00000755 VOL: 0
;PCODE: $00000756 VOL: 0
; 0000 0239         putchar(compstat);
;PCODE: $00000757 VOL: 0
;PCODE: $00000758 VOL: 0
;PCODE: $00000759 VOL: 0
;PCODE: $0000075A VOL: 0
; 0000 023A 
; 0000 023B         // Coordinate
; 0000 023C         putchar(13);putsf("NO GPS Coordinate");
;PCODE: $0000075B VOL: 0
;PCODE: $0000075C VOL: 0
;PCODE: $0000075D VOL: 0
;PCODE: $0000075E VOL: 0
;PCODE: $0000075F VOL: 0
;PCODE: $00000760 VOL: 0
;PCODE: $00000761 VOL: 0
; 0000 023D         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $00000762 VOL: 0
;PCODE: $00000763 VOL: 0
;PCODE: $00000764 VOL: 0
;PCODE: $00000765 VOL: 0
;PCODE: $00000766 VOL: 0
;PCODE: $00000767 VOL: 0
;PCODE: $00000768 VOL: 0
;PCODE: $00000769 VOL: 0
;PCODE: $0000076A VOL: 0
;PCODE: $0000076B VOL: 0
;PCODE: $0000076C VOL: 0
;PCODE: $0000076D VOL: 0
;PCODE: $0000076E VOL: 0
;PCODE: $0000076F VOL: 0
;PCODE: $00000770 VOL: 0
;PCODE: $00000771 VOL: 0
;PCODE: $00000772 VOL: 0
;PCODE: $00000773 VOL: 0
; 0000 023E         for(k=0;k<10;k++)putchar(posisi_lat[k]);
;PCODE: $00000774 VOL: 0
;PCODE: $00000775 VOL: 0
;PCODE: $00000776 VOL: 0
;PCODE: $00000777 VOL: 0
;PCODE: $00000778 VOL: 0
;PCODE: $00000779 VOL: 0
;PCODE: $0000077A VOL: 0
;PCODE: $0000077B VOL: 0
;PCODE: $0000077C VOL: 0
;PCODE: $0000077D VOL: 0
;PCODE: $0000077E VOL: 0
;PCODE: $0000077F VOL: 0
;PCODE: $00000780 VOL: 0
;PCODE: $00000781 VOL: 0
;PCODE: $00000782 VOL: 0
;PCODE: $00000783 VOL: 0
;PCODE: $00000784 VOL: 0
;PCODE: $00000785 VOL: 0
;PCODE: $00000786 VOL: 0
;PCODE: $00000787 VOL: 0
; 0000 023F putchar(',');
;PCODE: $00000788 VOL: 0
;PCODE: $00000789 VOL: 0
;PCODE: $0000078A VOL: 0
; 0000 0240         for(k=0;k<11;k++)putchar(posisi_long[k]);
;PCODE: $0000078B VOL: 0
;PCODE: $0000078C VOL: 0
;PCODE: $0000078D VOL: 0
;PCODE: $0000078E VOL: 0
;PCODE: $0000078F VOL: 0
;PCODE: $00000790 VOL: 0
;PCODE: $00000791 VOL: 0
;PCODE: $00000792 VOL: 0
;PCODE: $00000793 VOL: 0
;PCODE: $00000794 VOL: 0
;PCODE: $00000795 VOL: 0
;PCODE: $00000796 VOL: 0
;PCODE: $00000797 VOL: 0
;PCODE: $00000798 VOL: 0
;PCODE: $00000799 VOL: 0
;PCODE: $0000079A VOL: 0
;PCODE: $0000079B VOL: 0
;PCODE: $0000079C VOL: 0
;PCODE: $0000079D VOL: 0
;PCODE: $0000079E VOL: 0
; 0000 0243 putchar(13);putsf("Use GPS ? (Y/N)");
;PCODE: $0000079F VOL: 0
;PCODE: $000007A0 VOL: 0
;PCODE: $000007A1 VOL: 0
;PCODE: $000007A2 VOL: 0
;PCODE: $000007A3 VOL: 0
;PCODE: $000007A4 VOL: 0
;PCODE: $000007A5 VOL: 0
; 0000 0244         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $000007A6 VOL: 0
;PCODE: $000007A7 VOL: 0
;PCODE: $000007A8 VOL: 0
;PCODE: $000007A9 VOL: 0
;PCODE: $000007AA VOL: 0
;PCODE: $000007AB VOL: 0
;PCODE: $000007AC VOL: 0
;PCODE: $000007AD VOL: 0
;PCODE: $000007AE VOL: 0
;PCODE: $000007AF VOL: 0
;PCODE: $000007B0 VOL: 0
;PCODE: $000007B1 VOL: 0
;PCODE: $000007B2 VOL: 0
;PCODE: $000007B3 VOL: 0
;PCODE: $000007B4 VOL: 0
;PCODE: $000007B5 VOL: 0
;PCODE: $000007B6 VOL: 0
;PCODE: $000007B7 VOL: 0
;PCODE: $000007B8 VOL: 0
;PCODE: $000007B9 VOL: 0
;PCODE: $000007BA VOL: 0
; 0000 0245         putchar(gps);
;PCODE: $000007BB VOL: 0
;PCODE: $000007BC VOL: 0
;PCODE: $000007BD VOL: 0
;PCODE: $000007BE VOL: 0
; 0000 0246 
; 0000 0247         // battery volt
; 0000 0248         putchar(13);putsf("Diplay Battery Voltage in Comment ? (Y/N)");
;PCODE: $000007BF VOL: 0
;PCODE: $000007C0 VOL: 0
;PCODE: $000007C1 VOL: 0
;PCODE: $000007C2 VOL: 0
;PCODE: $000007C3 VOL: 0
;PCODE: $000007C4 VOL: 0
;PCODE: $000007C5 VOL: 0
; 0000 0249         putchar(9);putchar(9);putchar(':');
;PCODE: $000007C6 VOL: 0
;PCODE: $000007C7 VOL: 0
;PCODE: $000007C8 VOL: 0
;PCODE: $000007C9 VOL: 0
;PCODE: $000007CA VOL: 0
;PCODE: $000007CB VOL: 0
;PCODE: $000007CC VOL: 0
;PCODE: $000007CD VOL: 0
;PCODE: $000007CE VOL: 0
; 0000 024A         putchar(battvoltincomm);
;PCODE: $000007CF VOL: 0
;PCODE: $000007D0 VOL: 0
;PCODE: $000007D1 VOL: 0
;PCODE: $000007D2 VOL: 0
; 0000 024B 
; 0000 024C         // temperature
; 0000 024D         putchar(13);putsf("Diplay Temperature in Comment ? (Y/N)");
;PCODE: $000007D3 VOL: 0
;PCODE: $000007D4 VOL: 0
;PCODE: $000007D5 VOL: 0
;PCODE: $000007D6 VOL: 0
;PCODE: $000007D7 VOL: 0
;PCODE: $000007D8 VOL: 0
;PCODE: $000007D9 VOL: 0
; 0000 024E         putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $000007DA VOL: 0
;PCODE: $000007DB VOL: 0
;PCODE: $000007DC VOL: 0
;PCODE: $000007DD VOL: 0
;PCODE: $000007DE VOL: 0
;PCODE: $000007DF VOL: 0
;PCODE: $000007E0 VOL: 0
;PCODE: $000007E1 VOL: 0
;PCODE: $000007E2 VOL: 0
;PCODE: $000007E3 VOL: 0
;PCODE: $000007E4 VOL: 0
;PCODE: $000007E5 VOL: 0
; 0000 024F         putchar(tempincomm);
;PCODE: $000007E6 VOL: 0
;PCODE: $000007E7 VOL: 0
;PCODE: $000007E8 VOL: 0
;PCODE: $000007E9 VOL: 0
; 0000 0250 
; 0000 0251         // altitude
; 0000 0252         putchar(13);putsf("Send Altitude ? (Y/N)");
;PCODE: $000007EA VOL: 0
;PCODE: $000007EB VOL: 0
;PCODE: $000007EC VOL: 0
;PCODE: $000007ED VOL: 0
;PCODE: $000007EE VOL: 0
;PCODE: $000007EF VOL: 0
;PCODE: $000007F0 VOL: 0
; 0000 0253         putchar(9);putchar(9);putchar(9);putchar(9);putchar(9);putchar(':');
;PCODE: $000007F1 VOL: 0
;PCODE: $000007F2 VOL: 0
;PCODE: $000007F3 VOL: 0
;PCODE: $000007F4 VOL: 0
;PCODE: $000007F5 VOL: 0
;PCODE: $000007F6 VOL: 0
;PCODE: $000007F7 VOL: 0
;PCODE: $000007F8 VOL: 0
;PCODE: $000007F9 VOL: 0
;PCODE: $000007FA VOL: 0
;PCODE: $000007FB VOL: 0
;PCODE: $000007FC VOL: 0
;PCODE: $000007FD VOL: 0
;PCODE: $000007FE VOL: 0
;PCODE: $000007FF VOL: 0
;PCODE: $00000800 VOL: 0
;PCODE: $00000801 VOL: 0
;PCODE: $00000802 VOL: 0
; 0000 0254         putchar(sendalt);
;PCODE: $00000803 VOL: 0
;PCODE: $00000804 VOL: 0
;PCODE: $00000805 VOL: 0
;PCODE: $00000806 VOL: 0
; 0000 0255 
; 0000 0256         // send to PC
; 0000 0257         putchar(13);putsf("Send Temperature and Battery Voltage to PC ? (Y/N)");
;PCODE: $00000807 VOL: 0
;PCODE: $00000808 VOL: 0
;PCODE: $00000809 VOL: 0
;PCODE: $0000080A VOL: 0
;PCODE: $0000080B VOL: 0
;PCODE: $0000080C VOL: 0
;PCODE: $0000080D VOL: 0
; 0000 0258         putchar(9);putchar(':');
;PCODE: $0000080E VOL: 0
;PCODE: $0000080F VOL: 0
;PCODE: $00000810 VOL: 0
;PCODE: $00000811 VOL: 0
;PCODE: $00000812 VOL: 0
;PCODE: $00000813 VOL: 0
; 0000 0259         putchar(sendtopc);
;PCODE: $00000814 VOL: 0
;PCODE: $00000815 VOL: 0
;PCODE: $00000816 VOL: 0
;PCODE: $00000817 VOL: 0
; 0000 025A 
; 0000 025B         MERAH=0;
;PCODE: $00000818 VOL: 0
;PCODE: $00000819 VOL: 0
; 0000 025C         HIJAU=0;
;PCODE: $0000081A VOL: 0
;PCODE: $0000081B VOL: 0
; 0000 025D 
; 0000 025E         #asm("sei")
;PCODE: $0000081C VOL: 0
	sei
;PCODE: $0000081D VOL: 0
; 0000 025F }
;PCODE: $0000081E VOL: 0
;PCODE: $0000081F VOL: 0
;PCODE: $00000820 VOL: 0
;
;void config(void)
; 0000 0262 {
;PCODE: $00000821 VOL: 0
;PCODE: $00000822 VOL: 0
; 0000 0263 	char buffer[500];
; 0000 0264         char dbuff[];
; 0000 0265         char cbuff[];
; 0000 0266         char ibuff[5];
; 0000 0267         int b,j,k,l;
; 0000 0268 
; 0000 0269         #asm("cli")
;PCODE: $00000823 VOL: 0
;PCODE: $00000824 VOL: 0
;	buffer -> Y+13
;	dbuff -> Y+13
;	cbuff -> Y+13
;	ibuff -> Y+8
;	b -> R16,R17
;	j -> R18,R19
;	k -> R20,R21
;	l -> Y+6
;PCODE: $00000825 VOL: 0
	cli
;PCODE: $00000826 VOL: 0
; 0000 026A 
; 0000 026B         MERAH=1;
;PCODE: $00000827 VOL: 0
;PCODE: $00000828 VOL: 0
; 0000 026C         HIJAU=0;
;PCODE: $00000829 VOL: 0
;PCODE: $0000082A VOL: 0
; 0000 026D 
; 0000 026E         b=0;
;PCODE: $0000082B VOL: 0
;PCODE: $0000082C VOL: 0
; 0000 026F 
; 0000 0270         putchar(13);putsf("ENTERING CONFIGURATION MODE...");
;PCODE: $0000082D VOL: 0
;PCODE: $0000082E VOL: 0
;PCODE: $0000082F VOL: 0
;PCODE: $00000830 VOL: 0
;PCODE: $00000831 VOL: 0
;PCODE: $00000832 VOL: 0
;PCODE: $00000833 VOL: 0
; 0000 0271         putchar(13);putsf("CONFIGURE...");
;PCODE: $00000834 VOL: 0
;PCODE: $00000835 VOL: 0
;PCODE: $00000836 VOL: 0
;PCODE: $00000837 VOL: 0
;PCODE: $00000838 VOL: 0
;PCODE: $00000839 VOL: 0
;PCODE: $0000083A VOL: 0
; 0000 0272 
; 0000 0273         // download configuration file
; 0000 0274         waitDollar();
;PCODE: $0000083B VOL: 0
; 0000 0275         waitInvCo();
;PCODE: $0000083C VOL: 0
; 0000 0276         for(;;)
;PCODE: $0000083D VOL: 0
;PCODE: $0000083E VOL: 0
; 0000 0277         {
; 0000 0278         	buffer[b]=getchar();
;PCODE: $0000083F VOL: 0
;PCODE: $00000840 VOL: 0
;PCODE: $00000841 VOL: 0
;PCODE: $00000842 VOL: 0
;PCODE: $00000843 VOL: 0
;PCODE: $00000844 VOL: 0
;PCODE: $00000845 VOL: 0
; 0000 0279                 if(buffer[b]=='$')goto rxd_selesai;
;PCODE: $00000846 VOL: 0
;PCODE: $00000847 VOL: 0
;PCODE: $00000848 VOL: 0
;PCODE: $00000849 VOL: 0
;PCODE: $0000084A VOL: 0
;PCODE: $0000084B VOL: 0
; 0000 027A                 if(buffer[b]=='"')waitInvCo();
;PCODE: $0000084C VOL: 0
;PCODE: $0000084D VOL: 0
;PCODE: $0000084E VOL: 0
;PCODE: $0000084F VOL: 0
;PCODE: $00000850 VOL: 0
;PCODE: $00000851 VOL: 0
;PCODE: $00000852 VOL: 0
; 0000 027B                 putchar('.');
;PCODE: $00000853 VOL: 0
;PCODE: $00000854 VOL: 0
;PCODE: $00000855 VOL: 0
;PCODE: $00000856 VOL: 0
; 0000 027C                 b++;
;PCODE: $00000857 VOL: 0
;PCODE: $00000858 VOL: 0
; 0000 027D         }
;PCODE: $00000859 VOL: 0
;PCODE: $0000085A VOL: 0
;PCODE: $0000085B VOL: 0
; 0000 027E         rxd_selesai:
;PCODE: $0000085C VOL: 0
; 0000 027F         // config file downloaded
; 0000 0280         //j=b;
; 0000 0281 
; 0000 0282         putchar(13);putsf("SAVING CONFIGURATION...");
;PCODE: $0000085D VOL: 0
;PCODE: $0000085E VOL: 0
;PCODE: $0000085F VOL: 0
;PCODE: $00000860 VOL: 0
;PCODE: $00000861 VOL: 0
;PCODE: $00000862 VOL: 0
;PCODE: $00000863 VOL: 0
; 0000 0283 
; 0000 0284         // mycall
; 0000 0285         b=0;
;PCODE: $00000864 VOL: 0
;PCODE: $00000865 VOL: 0
; 0000 0286         k=0;
;PCODE: $00000866 VOL: 0
;PCODE: $00000867 VOL: 0
; 0000 0287         while(buffer[b]!='"') 				//<--- move data from rxbuffer to databuffer
;PCODE: $00000868 VOL: 0
;PCODE: $00000869 VOL: 0
;PCODE: $0000086A VOL: 0
;PCODE: $0000086B VOL: 0
;PCODE: $0000086C VOL: 0
;PCODE: $0000086D VOL: 0
; 0000 0288         {
; 0000 0289         	cbuff[k]=buffer[b];
;PCODE: $0000086E VOL: 0
;PCODE: $0000086F VOL: 0
;PCODE: $00000870 VOL: 0
;PCODE: $00000871 VOL: 0
;PCODE: $00000872 VOL: 0
;PCODE: $00000873 VOL: 0
;PCODE: $00000874 VOL: 0
;PCODE: $00000875 VOL: 0
;PCODE: $00000876 VOL: 0
; 0000 028A                 k++;
;PCODE: $00000877 VOL: 0
;PCODE: $00000878 VOL: 0
; 0000 028B                 b++;
;PCODE: $00000879 VOL: 0
;PCODE: $0000087A VOL: 0
; 0000 028C         }
;PCODE: $0000087B VOL: 0
;PCODE: $0000087C VOL: 0
; 0000 028D         j=b+1; 						// j = index , atau "   j+b = index next data field
;PCODE: $0000087D VOL: 0
;PCODE: $0000087E VOL: 0
;PCODE: $0000087F VOL: 0
; 0000 028E 
; 0000 028F         // pada titik ini, k adalah ukuran array 1st digi string
; 0000 0290         l=k;
;PCODE: $00000880 VOL: 0
;PCODE: $00000881 VOL: 0
; 0000 0291         for(k=0;k<6;k++)mycall[k]=' '; 			//<--- resetting mycall
;PCODE: $00000882 VOL: 0
;PCODE: $00000883 VOL: 0
;PCODE: $00000884 VOL: 0
;PCODE: $00000885 VOL: 0
;PCODE: $00000886 VOL: 0
;PCODE: $00000887 VOL: 0
;PCODE: $00000888 VOL: 0
;PCODE: $00000889 VOL: 0
;PCODE: $0000088A VOL: 0
;PCODE: $0000088B VOL: 0
;PCODE: $0000088C VOL: 0
;PCODE: $0000088D VOL: 0
;PCODE: $0000088E VOL: 0
;PCODE: $0000088F VOL: 0
;PCODE: $00000890 VOL: 0
;PCODE: $00000891 VOL: 0
;PCODE: $00000892 VOL: 0
;PCODE: $00000893 VOL: 0
; 0000 0292 mycall[6]='0';
;PCODE: $00000894 VOL: 0
;PCODE: $00000895 VOL: 0
;PCODE: $00000896 VOL: 0
;PCODE: $00000897 VOL: 0
; 0000 0293         for(k=0;k<l;k++)
;PCODE: $00000898 VOL: 0
;PCODE: $00000899 VOL: 0
;PCODE: $0000089A VOL: 0
;PCODE: $0000089B VOL: 0
;PCODE: $0000089C VOL: 0
;PCODE: $0000089D VOL: 0
;PCODE: $0000089E VOL: 0
;PCODE: $0000089F VOL: 0
;PCODE: $000008A0 VOL: 0
; 0000 0294         {
; 0000 0295         	if(cbuff[k]=='-')
;PCODE: $000008A1 VOL: 0
;PCODE: $000008A2 VOL: 0
;PCODE: $000008A3 VOL: 0
;PCODE: $000008A4 VOL: 0
;PCODE: $000008A5 VOL: 0
; 0000 0296                 {
; 0000 0297                 	if((l-k)==2)
;PCODE: $000008A6 VOL: 0
;PCODE: $000008A7 VOL: 0
;PCODE: $000008A8 VOL: 0
;PCODE: $000008A9 VOL: 0
; 0000 0298                         {
; 0000 0299                         	mycall[6]=cbuff[k+1];
;PCODE: $000008AA VOL: 0
;PCODE: $000008AB VOL: 0
;PCODE: $000008AC VOL: 0
;PCODE: $000008AD VOL: 0
;PCODE: $000008AE VOL: 0
;PCODE: $000008AF VOL: 0
;PCODE: $000008B0 VOL: 0
;PCODE: $000008B1 VOL: 0
;PCODE: $000008B2 VOL: 0
;PCODE: $000008B3 VOL: 0
; 0000 029A                                 goto selesai_mycall;
;PCODE: $000008B4 VOL: 0
; 0000 029B                         }
; 0000 029C                         else if((l-k)==3)
;PCODE: $000008B5 VOL: 0
;PCODE: $000008B6 VOL: 0
;PCODE: $000008B7 VOL: 0
;PCODE: $000008B8 VOL: 0
;PCODE: $000008B9 VOL: 0
; 0000 029D                         {
; 0000 029E                         	mycall[6]=((10*(cbuff[k+1]-48)+cbuff[k+2]-48)+48);
;PCODE: $000008BA VOL: 0
;PCODE: $000008BB VOL: 0
;PCODE: $000008BC VOL: 0
;PCODE: $000008BD VOL: 0
;PCODE: $000008BE VOL: 0
;PCODE: $000008BF VOL: 0
;PCODE: $000008C0 VOL: 0
;PCODE: $000008C1 VOL: 0
;PCODE: $000008C2 VOL: 0
;PCODE: $000008C3 VOL: 0
;PCODE: $000008C4 VOL: 0
;PCODE: $000008C5 VOL: 0
;PCODE: $000008C6 VOL: 0
;PCODE: $000008C7 VOL: 0
;PCODE: $000008C8 VOL: 0
;PCODE: $000008C9 VOL: 0
;PCODE: $000008CA VOL: 0
;PCODE: $000008CB VOL: 0
;PCODE: $000008CC VOL: 0
;PCODE: $000008CD VOL: 0
;PCODE: $000008CE VOL: 0
;PCODE: $000008CF VOL: 0
;PCODE: $000008D0 VOL: 0
;PCODE: $000008D1 VOL: 0
;PCODE: $000008D2 VOL: 0
; 0000 029F                         	goto selesai_mycall;
;PCODE: $000008D3 VOL: 0
; 0000 02A0                         }
; 0000 02A1                 }
;PCODE: $000008D4 VOL: 0
;PCODE: $000008D5 VOL: 0
; 0000 02A2                 mycall[k]=cbuff[k];
;PCODE: $000008D6 VOL: 0
;PCODE: $000008D7 VOL: 0
;PCODE: $000008D8 VOL: 0
;PCODE: $000008D9 VOL: 0
;PCODE: $000008DA VOL: 0
;PCODE: $000008DB VOL: 0
;PCODE: $000008DC VOL: 0
;PCODE: $000008DD VOL: 0
;PCODE: $000008DE VOL: 0
; 0000 02A3         }
;PCODE: $000008DF VOL: 0
;PCODE: $000008E0 VOL: 0
;PCODE: $000008E1 VOL: 0
;PCODE: $000008E2 VOL: 0
;PCODE: $000008E3 VOL: 0
; 0000 02A4         selesai_mycall:
;PCODE: $000008E4 VOL: 0
; 0000 02A5 
; 0000 02A6         //1st digi
; 0000 02A7         b=j;
;PCODE: $000008E5 VOL: 0
;PCODE: $000008E6 VOL: 0
; 0000 02A8         k=0;
;PCODE: $000008E7 VOL: 0
;PCODE: $000008E8 VOL: 0
; 0000 02A9         while((buffer[b]!='"')&&(buffer[b]!=',')) 	//<--- move data from rxbuffer to databuffer
;PCODE: $000008E9 VOL: 0
;PCODE: $000008EA VOL: 0
;PCODE: $000008EB VOL: 0
;PCODE: $000008EC VOL: 0
;PCODE: $000008ED VOL: 0
;PCODE: $000008EE VOL: 0
;PCODE: $000008EF VOL: 0
;PCODE: $000008F0 VOL: 0
;PCODE: $000008F1 VOL: 0
;PCODE: $000008F2 VOL: 0
;PCODE: $000008F3 VOL: 0
;PCODE: $000008F4 VOL: 0
;PCODE: $000008F5 VOL: 0
;PCODE: $000008F6 VOL: 0
;PCODE: $000008F7 VOL: 0
; 0000 02AA         {
; 0000 02AB         	dbuff[k]=buffer[b];
;PCODE: $000008F8 VOL: 0
;PCODE: $000008F9 VOL: 0
;PCODE: $000008FA VOL: 0
;PCODE: $000008FB VOL: 0
;PCODE: $000008FC VOL: 0
;PCODE: $000008FD VOL: 0
;PCODE: $000008FE VOL: 0
;PCODE: $000008FF VOL: 0
;PCODE: $00000900 VOL: 0
; 0000 02AC                 k++;
;PCODE: $00000901 VOL: 0
;PCODE: $00000902 VOL: 0
; 0000 02AD                 b++;
;PCODE: $00000903 VOL: 0
;PCODE: $00000904 VOL: 0
; 0000 02AE         }
;PCODE: $00000905 VOL: 0
;PCODE: $00000906 VOL: 0
; 0000 02AF         j=b+1; 						// j = index , atau "   j+b = index next data field
;PCODE: $00000907 VOL: 0
;PCODE: $00000908 VOL: 0
;PCODE: $00000909 VOL: 0
; 0000 02B0 
; 0000 02B1         // pada titik ini, k adalah ukuran array 1st digi string
; 0000 02B2         l=k;
;PCODE: $0000090A VOL: 0
;PCODE: $0000090B VOL: 0
; 0000 02B3         for(k=0;k<6;k++)mydigi1[k]=' '; 		//<--- resetting digi call
;PCODE: $0000090C VOL: 0
;PCODE: $0000090D VOL: 0
;PCODE: $0000090E VOL: 0
;PCODE: $0000090F VOL: 0
;PCODE: $00000910 VOL: 0
;PCODE: $00000911 VOL: 0
;PCODE: $00000912 VOL: 0
;PCODE: $00000913 VOL: 0
;PCODE: $00000914 VOL: 0
;PCODE: $00000915 VOL: 0
;PCODE: $00000916 VOL: 0
;PCODE: $00000917 VOL: 0
;PCODE: $00000918 VOL: 0
;PCODE: $00000919 VOL: 0
;PCODE: $0000091A VOL: 0
;PCODE: $0000091B VOL: 0
;PCODE: $0000091C VOL: 0
;PCODE: $0000091D VOL: 0
; 0000 02B4 for(k=0;k<7;k++)mydigi2[k]=' ';
;PCODE: $0000091E VOL: 0
;PCODE: $0000091F VOL: 0
;PCODE: $00000920 VOL: 0
;PCODE: $00000921 VOL: 0
;PCODE: $00000922 VOL: 0
;PCODE: $00000923 VOL: 0
;PCODE: $00000924 VOL: 0
;PCODE: $00000925 VOL: 0
;PCODE: $00000926 VOL: 0
;PCODE: $00000927 VOL: 0
;PCODE: $00000928 VOL: 0
;PCODE: $00000929 VOL: 0
;PCODE: $0000092A VOL: 0
;PCODE: $0000092B VOL: 0
;PCODE: $0000092C VOL: 0
;PCODE: $0000092D VOL: 0
;PCODE: $0000092E VOL: 0
;PCODE: $0000092F VOL: 0
; 0000 02B5 for(k=0;k<7;k++)mydigi3[k]=' ';
;PCODE: $00000930 VOL: 0
;PCODE: $00000931 VOL: 0
;PCODE: $00000932 VOL: 0
;PCODE: $00000933 VOL: 0
;PCODE: $00000934 VOL: 0
;PCODE: $00000935 VOL: 0
;PCODE: $00000936 VOL: 0
;PCODE: $00000937 VOL: 0
;PCODE: $00000938 VOL: 0
;PCODE: $00000939 VOL: 0
;PCODE: $0000093A VOL: 0
;PCODE: $0000093B VOL: 0
;PCODE: $0000093C VOL: 0
;PCODE: $0000093D VOL: 0
;PCODE: $0000093E VOL: 0
;PCODE: $0000093F VOL: 0
;PCODE: $00000940 VOL: 0
;PCODE: $00000941 VOL: 0
; 0000 02B6 mydigi1[6]='0';
;PCODE: $00000942 VOL: 0
;PCODE: $00000943 VOL: 0
;PCODE: $00000944 VOL: 0
;PCODE: $00000945 VOL: 0
; 0000 02B7         mydigi2[6]='0';
;PCODE: $00000946 VOL: 0
;PCODE: $00000947 VOL: 0
;PCODE: $00000948 VOL: 0
;PCODE: $00000949 VOL: 0
; 0000 02B8         mydigi3[6]='0';
;PCODE: $0000094A VOL: 0
;PCODE: $0000094B VOL: 0
;PCODE: $0000094C VOL: 0
;PCODE: $0000094D VOL: 0
; 0000 02B9         mydigi1[0]=0;
;PCODE: $0000094E VOL: 0
;PCODE: $0000094F VOL: 0
;PCODE: $00000950 VOL: 0
; 0000 02BA         mydigi2[0]=0;
;PCODE: $00000951 VOL: 0
;PCODE: $00000952 VOL: 0
;PCODE: $00000953 VOL: 0
; 0000 02BB         mydigi3[0]=0;
;PCODE: $00000954 VOL: 0
;PCODE: $00000955 VOL: 0
;PCODE: $00000956 VOL: 0
; 0000 02BC         if(l<2)goto time_interval;			//<--- jika tidak menggunakan digi
;PCODE: $00000957 VOL: 0
;PCODE: $00000958 VOL: 0
;PCODE: $00000959 VOL: 0
;PCODE: $0000095A VOL: 0
; 0000 02BD         for(k=0;k<l;k++)
;PCODE: $0000095B VOL: 0
;PCODE: $0000095C VOL: 0
;PCODE: $0000095D VOL: 0
;PCODE: $0000095E VOL: 0
;PCODE: $0000095F VOL: 0
;PCODE: $00000960 VOL: 0
;PCODE: $00000961 VOL: 0
;PCODE: $00000962 VOL: 0
;PCODE: $00000963 VOL: 0
;PCODE: $00000964 VOL: 0
; 0000 02BE         {
; 0000 02BF         	if(dbuff[k]=='-')
;PCODE: $00000965 VOL: 0
;PCODE: $00000966 VOL: 0
;PCODE: $00000967 VOL: 0
;PCODE: $00000968 VOL: 0
;PCODE: $00000969 VOL: 0
; 0000 02C0                 {
; 0000 02C1                 	if((l-k)==2)
;PCODE: $0000096A VOL: 0
;PCODE: $0000096B VOL: 0
;PCODE: $0000096C VOL: 0
;PCODE: $0000096D VOL: 0
; 0000 02C2                         {
; 0000 02C3                         	mydigi1[6]=dbuff[k+1];
;PCODE: $0000096E VOL: 0
;PCODE: $0000096F VOL: 0
;PCODE: $00000970 VOL: 0
;PCODE: $00000971 VOL: 0
;PCODE: $00000972 VOL: 0
;PCODE: $00000973 VOL: 0
;PCODE: $00000974 VOL: 0
;PCODE: $00000975 VOL: 0
;PCODE: $00000976 VOL: 0
;PCODE: $00000977 VOL: 0
; 0000 02C4                                 goto selesai_myssid1;
;PCODE: $00000978 VOL: 0
; 0000 02C5                         }
; 0000 02C6                         else if((l-k)==3)
;PCODE: $00000979 VOL: 0
;PCODE: $0000097A VOL: 0
;PCODE: $0000097B VOL: 0
;PCODE: $0000097C VOL: 0
;PCODE: $0000097D VOL: 0
; 0000 02C7                         {
; 0000 02C8                         	mydigi1[6]=(10*(dbuff[k+1]-48)+dbuff[k+2]-48)+48;
;PCODE: $0000097E VOL: 0
;PCODE: $0000097F VOL: 0
;PCODE: $00000980 VOL: 0
;PCODE: $00000981 VOL: 0
;PCODE: $00000982 VOL: 0
;PCODE: $00000983 VOL: 0
;PCODE: $00000984 VOL: 0
;PCODE: $00000985 VOL: 0
;PCODE: $00000986 VOL: 0
;PCODE: $00000987 VOL: 0
;PCODE: $00000988 VOL: 0
;PCODE: $00000989 VOL: 0
;PCODE: $0000098A VOL: 0
;PCODE: $0000098B VOL: 0
;PCODE: $0000098C VOL: 0
;PCODE: $0000098D VOL: 0
;PCODE: $0000098E VOL: 0
;PCODE: $0000098F VOL: 0
;PCODE: $00000990 VOL: 0
;PCODE: $00000991 VOL: 0
;PCODE: $00000992 VOL: 0
;PCODE: $00000993 VOL: 0
;PCODE: $00000994 VOL: 0
;PCODE: $00000995 VOL: 0
;PCODE: $00000996 VOL: 0
; 0000 02C9                         	goto selesai_myssid1;
;PCODE: $00000997 VOL: 0
; 0000 02CA                         }
; 0000 02CB                 }
;PCODE: $00000998 VOL: 0
;PCODE: $00000999 VOL: 0
; 0000 02CC                 mydigi1[k]=dbuff[k];
;PCODE: $0000099A VOL: 0
;PCODE: $0000099B VOL: 0
;PCODE: $0000099C VOL: 0
;PCODE: $0000099D VOL: 0
;PCODE: $0000099E VOL: 0
;PCODE: $0000099F VOL: 0
;PCODE: $000009A0 VOL: 0
;PCODE: $000009A1 VOL: 0
;PCODE: $000009A2 VOL: 0
; 0000 02CD         }
;PCODE: $000009A3 VOL: 0
;PCODE: $000009A4 VOL: 0
;PCODE: $000009A5 VOL: 0
;PCODE: $000009A6 VOL: 0
;PCODE: $000009A7 VOL: 0
; 0000 02CE         selesai_myssid1:
;PCODE: $000009A8 VOL: 0
; 0000 02CF         if(buffer[b]=='"')goto time_interval;
;PCODE: $000009A9 VOL: 0
;PCODE: $000009AA VOL: 0
;PCODE: $000009AB VOL: 0
;PCODE: $000009AC VOL: 0
;PCODE: $000009AD VOL: 0
;PCODE: $000009AE VOL: 0
; 0000 02D0 
; 0000 02D1 	// 2nd digi
; 0000 02D2         b=j;
;PCODE: $000009AF VOL: 0
;PCODE: $000009B0 VOL: 0
;PCODE: $000009B1 VOL: 0
; 0000 02D3         k=0;
;PCODE: $000009B2 VOL: 0
;PCODE: $000009B3 VOL: 0
; 0000 02D4         while((buffer[b]!='"')&&(buffer[b]!=',')) //<--- move data from rxbuffer to databuffer
;PCODE: $000009B4 VOL: 0
;PCODE: $000009B5 VOL: 0
;PCODE: $000009B6 VOL: 0
;PCODE: $000009B7 VOL: 0
;PCODE: $000009B8 VOL: 0
;PCODE: $000009B9 VOL: 0
;PCODE: $000009BA VOL: 0
;PCODE: $000009BB VOL: 0
;PCODE: $000009BC VOL: 0
;PCODE: $000009BD VOL: 0
;PCODE: $000009BE VOL: 0
;PCODE: $000009BF VOL: 0
;PCODE: $000009C0 VOL: 0
;PCODE: $000009C1 VOL: 0
;PCODE: $000009C2 VOL: 0
; 0000 02D5         {
; 0000 02D6         	dbuff[k]=buffer[b];
;PCODE: $000009C3 VOL: 0
;PCODE: $000009C4 VOL: 0
;PCODE: $000009C5 VOL: 0
;PCODE: $000009C6 VOL: 0
;PCODE: $000009C7 VOL: 0
;PCODE: $000009C8 VOL: 0
;PCODE: $000009C9 VOL: 0
;PCODE: $000009CA VOL: 0
;PCODE: $000009CB VOL: 0
; 0000 02D7                 k++;
;PCODE: $000009CC VOL: 0
;PCODE: $000009CD VOL: 0
; 0000 02D8                 b++;
;PCODE: $000009CE VOL: 0
;PCODE: $000009CF VOL: 0
; 0000 02D9         }
;PCODE: $000009D0 VOL: 0
;PCODE: $000009D1 VOL: 0
; 0000 02DA         j=b+1; 		// j = index , atau "   j+b = index next data field
;PCODE: $000009D2 VOL: 0
;PCODE: $000009D3 VOL: 0
;PCODE: $000009D4 VOL: 0
; 0000 02DB 
; 0000 02DC         // pada titik ini, k adalah ukuran array 2nd digi string
; 0000 02DD         l=k;
;PCODE: $000009D5 VOL: 0
;PCODE: $000009D6 VOL: 0
; 0000 02DE         for(k=0;k<l;k++)
;PCODE: $000009D7 VOL: 0
;PCODE: $000009D8 VOL: 0
;PCODE: $000009D9 VOL: 0
;PCODE: $000009DA VOL: 0
;PCODE: $000009DB VOL: 0
;PCODE: $000009DC VOL: 0
;PCODE: $000009DD VOL: 0
;PCODE: $000009DE VOL: 0
;PCODE: $000009DF VOL: 0
; 0000 02DF         {
; 0000 02E0         	if(dbuff[k]=='-')
;PCODE: $000009E0 VOL: 0
;PCODE: $000009E1 VOL: 0
;PCODE: $000009E2 VOL: 0
;PCODE: $000009E3 VOL: 0
;PCODE: $000009E4 VOL: 0
; 0000 02E1                 {
; 0000 02E2                 	if((l-k)==2)
;PCODE: $000009E5 VOL: 0
;PCODE: $000009E6 VOL: 0
;PCODE: $000009E7 VOL: 0
;PCODE: $000009E8 VOL: 0
; 0000 02E3                         {
; 0000 02E4                         	mydigi2[6]=dbuff[k+1];
;PCODE: $000009E9 VOL: 0
;PCODE: $000009EA VOL: 0
;PCODE: $000009EB VOL: 0
;PCODE: $000009EC VOL: 0
;PCODE: $000009ED VOL: 0
;PCODE: $000009EE VOL: 0
;PCODE: $000009EF VOL: 0
;PCODE: $000009F0 VOL: 0
;PCODE: $000009F1 VOL: 0
;PCODE: $000009F2 VOL: 0
; 0000 02E5                                 goto selesai_myssid2;
;PCODE: $000009F3 VOL: 0
; 0000 02E6                         }
; 0000 02E7                         else if((l-k)==3)
;PCODE: $000009F4 VOL: 0
;PCODE: $000009F5 VOL: 0
;PCODE: $000009F6 VOL: 0
;PCODE: $000009F7 VOL: 0
;PCODE: $000009F8 VOL: 0
; 0000 02E8                         {
; 0000 02E9                         	mydigi2[6]=(10*(dbuff[k+1]-48)+dbuff[k+2]-48)+48;
;PCODE: $000009F9 VOL: 0
;PCODE: $000009FA VOL: 0
;PCODE: $000009FB VOL: 0
;PCODE: $000009FC VOL: 0
;PCODE: $000009FD VOL: 0
;PCODE: $000009FE VOL: 0
;PCODE: $000009FF VOL: 0
;PCODE: $00000A00 VOL: 0
;PCODE: $00000A01 VOL: 0
;PCODE: $00000A02 VOL: 0
;PCODE: $00000A03 VOL: 0
;PCODE: $00000A04 VOL: 0
;PCODE: $00000A05 VOL: 0
;PCODE: $00000A06 VOL: 0
;PCODE: $00000A07 VOL: 0
;PCODE: $00000A08 VOL: 0
;PCODE: $00000A09 VOL: 0
;PCODE: $00000A0A VOL: 0
;PCODE: $00000A0B VOL: 0
;PCODE: $00000A0C VOL: 0
;PCODE: $00000A0D VOL: 0
;PCODE: $00000A0E VOL: 0
;PCODE: $00000A0F VOL: 0
;PCODE: $00000A10 VOL: 0
;PCODE: $00000A11 VOL: 0
; 0000 02EA                         	goto selesai_myssid2;
;PCODE: $00000A12 VOL: 0
; 0000 02EB                         }
; 0000 02EC                 }
;PCODE: $00000A13 VOL: 0
;PCODE: $00000A14 VOL: 0
; 0000 02ED                 mydigi2[k]=dbuff[k];
;PCODE: $00000A15 VOL: 0
;PCODE: $00000A16 VOL: 0
;PCODE: $00000A17 VOL: 0
;PCODE: $00000A18 VOL: 0
;PCODE: $00000A19 VOL: 0
;PCODE: $00000A1A VOL: 0
;PCODE: $00000A1B VOL: 0
;PCODE: $00000A1C VOL: 0
;PCODE: $00000A1D VOL: 0
; 0000 02EE         }
;PCODE: $00000A1E VOL: 0
;PCODE: $00000A1F VOL: 0
;PCODE: $00000A20 VOL: 0
;PCODE: $00000A21 VOL: 0
;PCODE: $00000A22 VOL: 0
; 0000 02EF         selesai_myssid2:
;PCODE: $00000A23 VOL: 0
; 0000 02F0 	if(buffer[b]=='"')goto time_interval;
;PCODE: $00000A24 VOL: 0
;PCODE: $00000A25 VOL: 0
;PCODE: $00000A26 VOL: 0
;PCODE: $00000A27 VOL: 0
;PCODE: $00000A28 VOL: 0
;PCODE: $00000A29 VOL: 0
; 0000 02F1 
; 0000 02F2         // 3rd digi
; 0000 02F3        	b=j;
;PCODE: $00000A2A VOL: 0
;PCODE: $00000A2B VOL: 0
;PCODE: $00000A2C VOL: 0
; 0000 02F4         k=0;
;PCODE: $00000A2D VOL: 0
;PCODE: $00000A2E VOL: 0
; 0000 02F5         while(buffer[b]!='"') 			//<--- move data from rxbuffer to databuffer
;PCODE: $00000A2F VOL: 0
;PCODE: $00000A30 VOL: 0
;PCODE: $00000A31 VOL: 0
;PCODE: $00000A32 VOL: 0
;PCODE: $00000A33 VOL: 0
;PCODE: $00000A34 VOL: 0
; 0000 02F6         {
; 0000 02F7         	dbuff[k]=buffer[b];
;PCODE: $00000A35 VOL: 0
;PCODE: $00000A36 VOL: 0
;PCODE: $00000A37 VOL: 0
;PCODE: $00000A38 VOL: 0
;PCODE: $00000A39 VOL: 0
;PCODE: $00000A3A VOL: 0
;PCODE: $00000A3B VOL: 0
;PCODE: $00000A3C VOL: 0
;PCODE: $00000A3D VOL: 0
; 0000 02F8                 k++;
;PCODE: $00000A3E VOL: 0
;PCODE: $00000A3F VOL: 0
; 0000 02F9                 b++;
;PCODE: $00000A40 VOL: 0
;PCODE: $00000A41 VOL: 0
; 0000 02FA         }
;PCODE: $00000A42 VOL: 0
;PCODE: $00000A43 VOL: 0
; 0000 02FB         j=b+1; 		// b = index , atau "   j+1 = index next data field
;PCODE: $00000A44 VOL: 0
;PCODE: $00000A45 VOL: 0
;PCODE: $00000A46 VOL: 0
; 0000 02FC 
; 0000 02FD         // pada titik ini, k adalah ukuran array 3rd digi string
; 0000 02FE         l=k;
;PCODE: $00000A47 VOL: 0
;PCODE: $00000A48 VOL: 0
; 0000 02FF         for(k=0;k<l;k++)
;PCODE: $00000A49 VOL: 0
;PCODE: $00000A4A VOL: 0
;PCODE: $00000A4B VOL: 0
;PCODE: $00000A4C VOL: 0
;PCODE: $00000A4D VOL: 0
;PCODE: $00000A4E VOL: 0
;PCODE: $00000A4F VOL: 0
;PCODE: $00000A50 VOL: 0
;PCODE: $00000A51 VOL: 0
; 0000 0300         {
; 0000 0301         	if(dbuff[k]=='-')
;PCODE: $00000A52 VOL: 0
;PCODE: $00000A53 VOL: 0
;PCODE: $00000A54 VOL: 0
;PCODE: $00000A55 VOL: 0
;PCODE: $00000A56 VOL: 0
; 0000 0302                 {
; 0000 0303                 	if((l-k)==2)
;PCODE: $00000A57 VOL: 0
;PCODE: $00000A58 VOL: 0
;PCODE: $00000A59 VOL: 0
;PCODE: $00000A5A VOL: 0
; 0000 0304                         {
; 0000 0305                         	mydigi3[6]=dbuff[k+1];
;PCODE: $00000A5B VOL: 0
;PCODE: $00000A5C VOL: 0
;PCODE: $00000A5D VOL: 0
;PCODE: $00000A5E VOL: 0
;PCODE: $00000A5F VOL: 0
;PCODE: $00000A60 VOL: 0
;PCODE: $00000A61 VOL: 0
;PCODE: $00000A62 VOL: 0
;PCODE: $00000A63 VOL: 0
;PCODE: $00000A64 VOL: 0
; 0000 0306                                 goto selesai_myssid3;
;PCODE: $00000A65 VOL: 0
; 0000 0307                         }
; 0000 0308                         else if((l-k)==3)
;PCODE: $00000A66 VOL: 0
;PCODE: $00000A67 VOL: 0
;PCODE: $00000A68 VOL: 0
;PCODE: $00000A69 VOL: 0
;PCODE: $00000A6A VOL: 0
; 0000 0309                         {
; 0000 030A                         	mydigi3[6]=(10*(dbuff[k+1]-48)+dbuff[k+2]-48)+48;
;PCODE: $00000A6B VOL: 0
;PCODE: $00000A6C VOL: 0
;PCODE: $00000A6D VOL: 0
;PCODE: $00000A6E VOL: 0
;PCODE: $00000A6F VOL: 0
;PCODE: $00000A70 VOL: 0
;PCODE: $00000A71 VOL: 0
;PCODE: $00000A72 VOL: 0
;PCODE: $00000A73 VOL: 0
;PCODE: $00000A74 VOL: 0
;PCODE: $00000A75 VOL: 0
;PCODE: $00000A76 VOL: 0
;PCODE: $00000A77 VOL: 0
;PCODE: $00000A78 VOL: 0
;PCODE: $00000A79 VOL: 0
;PCODE: $00000A7A VOL: 0
;PCODE: $00000A7B VOL: 0
;PCODE: $00000A7C VOL: 0
;PCODE: $00000A7D VOL: 0
;PCODE: $00000A7E VOL: 0
;PCODE: $00000A7F VOL: 0
;PCODE: $00000A80 VOL: 0
;PCODE: $00000A81 VOL: 0
;PCODE: $00000A82 VOL: 0
;PCODE: $00000A83 VOL: 0
; 0000 030B                         	goto selesai_myssid3;
;PCODE: $00000A84 VOL: 0
; 0000 030C                         }
; 0000 030D                 }
;PCODE: $00000A85 VOL: 0
;PCODE: $00000A86 VOL: 0
; 0000 030E                 mydigi3[k]=dbuff[k];
;PCODE: $00000A87 VOL: 0
;PCODE: $00000A88 VOL: 0
;PCODE: $00000A89 VOL: 0
;PCODE: $00000A8A VOL: 0
;PCODE: $00000A8B VOL: 0
;PCODE: $00000A8C VOL: 0
;PCODE: $00000A8D VOL: 0
;PCODE: $00000A8E VOL: 0
;PCODE: $00000A8F VOL: 0
; 0000 030F         }
;PCODE: $00000A90 VOL: 0
;PCODE: $00000A91 VOL: 0
;PCODE: $00000A92 VOL: 0
;PCODE: $00000A93 VOL: 0
;PCODE: $00000A94 VOL: 0
; 0000 0310         selesai_myssid3:
;PCODE: $00000A95 VOL: 0
; 0000 0311 
; 0000 0312         time_interval:
;PCODE: $00000A96 VOL: 0
; 0000 0313         //time interval
; 0000 0314         b=j;
;PCODE: $00000A97 VOL: 0
;PCODE: $00000A98 VOL: 0
; 0000 0315         for(k=0;k<sizeof(ibuff);k++)ibuff[k]=0;
;PCODE: $00000A99 VOL: 0
;PCODE: $00000A9A VOL: 0
;PCODE: $00000A9B VOL: 0
;PCODE: $00000A9C VOL: 0
;PCODE: $00000A9D VOL: 0
;PCODE: $00000A9E VOL: 0
;PCODE: $00000A9F VOL: 0
;PCODE: $00000AA0 VOL: 0
;PCODE: $00000AA1 VOL: 0
;PCODE: $00000AA2 VOL: 0
;PCODE: $00000AA3 VOL: 0
;PCODE: $00000AA4 VOL: 0
;PCODE: $00000AA5 VOL: 0
;PCODE: $00000AA6 VOL: 0
;PCODE: $00000AA7 VOL: 0
;PCODE: $00000AA8 VOL: 0
;PCODE: $00000AA9 VOL: 0
;PCODE: $00000AAA VOL: 0
; 0000 0316 k=0;
;PCODE: $00000AAB VOL: 0
;PCODE: $00000AAC VOL: 0
; 0000 0317         while(buffer[b]!='"') 			//<--- move data from rxbuffer to databuffer
;PCODE: $00000AAD VOL: 0
;PCODE: $00000AAE VOL: 0
;PCODE: $00000AAF VOL: 0
;PCODE: $00000AB0 VOL: 0
;PCODE: $00000AB1 VOL: 0
;PCODE: $00000AB2 VOL: 0
; 0000 0318         {
; 0000 0319         	ibuff[k]=buffer[b];
;PCODE: $00000AB3 VOL: 0
;PCODE: $00000AB4 VOL: 0
;PCODE: $00000AB5 VOL: 0
;PCODE: $00000AB6 VOL: 0
;PCODE: $00000AB7 VOL: 0
;PCODE: $00000AB8 VOL: 0
;PCODE: $00000AB9 VOL: 0
;PCODE: $00000ABA VOL: 0
;PCODE: $00000ABB VOL: 0
; 0000 031A                 k++;
;PCODE: $00000ABC VOL: 0
;PCODE: $00000ABD VOL: 0
; 0000 031B                 b++;
;PCODE: $00000ABE VOL: 0
;PCODE: $00000ABF VOL: 0
; 0000 031C         }
;PCODE: $00000AC0 VOL: 0
;PCODE: $00000AC1 VOL: 0
; 0000 031D         j=b+1;
;PCODE: $00000AC2 VOL: 0
;PCODE: $00000AC3 VOL: 0
;PCODE: $00000AC4 VOL: 0
; 0000 031E         timeIntv=atoi(ibuff);
;PCODE: $00000AC5 VOL: 0
;PCODE: $00000AC6 VOL: 0
;PCODE: $00000AC7 VOL: 0
;PCODE: $00000AC8 VOL: 0
;PCODE: $00000AC9 VOL: 0
; 0000 031F 
; 0000 0320         //symbol code
; 0000 0321         b=j;
;PCODE: $00000ACA VOL: 0
;PCODE: $00000ACB VOL: 0
; 0000 0322         SYM_CODE_=buffer[b];
;PCODE: $00000ACC VOL: 0
;PCODE: $00000ACD VOL: 0
;PCODE: $00000ACE VOL: 0
;PCODE: $00000ACF VOL: 0
;PCODE: $00000AD0 VOL: 0
; 0000 0323         j=b+2;
;PCODE: $00000AD1 VOL: 0
;PCODE: $00000AD2 VOL: 0
;PCODE: $00000AD3 VOL: 0
; 0000 0324 
; 0000 0325         //symbol table
; 0000 0326         b=j;
;PCODE: $00000AD4 VOL: 0
;PCODE: $00000AD5 VOL: 0
; 0000 0327         SYM_TAB_OVL_=buffer[b];
;PCODE: $00000AD6 VOL: 0
;PCODE: $00000AD7 VOL: 0
;PCODE: $00000AD8 VOL: 0
;PCODE: $00000AD9 VOL: 0
;PCODE: $00000ADA VOL: 0
; 0000 0328         j=b+2;
;PCODE: $00000ADB VOL: 0
;PCODE: $00000ADC VOL: 0
;PCODE: $00000ADD VOL: 0
; 0000 0329 
; 0000 032A         //comment
; 0000 032B         b=j;
;PCODE: $00000ADE VOL: 0
;PCODE: $00000ADF VOL: 0
; 0000 032C         for(k=0;k<commsize;k++)comment[k]=0;
;PCODE: $00000AE0 VOL: 0
;PCODE: $00000AE1 VOL: 0
;PCODE: $00000AE2 VOL: 0
;PCODE: $00000AE3 VOL: 0
;PCODE: $00000AE4 VOL: 0
;PCODE: $00000AE5 VOL: 0
;PCODE: $00000AE6 VOL: 0
;PCODE: $00000AE7 VOL: 0
;PCODE: $00000AE8 VOL: 0
;PCODE: $00000AE9 VOL: 0
;PCODE: $00000AEA VOL: 0
;PCODE: $00000AEB VOL: 0
;PCODE: $00000AEC VOL: 0
;PCODE: $00000AED VOL: 0
;PCODE: $00000AEE VOL: 0
;PCODE: $00000AEF VOL: 0
;PCODE: $00000AF0 VOL: 0
;PCODE: $00000AF1 VOL: 0
;PCODE: $00000AF2 VOL: 0
;PCODE: $00000AF3 VOL: 0
;PCODE: $00000AF4 VOL: 0
; 0000 032D k=0;
;PCODE: $00000AF5 VOL: 0
;PCODE: $00000AF6 VOL: 0
; 0000 032E         while(buffer[b]!='"')
;PCODE: $00000AF7 VOL: 0
;PCODE: $00000AF8 VOL: 0
;PCODE: $00000AF9 VOL: 0
;PCODE: $00000AFA VOL: 0
;PCODE: $00000AFB VOL: 0
;PCODE: $00000AFC VOL: 0
; 0000 032F         {
; 0000 0330         	comment[k]=buffer[b];
;PCODE: $00000AFD VOL: 0
;PCODE: $00000AFE VOL: 0
;PCODE: $00000AFF VOL: 0
;PCODE: $00000B00 VOL: 0
;PCODE: $00000B01 VOL: 0
;PCODE: $00000B02 VOL: 0
;PCODE: $00000B03 VOL: 0
;PCODE: $00000B04 VOL: 0
; 0000 0331                 k++;
;PCODE: $00000B05 VOL: 0
;PCODE: $00000B06 VOL: 0
; 0000 0332                 b++;
;PCODE: $00000B07 VOL: 0
;PCODE: $00000B08 VOL: 0
; 0000 0333                 commsize=k;
;PCODE: $00000B09 VOL: 0
;PCODE: $00000B0A VOL: 0
;PCODE: $00000B0B VOL: 0
; 0000 0334         }
;PCODE: $00000B0C VOL: 0
;PCODE: $00000B0D VOL: 0
; 0000 0335         j=b+1;
;PCODE: $00000B0E VOL: 0
;PCODE: $00000B0F VOL: 0
;PCODE: $00000B10 VOL: 0
; 0000 0336 
; 0000 0337         //status
; 0000 0338         b=j;
;PCODE: $00000B11 VOL: 0
;PCODE: $00000B12 VOL: 0
; 0000 0339         for(k=0;k<statsize;k++)status[k]=0;
;PCODE: $00000B13 VOL: 0
;PCODE: $00000B14 VOL: 0
;PCODE: $00000B15 VOL: 0
;PCODE: $00000B16 VOL: 0
;PCODE: $00000B17 VOL: 0
;PCODE: $00000B18 VOL: 0
;PCODE: $00000B19 VOL: 0
;PCODE: $00000B1A VOL: 0
;PCODE: $00000B1B VOL: 0
;PCODE: $00000B1C VOL: 0
;PCODE: $00000B1D VOL: 0
;PCODE: $00000B1E VOL: 0
;PCODE: $00000B1F VOL: 0
;PCODE: $00000B20 VOL: 0
;PCODE: $00000B21 VOL: 0
;PCODE: $00000B22 VOL: 0
;PCODE: $00000B23 VOL: 0
;PCODE: $00000B24 VOL: 0
;PCODE: $00000B25 VOL: 0
;PCODE: $00000B26 VOL: 0
;PCODE: $00000B27 VOL: 0
; 0000 033A k=0;
;PCODE: $00000B28 VOL: 0
;PCODE: $00000B29 VOL: 0
; 0000 033B         while(buffer[b]!='"')
;PCODE: $00000B2A VOL: 0
;PCODE: $00000B2B VOL: 0
;PCODE: $00000B2C VOL: 0
;PCODE: $00000B2D VOL: 0
;PCODE: $00000B2E VOL: 0
;PCODE: $00000B2F VOL: 0
; 0000 033C         {
; 0000 033D         	status[k]=buffer[b];
;PCODE: $00000B30 VOL: 0
;PCODE: $00000B31 VOL: 0
;PCODE: $00000B32 VOL: 0
;PCODE: $00000B33 VOL: 0
;PCODE: $00000B34 VOL: 0
;PCODE: $00000B35 VOL: 0
;PCODE: $00000B36 VOL: 0
;PCODE: $00000B37 VOL: 0
; 0000 033E                 k++;
;PCODE: $00000B38 VOL: 0
;PCODE: $00000B39 VOL: 0
; 0000 033F                 b++;
;PCODE: $00000B3A VOL: 0
;PCODE: $00000B3B VOL: 0
; 0000 0340                 statsize=k;
;PCODE: $00000B3C VOL: 0
;PCODE: $00000B3D VOL: 0
;PCODE: $00000B3E VOL: 0
; 0000 0341         }
;PCODE: $00000B3F VOL: 0
;PCODE: $00000B40 VOL: 0
; 0000 0342         j=b+1;
;PCODE: $00000B41 VOL: 0
;PCODE: $00000B42 VOL: 0
;PCODE: $00000B43 VOL: 0
; 0000 0343 
; 0000 0344         //status interval
; 0000 0345         b=j;
;PCODE: $00000B44 VOL: 0
;PCODE: $00000B45 VOL: 0
; 0000 0346         for(k=0;k<sizeof(ibuff);k++)ibuff[k]=0;
;PCODE: $00000B46 VOL: 0
;PCODE: $00000B47 VOL: 0
;PCODE: $00000B48 VOL: 0
;PCODE: $00000B49 VOL: 0
;PCODE: $00000B4A VOL: 0
;PCODE: $00000B4B VOL: 0
;PCODE: $00000B4C VOL: 0
;PCODE: $00000B4D VOL: 0
;PCODE: $00000B4E VOL: 0
;PCODE: $00000B4F VOL: 0
;PCODE: $00000B50 VOL: 0
;PCODE: $00000B51 VOL: 0
;PCODE: $00000B52 VOL: 0
;PCODE: $00000B53 VOL: 0
;PCODE: $00000B54 VOL: 0
;PCODE: $00000B55 VOL: 0
;PCODE: $00000B56 VOL: 0
;PCODE: $00000B57 VOL: 0
; 0000 0347 k=0;
;PCODE: $00000B58 VOL: 0
;PCODE: $00000B59 VOL: 0
; 0000 0348         while(buffer[b]!='"') 			//<--- move data from rxbuffer to databuffer
;PCODE: $00000B5A VOL: 0
;PCODE: $00000B5B VOL: 0
;PCODE: $00000B5C VOL: 0
;PCODE: $00000B5D VOL: 0
;PCODE: $00000B5E VOL: 0
;PCODE: $00000B5F VOL: 0
; 0000 0349         {
; 0000 034A         	ibuff[k]=buffer[b];
;PCODE: $00000B60 VOL: 0
;PCODE: $00000B61 VOL: 0
;PCODE: $00000B62 VOL: 0
;PCODE: $00000B63 VOL: 0
;PCODE: $00000B64 VOL: 0
;PCODE: $00000B65 VOL: 0
;PCODE: $00000B66 VOL: 0
;PCODE: $00000B67 VOL: 0
;PCODE: $00000B68 VOL: 0
; 0000 034B                 k++;
;PCODE: $00000B69 VOL: 0
;PCODE: $00000B6A VOL: 0
; 0000 034C                 b++;
;PCODE: $00000B6B VOL: 0
;PCODE: $00000B6C VOL: 0
; 0000 034D         }
;PCODE: $00000B6D VOL: 0
;PCODE: $00000B6E VOL: 0
; 0000 034E         j=b+1;
;PCODE: $00000B6F VOL: 0
;PCODE: $00000B70 VOL: 0
;PCODE: $00000B71 VOL: 0
; 0000 034F         m_int=atoi(ibuff);
;PCODE: $00000B72 VOL: 0
;PCODE: $00000B73 VOL: 0
;PCODE: $00000B74 VOL: 0
;PCODE: $00000B75 VOL: 0
;PCODE: $00000B76 VOL: 0
; 0000 0350 
; 0000 0351         //BASE-91 compression
; 0000 0352         b=j;
;PCODE: $00000B77 VOL: 0
;PCODE: $00000B78 VOL: 0
; 0000 0353         compstat=buffer[b];
;PCODE: $00000B79 VOL: 0
;PCODE: $00000B7A VOL: 0
;PCODE: $00000B7B VOL: 0
;PCODE: $00000B7C VOL: 0
;PCODE: $00000B7D VOL: 0
; 0000 0354         j=b+2;
;PCODE: $00000B7E VOL: 0
;PCODE: $00000B7F VOL: 0
;PCODE: $00000B80 VOL: 0
; 0000 0355 
; 0000 0356         //set latitude
; 0000 0357         b=j;
;PCODE: $00000B81 VOL: 0
;PCODE: $00000B82 VOL: 0
; 0000 0358         if(buffer[b]=='"')goto usegps;
;PCODE: $00000B83 VOL: 0
;PCODE: $00000B84 VOL: 0
;PCODE: $00000B85 VOL: 0
;PCODE: $00000B86 VOL: 0
;PCODE: $00000B87 VOL: 0
;PCODE: $00000B88 VOL: 0
; 0000 0359         k=0;
;PCODE: $00000B89 VOL: 0
;PCODE: $00000B8A VOL: 0
;PCODE: $00000B8B VOL: 0
; 0000 035A         while(buffer[b]!=',')
;PCODE: $00000B8C VOL: 0
;PCODE: $00000B8D VOL: 0
;PCODE: $00000B8E VOL: 0
;PCODE: $00000B8F VOL: 0
;PCODE: $00000B90 VOL: 0
;PCODE: $00000B91 VOL: 0
; 0000 035B         {
; 0000 035C         	posisi_lat[k]=buffer[b];
;PCODE: $00000B92 VOL: 0
;PCODE: $00000B93 VOL: 0
;PCODE: $00000B94 VOL: 0
;PCODE: $00000B95 VOL: 0
;PCODE: $00000B96 VOL: 0
;PCODE: $00000B97 VOL: 0
;PCODE: $00000B98 VOL: 0
;PCODE: $00000B99 VOL: 0
; 0000 035D                 k++;
;PCODE: $00000B9A VOL: 0
;PCODE: $00000B9B VOL: 0
; 0000 035E                 b++;
;PCODE: $00000B9C VOL: 0
;PCODE: $00000B9D VOL: 0
; 0000 035F         }
;PCODE: $00000B9E VOL: 0
;PCODE: $00000B9F VOL: 0
; 0000 0360         j=b+1;
;PCODE: $00000BA0 VOL: 0
;PCODE: $00000BA1 VOL: 0
;PCODE: $00000BA2 VOL: 0
; 0000 0361 
; 0000 0362         //set longitude
; 0000 0363         b=j;
;PCODE: $00000BA3 VOL: 0
;PCODE: $00000BA4 VOL: 0
; 0000 0364         k=0;
;PCODE: $00000BA5 VOL: 0
;PCODE: $00000BA6 VOL: 0
; 0000 0365         while(buffer[b]!='"')
;PCODE: $00000BA7 VOL: 0
;PCODE: $00000BA8 VOL: 0
;PCODE: $00000BA9 VOL: 0
;PCODE: $00000BAA VOL: 0
;PCODE: $00000BAB VOL: 0
;PCODE: $00000BAC VOL: 0
; 0000 0366         {
; 0000 0367         	posisi_long[k]=buffer[b];
;PCODE: $00000BAD VOL: 0
;PCODE: $00000BAE VOL: 0
;PCODE: $00000BAF VOL: 0
;PCODE: $00000BB0 VOL: 0
;PCODE: $00000BB1 VOL: 0
;PCODE: $00000BB2 VOL: 0
;PCODE: $00000BB3 VOL: 0
;PCODE: $00000BB4 VOL: 0
; 0000 0368                 k++;
;PCODE: $00000BB5 VOL: 0
;PCODE: $00000BB6 VOL: 0
; 0000 0369                 b++;
;PCODE: $00000BB7 VOL: 0
;PCODE: $00000BB8 VOL: 0
; 0000 036A         }
;PCODE: $00000BB9 VOL: 0
;PCODE: $00000BBA VOL: 0
; 0000 036B         j=b+1;
;PCODE: $00000BBB VOL: 0
;PCODE: $00000BBC VOL: 0
;PCODE: $00000BBD VOL: 0
; 0000 036C 
; 0000 036D         usegps:
;PCODE: $00000BBE VOL: 0
; 0000 036E         //use GPS ?
; 0000 036F         b=j;
;PCODE: $00000BBF VOL: 0
;PCODE: $00000BC0 VOL: 0
; 0000 0370         gps=buffer[b];
;PCODE: $00000BC1 VOL: 0
;PCODE: $00000BC2 VOL: 0
;PCODE: $00000BC3 VOL: 0
;PCODE: $00000BC4 VOL: 0
;PCODE: $00000BC5 VOL: 0
; 0000 0371         j=b+2;
;PCODE: $00000BC6 VOL: 0
;PCODE: $00000BC7 VOL: 0
;PCODE: $00000BC8 VOL: 0
; 0000 0372 
; 0000 0373         // battery voltage in comment ?
; 0000 0374         b=j;
;PCODE: $00000BC9 VOL: 0
;PCODE: $00000BCA VOL: 0
; 0000 0375         battvoltincomm=buffer[b];
;PCODE: $00000BCB VOL: 0
;PCODE: $00000BCC VOL: 0
;PCODE: $00000BCD VOL: 0
;PCODE: $00000BCE VOL: 0
;PCODE: $00000BCF VOL: 0
; 0000 0376         j=b+2;
;PCODE: $00000BD0 VOL: 0
;PCODE: $00000BD1 VOL: 0
;PCODE: $00000BD2 VOL: 0
; 0000 0377 
; 0000 0378         // temperature in comment ?
; 0000 0379         b=j;
;PCODE: $00000BD3 VOL: 0
;PCODE: $00000BD4 VOL: 0
; 0000 037A         tempincomm=buffer[b];
;PCODE: $00000BD5 VOL: 0
;PCODE: $00000BD6 VOL: 0
;PCODE: $00000BD7 VOL: 0
;PCODE: $00000BD8 VOL: 0
;PCODE: $00000BD9 VOL: 0
; 0000 037B         j=b+2;
;PCODE: $00000BDA VOL: 0
;PCODE: $00000BDB VOL: 0
;PCODE: $00000BDC VOL: 0
; 0000 037C 
; 0000 037D         // send altitude ?
; 0000 037E         b=j;
;PCODE: $00000BDD VOL: 0
;PCODE: $00000BDE VOL: 0
; 0000 037F         sendalt=buffer[b];
;PCODE: $00000BDF VOL: 0
;PCODE: $00000BE0 VOL: 0
;PCODE: $00000BE1 VOL: 0
;PCODE: $00000BE2 VOL: 0
;PCODE: $00000BE3 VOL: 0
; 0000 0380         j=b+2;
;PCODE: $00000BE4 VOL: 0
;PCODE: $00000BE5 VOL: 0
;PCODE: $00000BE6 VOL: 0
; 0000 0381 
; 0000 0382         // send to PC ?
; 0000 0383         b=j;
;PCODE: $00000BE7 VOL: 0
;PCODE: $00000BE8 VOL: 0
; 0000 0384         sendtopc=buffer[b];
;PCODE: $00000BE9 VOL: 0
;PCODE: $00000BEA VOL: 0
;PCODE: $00000BEB VOL: 0
;PCODE: $00000BEC VOL: 0
;PCODE: $00000BED VOL: 0
; 0000 0385         //j=b+2;
; 0000 0386 
; 0000 0387         //ProTrak! model A configuration ends here
; 0000 0388 
; 0000 0389         // EHCOING
; 0000 038A         mem_display();
;PCODE: $00000BEE VOL: 0
; 0000 038B 
; 0000 038C         //ProTrak! model A+ configuration ends here
; 0000 038D 
; 0000 038E         MERAH=0;
;PCODE: $00000BEF VOL: 0
;PCODE: $00000BF0 VOL: 0
; 0000 038F         HIJAU=0;
;PCODE: $00000BF1 VOL: 0
;PCODE: $00000BF2 VOL: 0
; 0000 0390         putchar(13);putchar(13);putsf("CONFIG SUCCESS !");
;PCODE: $00000BF3 VOL: 0
;PCODE: $00000BF4 VOL: 0
;PCODE: $00000BF5 VOL: 0
;PCODE: $00000BF6 VOL: 0
;PCODE: $00000BF7 VOL: 0
;PCODE: $00000BF8 VOL: 0
;PCODE: $00000BF9 VOL: 0
;PCODE: $00000BFA VOL: 0
;PCODE: $00000BFB VOL: 0
;PCODE: $00000BFC VOL: 0
; 0000 0391         putchar(13);
;PCODE: $00000BFD VOL: 0
;PCODE: $00000BFE VOL: 0
;PCODE: $00000BFF VOL: 0
; 0000 0392 
; 0000 0393 	#asm("sei")
;PCODE: $00000C00 VOL: 0
	sei
;PCODE: $00000C01 VOL: 0
; 0000 0394 }
;PCODE: $00000C02 VOL: 0
;PCODE: $00000C03 VOL: 0
;PCODE: $00000C04 VOL: 0
;PCODE: $00000C05 VOL: 0
;
;void extractGPS(void)
; 0000 0397 {
;PCODE: $00000C06 VOL: 0
;PCODE: $00000C07 VOL: 0
; 0000 0398 	int i,j;
; 0000 0399         char buff_altitude[9];
; 0000 039A         char cb;
; 0000 039B         long n_altitude[6];
; 0000 039C 
; 0000 039D         #asm("cli")
;PCODE: $00000C08 VOL: 0
;PCODE: $00000C09 VOL: 0
;	i -> R16,R17
;	j -> R18,R19
;	buff_altitude -> Y+30
;	cb -> R21
;	n_altitude -> Y+6
;PCODE: $00000C0A VOL: 0
	cli
;PCODE: $00000C0B VOL: 0
; 0000 039E         lagi:
;PCODE: $00000C0C VOL: 0
; 0000 039F         while(getchar() != '$');
;PCODE: $00000C0D VOL: 0
;PCODE: $00000C0E VOL: 0
;PCODE: $00000C0F VOL: 0
;PCODE: $00000C10 VOL: 0
;PCODE: $00000C11 VOL: 0
;PCODE: $00000C12 VOL: 0
; 0000 03A0         cb=getchar();
;PCODE: $00000C13 VOL: 0
;PCODE: $00000C14 VOL: 0
; 0000 03A1 	if(cb=='G')
;PCODE: $00000C15 VOL: 0
;PCODE: $00000C16 VOL: 0
;PCODE: $00000C17 VOL: 0
; 0000 03A2         {
; 0000 03A3         	getchar();
;PCODE: $00000C18 VOL: 0
; 0000 03A4         	if(getchar() == 'G')
;PCODE: $00000C19 VOL: 0
;PCODE: $00000C1A VOL: 0
;PCODE: $00000C1B VOL: 0
; 0000 03A5         	{
; 0000 03A6         		if(getchar() == 'G')
;PCODE: $00000C1C VOL: 0
;PCODE: $00000C1D VOL: 0
;PCODE: $00000C1E VOL: 0
; 0000 03A7         		{
; 0000 03A8                 		if(getchar() == 'A')
;PCODE: $00000C1F VOL: 0
;PCODE: $00000C20 VOL: 0
;PCODE: $00000C21 VOL: 0
; 0000 03A9                 		{
; 0000 03AA                         		MERAH = 0;
;PCODE: $00000C22 VOL: 0
;PCODE: $00000C23 VOL: 0
; 0000 03AB         				HIJAU = 1;
;PCODE: $00000C24 VOL: 0
;PCODE: $00000C25 VOL: 0
; 0000 03AC 
; 0000 03AD                                 	waitComma();
;PCODE: $00000C26 VOL: 0
; 0000 03AE                                 	waitComma();
;PCODE: $00000C27 VOL: 0
; 0000 03AF 					for(i=0; i<9; i++)	posisi_lat[i] = getchar();
;PCODE: $00000C28 VOL: 0
;PCODE: $00000C29 VOL: 0
;PCODE: $00000C2A VOL: 0
;PCODE: $00000C2B VOL: 0
;PCODE: $00000C2C VOL: 0
;PCODE: $00000C2D VOL: 0
;PCODE: $00000C2E VOL: 0
;PCODE: $00000C2F VOL: 0
;PCODE: $00000C30 VOL: 0
;PCODE: $00000C31 VOL: 0
;PCODE: $00000C32 VOL: 0
;PCODE: $00000C33 VOL: 0
;PCODE: $00000C34 VOL: 0
;PCODE: $00000C35 VOL: 0
;PCODE: $00000C36 VOL: 0
;PCODE: $00000C37 VOL: 0
;PCODE: $00000C38 VOL: 0
;PCODE: $00000C39 VOL: 0
;PCODE: $00000C3A VOL: 0
;PCODE: $00000C3B VOL: 0
; 0000 03B0 getchar();
;PCODE: $00000C3C VOL: 0
; 0000 03B1 					posisi_lat[9] = getchar();
;PCODE: $00000C3D VOL: 0
;PCODE: $00000C3E VOL: 0
;PCODE: $00000C3F VOL: 0
;PCODE: $00000C40 VOL: 0
;PCODE: $00000C41 VOL: 0
;PCODE: $00000C42 VOL: 0
; 0000 03B2 					getchar();
;PCODE: $00000C43 VOL: 0
; 0000 03B3 					for(i=0; i<10; i++)	posisi_long[i] = getchar();
;PCODE: $00000C44 VOL: 0
;PCODE: $00000C45 VOL: 0
;PCODE: $00000C46 VOL: 0
;PCODE: $00000C47 VOL: 0
;PCODE: $00000C48 VOL: 0
;PCODE: $00000C49 VOL: 0
;PCODE: $00000C4A VOL: 0
;PCODE: $00000C4B VOL: 0
;PCODE: $00000C4C VOL: 0
;PCODE: $00000C4D VOL: 0
;PCODE: $00000C4E VOL: 0
;PCODE: $00000C4F VOL: 0
;PCODE: $00000C50 VOL: 0
;PCODE: $00000C51 VOL: 0
;PCODE: $00000C52 VOL: 0
;PCODE: $00000C53 VOL: 0
;PCODE: $00000C54 VOL: 0
;PCODE: $00000C55 VOL: 0
;PCODE: $00000C56 VOL: 0
;PCODE: $00000C57 VOL: 0
; 0000 03B4 getchar();
;PCODE: $00000C58 VOL: 0
; 0000 03B5                                         posisi_long[10] = getchar();
;PCODE: $00000C59 VOL: 0
;PCODE: $00000C5A VOL: 0
;PCODE: $00000C5B VOL: 0
;PCODE: $00000C5C VOL: 0
;PCODE: $00000C5D VOL: 0
;PCODE: $00000C5E VOL: 0
; 0000 03B6 					waitComma();
;PCODE: $00000C5F VOL: 0
; 0000 03B7                                 	waitComma();
;PCODE: $00000C60 VOL: 0
; 0000 03B8                                 	waitComma();
;PCODE: $00000C61 VOL: 0
; 0000 03B9                                 	waitComma();
;PCODE: $00000C62 VOL: 0
; 0000 03BA 					// ambil 8 byte data ketinggian dalam meter
; 0000 03BB                                 	for(i=0;i<8;i++)        buff_altitude[i] = getchar();
;PCODE: $00000C63 VOL: 0
;PCODE: $00000C64 VOL: 0
;PCODE: $00000C65 VOL: 0
;PCODE: $00000C66 VOL: 0
;PCODE: $00000C67 VOL: 0
;PCODE: $00000C68 VOL: 0
;PCODE: $00000C69 VOL: 0
;PCODE: $00000C6A VOL: 0
;PCODE: $00000C6B VOL: 0
;PCODE: $00000C6C VOL: 0
;PCODE: $00000C6D VOL: 0
;PCODE: $00000C6E VOL: 0
;PCODE: $00000C6F VOL: 0
;PCODE: $00000C70 VOL: 0
;PCODE: $00000C71 VOL: 0
;PCODE: $00000C72 VOL: 0
;PCODE: $00000C73 VOL: 0
;PCODE: $00000C74 VOL: 0
;PCODE: $00000C75 VOL: 0
;PCODE: $00000C76 VOL: 0
;PCODE: $00000C77 VOL: 0
; 0000 03BE for(i=0;i<6;i++)        n_altitude[i] = '0';
;PCODE: $00000C78 VOL: 0
;PCODE: $00000C79 VOL: 0
;PCODE: $00000C7A VOL: 0
;PCODE: $00000C7B VOL: 0
;PCODE: $00000C7C VOL: 0
;PCODE: $00000C7D VOL: 0
;PCODE: $00000C7E VOL: 0
;PCODE: $00000C7F VOL: 0
;PCODE: $00000C80 VOL: 0
;PCODE: $00000C81 VOL: 0
;PCODE: $00000C82 VOL: 0
;PCODE: $00000C83 VOL: 0
;PCODE: $00000C84 VOL: 0
;PCODE: $00000C85 VOL: 0
;PCODE: $00000C86 VOL: 0
;PCODE: $00000C87 VOL: 0
;PCODE: $00000C88 VOL: 0
;PCODE: $00000C89 VOL: 0
;PCODE: $00000C8A VOL: 0
;PCODE: $00000C8B VOL: 0
; 0000 03C1 for(i=0;i<8;i++)
;PCODE: $00000C8C VOL: 0
;PCODE: $00000C8D VOL: 0
;PCODE: $00000C8E VOL: 0
;PCODE: $00000C8F VOL: 0
;PCODE: $00000C90 VOL: 0
;PCODE: $00000C91 VOL: 0
;PCODE: $00000C92 VOL: 0
;PCODE: $00000C93 VOL: 0
;PCODE: $00000C94 VOL: 0
; 0000 03C2                                 	{
; 0000 03C3                                         	if(buff_altitude[i] == '.')     goto selesai;
;PCODE: $00000C95 VOL: 0
;PCODE: $00000C96 VOL: 0
;PCODE: $00000C97 VOL: 0
;PCODE: $00000C98 VOL: 0
;PCODE: $00000C99 VOL: 0
;PCODE: $00000C9A VOL: 0
; 0000 03C4                                         	if((buff_altitude[i] != '.')&&(buff_altitude[i] != ',')&&(buff_altitude[i] != 'M'))
;PCODE: $00000C9B VOL: 0
;PCODE: $00000C9C VOL: 0
;PCODE: $00000C9D VOL: 0
;PCODE: $00000C9E VOL: 0
;PCODE: $00000C9F VOL: 0
;PCODE: $00000CA0 VOL: 0
;PCODE: $00000CA1 VOL: 0
;PCODE: $00000CA2 VOL: 0
;PCODE: $00000CA3 VOL: 0
;PCODE: $00000CA4 VOL: 0
;PCODE: $00000CA5 VOL: 0
;PCODE: $00000CA6 VOL: 0
;PCODE: $00000CA7 VOL: 0
;PCODE: $00000CA8 VOL: 0
;PCODE: $00000CA9 VOL: 0
;PCODE: $00000CAA VOL: 0
;PCODE: $00000CAB VOL: 0
;PCODE: $00000CAC VOL: 0
;PCODE: $00000CAD VOL: 0
;PCODE: $00000CAE VOL: 0
; 0000 03C5                                         	{
; 0000 03C6                                                 	// geser dari satuan ke puluhan dst.
; 0000 03C7                                                 	for(j=0;j<6;j++)        n_altitude[j] = n_altitude[j+1];
;PCODE: $00000CAF VOL: 0
;PCODE: $00000CB0 VOL: 0
;PCODE: $00000CB1 VOL: 0
;PCODE: $00000CB2 VOL: 0
;PCODE: $00000CB3 VOL: 0
;PCODE: $00000CB4 VOL: 0
;PCODE: $00000CB5 VOL: 0
;PCODE: $00000CB6 VOL: 0
;PCODE: $00000CB7 VOL: 0
;PCODE: $00000CB8 VOL: 0
;PCODE: $00000CB9 VOL: 0
;PCODE: $00000CBA VOL: 0
;PCODE: $00000CBB VOL: 0
;PCODE: $00000CBC VOL: 0
;PCODE: $00000CBD VOL: 0
;PCODE: $00000CBE VOL: 0
;PCODE: $00000CBF VOL: 0
;PCODE: $00000CC0 VOL: 0
;PCODE: $00000CC1 VOL: 0
;PCODE: $00000CC2 VOL: 0
;PCODE: $00000CC3 VOL: 0
;PCODE: $00000CC4 VOL: 0
;PCODE: $00000CC5 VOL: 0
;PCODE: $00000CC6 VOL: 0
;PCODE: $00000CC7 VOL: 0
;PCODE: $00000CC8 VOL: 0
;PCODE: $00000CC9 VOL: 0
; 0000 03CA n_altitude[5] = buff_altitude[i];
;PCODE: $00000CCA VOL: 0
;PCODE: $00000CCB VOL: 0
;PCODE: $00000CCC VOL: 0
;PCODE: $00000CCD VOL: 0
;PCODE: $00000CCE VOL: 0
; 0000 03CB                                         	}
; 0000 03CC                                 	}
;PCODE: $00000CCF VOL: 0
;PCODE: $00000CD0 VOL: 0
;PCODE: $00000CD1 VOL: 0
;PCODE: $00000CD2 VOL: 0
;PCODE: $00000CD3 VOL: 0
;PCODE: $00000CD4 VOL: 0
; 0000 03CD 
; 0000 03CE                                 	selesai:
;PCODE: $00000CD5 VOL: 0
; 0000 03CF 
; 0000 03D0                                 	// atoi
; 0000 03D1                                 	for(i=0;i<6;i++)        n_altitude[i] -= '0';
;PCODE: $00000CD6 VOL: 0
;PCODE: $00000CD7 VOL: 0
;PCODE: $00000CD8 VOL: 0
;PCODE: $00000CD9 VOL: 0
;PCODE: $00000CDA VOL: 0
;PCODE: $00000CDB VOL: 0
;PCODE: $00000CDC VOL: 0
;PCODE: $00000CDD VOL: 0
;PCODE: $00000CDE VOL: 0
;PCODE: $00000CDF VOL: 0
;PCODE: $00000CE0 VOL: 0
;PCODE: $00000CE1 VOL: 0
;PCODE: $00000CE2 VOL: 0
;PCODE: $00000CE3 VOL: 0
;PCODE: $00000CE4 VOL: 0
;PCODE: $00000CE5 VOL: 0
;PCODE: $00000CE6 VOL: 0
;PCODE: $00000CE7 VOL: 0
;PCODE: $00000CE8 VOL: 0
;PCODE: $00000CE9 VOL: 0
;PCODE: $00000CEA VOL: 0
; 0000 03D4 n_altitude[0] *= 100000;
;PCODE: $00000CEB VOL: 0
;PCODE: $00000CEC VOL: 0
;PCODE: $00000CED VOL: 0
;PCODE: $00000CEE VOL: 0
; 0000 03D5                                 	n_altitude[1] *=  10000;
;PCODE: $00000CEF VOL: 0
;PCODE: $00000CF0 VOL: 0
;PCODE: $00000CF1 VOL: 0
;PCODE: $00000CF2 VOL: 0
; 0000 03D6                                 	n_altitude[2] *=   1000;
;PCODE: $00000CF3 VOL: 0
;PCODE: $00000CF4 VOL: 0
;PCODE: $00000CF5 VOL: 0
;PCODE: $00000CF6 VOL: 0
; 0000 03D7                                 	n_altitude[3] *=    100;
;PCODE: $00000CF7 VOL: 0
;PCODE: $00000CF8 VOL: 0
;PCODE: $00000CF9 VOL: 0
;PCODE: $00000CFA VOL: 0
; 0000 03D8                                 	n_altitude[4] *=     10;
;PCODE: $00000CFB VOL: 0
;PCODE: $00000CFC VOL: 0
;PCODE: $00000CFD VOL: 0
;PCODE: $00000CFE VOL: 0
; 0000 03D9 
; 0000 03DA                                 	// jumlahkan satuan + puluhan + ratusan dst.
; 0000 03DB                                 	n_altitude[5] += (n_altitude[0] + n_altitude[1] + n_altitude[2] + n_altitude[3] + n_altitude[4]);
;PCODE: $00000CFF VOL: 0
;PCODE: $00000D00 VOL: 0
;PCODE: $00000D01 VOL: 0
;PCODE: $00000D02 VOL: 0
;PCODE: $00000D03 VOL: 0
;PCODE: $00000D04 VOL: 0
;PCODE: $00000D05 VOL: 0
;PCODE: $00000D06 VOL: 0
;PCODE: $00000D07 VOL: 0
;PCODE: $00000D08 VOL: 0
;PCODE: $00000D09 VOL: 0
;PCODE: $00000D0A VOL: 0
; 0000 03DC 
; 0000 03DD                                 	// meter to feet
; 0000 03DE                                 	n_altitude[5] *= 3;
;PCODE: $00000D0B VOL: 0
;PCODE: $00000D0C VOL: 0
;PCODE: $00000D0D VOL: 0
;PCODE: $00000D0E VOL: 0
; 0000 03DF                                 	altitude=n_altitude[5];
;PCODE: $00000D0F VOL: 0
;PCODE: $00000D10 VOL: 0
;PCODE: $00000D11 VOL: 0
; 0000 03E0 
; 0000 03E1                                 	MERAH = 0;
;PCODE: $00000D12 VOL: 0
;PCODE: $00000D13 VOL: 0
; 0000 03E2         				HIJAU = 0;
;PCODE: $00000D14 VOL: 0
;PCODE: $00000D15 VOL: 0
; 0000 03E3                                 	delay_ms(150);
;PCODE: $00000D16 VOL: 0
;PCODE: $00000D17 VOL: 0
;PCODE: $00000D18 VOL: 0
; 0000 03E4                                 	goto keluar;
;PCODE: $00000D19 VOL: 0
; 0000 03E5                         	}
; 0000 03E6                 	}
;PCODE: $00000D1A VOL: 0
; 0000 03E7         	}
;PCODE: $00000D1B VOL: 0
; 0000 03E8         }
;PCODE: $00000D1C VOL: 0
; 0000 03E9 
; 0000 03EA         else if(cb=='C')
;PCODE: $00000D1D VOL: 0
;PCODE: $00000D1E VOL: 0
;PCODE: $00000D1F VOL: 0
;PCODE: $00000D20 VOL: 0
;PCODE: $00000D21 VOL: 0
; 0000 03EB         {
; 0000 03EC         	if(getchar()=='O')
;PCODE: $00000D22 VOL: 0
;PCODE: $00000D23 VOL: 0
;PCODE: $00000D24 VOL: 0
; 0000 03ED                 {
; 0000 03EE                 	if(getchar()=='N')
;PCODE: $00000D25 VOL: 0
;PCODE: $00000D26 VOL: 0
;PCODE: $00000D27 VOL: 0
; 0000 03EF                         {
; 0000 03F0                         	if(getchar()=='F')
;PCODE: $00000D28 VOL: 0
;PCODE: $00000D29 VOL: 0
;PCODE: $00000D2A VOL: 0
; 0000 03F1                                 {
; 0000 03F2                                 	config();
;PCODE: $00000D2B VOL: 0
; 0000 03F3                                         goto keluar;
;PCODE: $00000D2C VOL: 0
; 0000 03F4         			}
; 0000 03F5                         }
;PCODE: $00000D2D VOL: 0
; 0000 03F6                 }
;PCODE: $00000D2E VOL: 0
; 0000 03F7         }
;PCODE: $00000D2F VOL: 0
; 0000 03F8 
; 0000 03F9 	else if(cb=='E')
;PCODE: $00000D30 VOL: 0
;PCODE: $00000D31 VOL: 0
;PCODE: $00000D32 VOL: 0
;PCODE: $00000D33 VOL: 0
;PCODE: $00000D34 VOL: 0
; 0000 03FA         {
; 0000 03FB         	if(getchar()=='C')
;PCODE: $00000D35 VOL: 0
;PCODE: $00000D36 VOL: 0
;PCODE: $00000D37 VOL: 0
; 0000 03FC                 {
; 0000 03FD                 	if(getchar()=='H')
;PCODE: $00000D38 VOL: 0
;PCODE: $00000D39 VOL: 0
;PCODE: $00000D3A VOL: 0
; 0000 03FE                         {
; 0000 03FF                         	if(getchar()=='O')
;PCODE: $00000D3B VOL: 0
;PCODE: $00000D3C VOL: 0
;PCODE: $00000D3D VOL: 0
; 0000 0400                                 {
; 0000 0401                                 	mem_display();
;PCODE: $00000D3E VOL: 0
; 0000 0402                                         goto keluar;
;PCODE: $00000D3F VOL: 0
; 0000 0403         			}
; 0000 0404                         }
;PCODE: $00000D40 VOL: 0
; 0000 0405                 }
;PCODE: $00000D41 VOL: 0
; 0000 0406         }
;PCODE: $00000D42 VOL: 0
; 0000 0407 
; 0000 0408         goto lagi;
;PCODE: $00000D43 VOL: 0
;PCODE: $00000D44 VOL: 0
;PCODE: $00000D45 VOL: 0
;PCODE: $00000D46 VOL: 0
; 0000 0409 
; 0000 040A         keluar:
;PCODE: $00000D47 VOL: 0
; 0000 040B         #asm("sei")
;PCODE: $00000D48 VOL: 0
	sei
;PCODE: $00000D49 VOL: 0
; 0000 040C }
;PCODE: $00000D4A VOL: 0
;PCODE: $00000D4B VOL: 0
;PCODE: $00000D4C VOL: 0
;PCODE: $00000D4D VOL: 0
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 040F {
;PCODE: $00000D4E VOL: 0
;PCODE: $00000D4F VOL: 0
; 0000 0410         if(gps=='Y')
;PCODE: $00000D50 VOL: 0
;PCODE: $00000D51 VOL: 0
;PCODE: $00000D52 VOL: 0
;PCODE: $00000D53 VOL: 0
; 0000 0411         {
; 0000 0412         	HIJAU=0;
;PCODE: $00000D54 VOL: 0
;PCODE: $00000D55 VOL: 0
; 0000 0413                 MERAH=0;
;PCODE: $00000D56 VOL: 0
;PCODE: $00000D57 VOL: 0
; 0000 0414                 extractGPS();
;PCODE: $00000D58 VOL: 0
; 0000 0415         }
; 0000 0416         else
;PCODE: $00000D59 VOL: 0
;PCODE: $00000D5A VOL: 0
; 0000 0417         {
; 0000 0418         	HIJAU=1;
;PCODE: $00000D5B VOL: 0
;PCODE: $00000D5C VOL: 0
; 0000 0419                 MERAH=0;
;PCODE: $00000D5D VOL: 0
;PCODE: $00000D5E VOL: 0
; 0000 041A                 if(PIND.0==0)extractGPS();
;PCODE: $00000D5F VOL: 0
;PCODE: $00000D60 VOL: 0
;PCODE: $00000D61 VOL: 0
;PCODE: $00000D62 VOL: 0
; 0000 041B         }
;PCODE: $00000D63 VOL: 0
;PCODE: $00000D64 VOL: 0
; 0000 041C         if((tcnt1c/2)==timeIntv)
;PCODE: $00000D65 VOL: 0
;PCODE: $00000D66 VOL: 0
;PCODE: $00000D67 VOL: 0
;PCODE: $00000D68 VOL: 0
;PCODE: $00000D69 VOL: 0
;PCODE: $00000D6A VOL: 0
;PCODE: $00000D6B VOL: 0
; 0000 041D         {
; 0000 041E         	kirim_paket();
;PCODE: $00000D6C VOL: 0
; 0000 041F                 tcnt1c=0;
;PCODE: $00000D6D VOL: 0
; 0000 0420         }
; 0000 0421         TCNT1H = (60135 >> 8);
;PCODE: $00000D6E VOL: 0
;PCODE: $00000D6F VOL: 0
;PCODE: $00000D70 VOL: 0
; 0000 0422         TCNT1L = (60135 & 0xFF);
;PCODE: $00000D71 VOL: 0
;PCODE: $00000D72 VOL: 0
; 0000 0423 
; 0000 0424         tcnt1c++;
;PCODE: $00000D73 VOL: 0
;PCODE: $00000D74 VOL: 0
;PCODE: $00000D75 VOL: 0
; 0000 0425         if(tcnt1c==65535)tcnt1c=0;
;PCODE: $00000D76 VOL: 0
;PCODE: $00000D77 VOL: 0
;PCODE: $00000D78 VOL: 0
;PCODE: $00000D79 VOL: 0
; 0000 0426 }
;PCODE: $00000D7A VOL: 0
;PCODE: $00000D7B VOL: 0
;PCODE: $00000D7C VOL: 0
;PCODE: $00000D7D VOL: 0
;
;void main(void)
; 0000 0429 {
;PCODE: $00000D7E VOL: 0
; 0000 042A         PORTB=0x00;
;PCODE: $00000D7F VOL: 0
;PCODE: $00000D80 VOL: 0
; 0000 042B 	DDRB=0xFF;
;PCODE: $00000D81 VOL: 0
;PCODE: $00000D82 VOL: 0
; 0000 042C 	PORTD=0x03;
;PCODE: $00000D83 VOL: 0
;PCODE: $00000D84 VOL: 0
; 0000 042D 	DDRD=0xFE;
;PCODE: $00000D85 VOL: 0
;PCODE: $00000D86 VOL: 0
; 0000 042E 
; 0000 042F         TCCR1A=0x00;
;PCODE: $00000D87 VOL: 0
;PCODE: $00000D88 VOL: 0
; 0000 0430 	TCCR1B=0x05;
;PCODE: $00000D89 VOL: 0
;PCODE: $00000D8A VOL: 0
; 0000 0431 	TCNT1H = (60135 >> 8);
;PCODE: $00000D8B VOL: 0
;PCODE: $00000D8C VOL: 0
; 0000 0432         TCNT1L = (60135 & 0xFF);
;PCODE: $00000D8D VOL: 0
;PCODE: $00000D8E VOL: 0
; 0000 0433         TIMSK=0x04;
;PCODE: $00000D8F VOL: 0
;PCODE: $00000D90 VOL: 0
; 0000 0434 
; 0000 0435 	// Rx ON-noInt Tx ON-noInt
; 0000 0436 	UCSRA=0x00;
;PCODE: $00000D91 VOL: 0
;PCODE: $00000D92 VOL: 0
; 0000 0437 	UCSRB=0x18;
;PCODE: $00000D93 VOL: 0
;PCODE: $00000D94 VOL: 0
; 0000 0438 	UCSRC=0x86;
;PCODE: $00000D95 VOL: 0
;PCODE: $00000D96 VOL: 0
; 0000 0439 	UBRRH=0x00;
;PCODE: $00000D97 VOL: 0
;PCODE: $00000D98 VOL: 0
; 0000 043A 	UBRRL=0x8F;
;PCODE: $00000D99 VOL: 0
;PCODE: $00000D9A VOL: 0
; 0000 043B 
; 0000 043C 	ACSR=0x80;
;PCODE: $00000D9B VOL: 0
;PCODE: $00000D9C VOL: 0
; 0000 043D 
; 0000 043E 	ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000D9D VOL: 0
;PCODE: $00000D9E VOL: 0
; 0000 043F 	ADCSRA=0x84;
;PCODE: $00000D9F VOL: 0
;PCODE: $00000DA0 VOL: 0
; 0000 0440 
; 0000 0441         MERAH = 1;
;PCODE: $00000DA1 VOL: 0
;PCODE: $00000DA2 VOL: 0
; 0000 0442         HIJAU = 0;
;PCODE: $00000DA3 VOL: 0
;PCODE: $00000DA4 VOL: 0
; 0000 0443         delay_ms(200);
;PCODE: $00000DA5 VOL: 0
;PCODE: $00000DA6 VOL: 0
;PCODE: $00000DA7 VOL: 0
; 0000 0444         MERAH = 0;
;PCODE: $00000DA8 VOL: 0
;PCODE: $00000DA9 VOL: 0
; 0000 0445         HIJAU = 1;
;PCODE: $00000DAA VOL: 0
;PCODE: $00000DAB VOL: 0
; 0000 0446         delay_ms(200);
;PCODE: $00000DAC VOL: 0
;PCODE: $00000DAD VOL: 0
;PCODE: $00000DAE VOL: 0
; 0000 0447 
; 0000 0448         #asm("sei")
;PCODE: $00000DAF VOL: 0
	sei
;PCODE: $00000DB0 VOL: 0
; 0000 0449 
; 0000 044A         kirim_paket();
;PCODE: $00000DB1 VOL: 0
; 0000 044B 
; 0000 044C 	while (1)
;PCODE: $00000DB2 VOL: 0
; 0000 044D       	{
; 0000 044E         	//putchar(p=getchar());
; 0000 044F                 if(sendtopc=='Y')
;PCODE: $00000DB3 VOL: 0
;PCODE: $00000DB4 VOL: 0
;PCODE: $00000DB5 VOL: 0
;PCODE: $00000DB6 VOL: 0
; 0000 0450                 {
; 0000 0451                 read_temp();
;PCODE: $00000DB7 VOL: 0
; 0000 0452                 read_volt();
;PCODE: $00000DB8 VOL: 0
; 0000 0453                 putchar(13);putsf("Temperature       :");puts(temp);//putchar('C');
;PCODE: $00000DB9 VOL: 0
;PCODE: $00000DBA VOL: 0
;PCODE: $00000DBB VOL: 0
;PCODE: $00000DBC VOL: 0
;PCODE: $00000DBD VOL: 0
;PCODE: $00000DBE VOL: 0
;PCODE: $00000DBF VOL: 0
;PCODE: $00000DC0 VOL: 0
;PCODE: $00000DC1 VOL: 0
;PCODE: $00000DC2 VOL: 0
; 0000 0454                 putchar(13);putsf("Battery Voltage   :");puts(volt);//putchar('V');
;PCODE: $00000DC3 VOL: 0
;PCODE: $00000DC4 VOL: 0
;PCODE: $00000DC5 VOL: 0
;PCODE: $00000DC6 VOL: 0
;PCODE: $00000DC7 VOL: 0
;PCODE: $00000DC8 VOL: 0
;PCODE: $00000DC9 VOL: 0
;PCODE: $00000DCA VOL: 0
;PCODE: $00000DCB VOL: 0
;PCODE: $00000DCC VOL: 0
; 0000 0455                 delay_ms(1000);
;PCODE: $00000DCD VOL: 0
;PCODE: $00000DCE VOL: 0
;PCODE: $00000DCF VOL: 0
; 0000 0456                 }
; 0000 0457       	}
;PCODE: $00000DD0 VOL: 0
;PCODE: $00000DD1 VOL: 0
;PCODE: $00000DD2 VOL: 0
; 0000 0458 }
;PCODE: $00000DD3 VOL: 0
;PCODE: $00000DD4 VOL: 0
;PCODE: $00000DD5 VOL: 0
