
AVRASM ver. 2.1.30  D:\Punya Koko\LPKTA\atmega128 komdat\List\rx.asm Mon Oct 07 14:07:15 2013

D:\Punya Koko\LPKTA\atmega128 komdat\List\rx.asm(1061): warning: Register r5 already defined by the .DEF directive
D:\Punya Koko\LPKTA\atmega128 komdat\List\rx.asm(1062): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATmega128
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Small
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 1024 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : Yes
                 ;'char' is unsigned       : Yes
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega128
                 	#pragma AVRPART MEMORY PROG_FLASH 131072
                 	#pragma AVRPART MEMORY EEPROM 4096
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 4351
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x100
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU RAMPZ=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 	.EQU XMCRA=0x6D
                 	.EQU XMCRB=0x6C
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0100
                 	.EQU __SRAM_END=0x10FF
                 	.EQU __DSTACK_SIZE=0x0400
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _adc_buff=R5
                 	.DEF _t0c=R4
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0058 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 008b 	JMP  _timer0_ovf_isr
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
00002a 940c 0000 	JMP  0x00
00002c 940c 0000 	JMP  0x00
00002e 940c 0000 	JMP  0x00
000030 940c 0000 	JMP  0x00
000032 940c 0000 	JMP  0x00
000034 940c 0000 	JMP  0x00
000036 940c 0000 	JMP  0x00
000038 940c 0000 	JMP  0x00
00003a 940c 0000 	JMP  0x00
00003c 940c 0000 	JMP  0x00
00003e 940c 0000 	JMP  0x00
000040 940c 0000 	JMP  0x00
000042 940c 0000 	JMP  0x00
000044 940c 0000 	JMP  0x00
                 
                 _tbl10_G100:
000046 2710
000047 03e8
000048 0064
000049 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00004a 0001      	.DB  0x1,0x0
                 _tbl16_G100:
00004b 1000
00004c 0100
00004d 0010
00004e 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;REGISTER BIT VARIABLES INITIALIZATION
                 __REG_BIT_VARS:
00004f 0000      	.DW  0x0000
                 
                 _0x18:
D:\Punya Koko\LPKTA\atmega128 komdat\List\rx.asm(1118): warning: .cseg .db misalignment - padding zero byte
000050 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000051 0001      	.DW  0x01
000052 0002      	.DW  0x02
000053 009e      	.DW  __REG_BIT_VARS*2
                 
000054 0001      	.DW  0x01
000055 0004      	.DW  0x04
000056 00a0      	.DW  _0x18*2
                 
                 _0xFFFFFFFF:
000057 0000      	.DW  0
                 
                 __RESET:
000058 94f8      	CLI
000059 27ee      	CLR  R30
00005a bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00005b e0f1      	LDI  R31,1
00005c bff5      	OUT  MCUCR,R31
00005d bfe5      	OUT  MCUCR,R30
00005e 93e0 006c 	STS  XMCRB,R30
                 
                 ;DISABLE WATCHDOG
000060 e1f8      	LDI  R31,0x18
000061 bdf1      	OUT  WDTCR,R31
000062 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000063 e08d      	LDI  R24,(14-2)+1
000064 e0a2      	LDI  R26,2
000065 27bb      	CLR  R27
                 __CLEAR_REG:
000066 93ed      	ST   X+,R30
000067 958a      	DEC  R24
000068 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000069 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00006a e190      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00006b e0a0      	LDI  R26,LOW(__SRAM_START)
00006c e0b1      	LDI  R27,HIGH(__SRAM_START)
                 __CLEAR_SRAM:
00006d 93ed      	ST   X+,R30
00006e 9701      	SBIW R24,1
00006f f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000070 eae2      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000071 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000072 9185      	LPM  R24,Z+
000073 9195      	LPM  R25,Z+
000074 9700      	SBIW R24,0
000075 f061      	BREQ __GLOBAL_INI_END
000076 91a5      	LPM  R26,Z+
000077 91b5      	LPM  R27,Z+
000078 9005      	LPM  R0,Z+
000079 9015      	LPM  R1,Z+
00007a 01bf      	MOVW R22,R30
00007b 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00007c 9005      	LPM  R0,Z+
00007d 920d      	ST   X+,R0
00007e 9701      	SBIW R24,1
00007f f7e1      	BRNE __GLOBAL_INI_LOOP
000080 01fb      	MOVW R30,R22
000081 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
000082 bf8b      	OUT  RAMPZ,R24
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000083 efef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000084 bfed      	OUT  SPL,R30
000085 e1e0      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000086 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000087 e0c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000088 e0d5      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000089 940c 00e9 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x500
                 
                 	.CSEG
                 ;#include <mega128.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x1C
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_powersave=0x18
                 	.EQU __sm_standby=0x14
                 	.EQU __sm_ext_standby=0x1C
                 	.EQU __sm_adc_noise_red=0x08
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;
                 ;#include <delay.h>
                 ;
                 ;#define SENSOR_0        0
                 ;#define SENSOR_1        1
                 ;#define SENSOR_2        2
                 ;#define SENSOR_3        3
                 ;#define SENSOR_4        4
                 ;#define SENSOR_5        5
                 ;#define SENSOR_EXP      6
                 ;#define FSK_IN          7
                 ;
                 ;#define ADCMUX0         PORTA.3
                 ;#define ADCMUX1         PORTA.4
                 ;#define ADCMUX2         PORTA.5
                 ;
                 ;#define STATUS_0        PORTC.3
                 ;#define STATUS_1        PORTC.2
                 ;#define STATUS_2        PORTC.1
                 ;#define STATUS_3        PORTC.0
                 ;#define STATUS_4        PORTG.1
                 ;#define STATUS_5        PORTG.0
                 ;
                 ;#define TXD_USART_0     PORTE.1
                 ;#define RXD_USART_0     PINE.0
                 ;
                 ;#define PTT             PORTD.7
                 ;#define TXD_USART_1     PORTD.3
                 ;#define RXD_USART_1     PIND.2
                 ;
                 ;#define DEBUG_1         PIND.1
                 ;#define DEBUG_2         PIND.0
                 ;
                 ;#define DAC_0           PORTE.4
                 ;#define DAC_1           PORTE.5
                 ;#define DAC_2           PORTE.6
                 ;#define DAC_3           PORTE.7
                 ;
                 ;#define TONE_1200       1
                 ;#define TONE_2400       0
                 ;
                 ;#define OK              1
                 ;#define STOP            0
                 ;
                 ;// Standard Input/Output functions
                 ;#include <stdio.h>
                 ;
                 ;unsigned char read_adc(unsigned char adc_input);
                 ;
                 ;unsigned char adc_buff;
                 ;bit buff = 0, b1 = 0, b2 = 0, b3 = 0;
                 ;char t0c = 0;
                 ;
                 ;// Timer 0 overflow interrupt service routine
                 ;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
                 ; 0000 0039 {
                 
                 	.CSEG
                 _timer0_ovf_isr:
00008b 93aa      	ST   -Y,R26
00008c 93ea      	ST   -Y,R30
00008d b7ef      	IN   R30,SREG
00008e 93ea      	ST   -Y,R30
                 ; 0000 003A         // Reinitialize Timer 0 value
                 ; 0000 003B         TCNT0=0xF7;
00008f efe7      	LDI  R30,LOW(247)
000090 bfe2      	OUT  0x32,R30
                 ; 0000 003C         // Place your code here
                 ; 0000 003D 
                 ; 0000 003E         if(b1 ^ buff)
000091 e0a0      	LDI  R26,0
000092 fc21      	SBRC R2,1
000093 e0a1      	LDI  R26,1
000094 e0e0      	LDI  R30,0
000095 fc20      	SBRC R2,0
000096 e0e1      	LDI  R30,1
000097 27ea      	EOR  R30,R26
000098 f061      	BREQ _0x3
                 ; 0000 003F         {
                 ; 0000 0040                 if(t0c < 6)
000099 e0e6      	LDI  R30,LOW(6)
00009a 164e      	CP   R4,R30
00009b f418      	BRSH _0x4
                 ; 0000 0041                 {
                 ; 0000 0042                         TXD_USART_0 = 0;
00009c 9819      	CBI  0x3,1
                 ; 0000 0043                         PTT = 0;
00009d 9897      	CBI  0x12,7
                 ; 0000 0044                         t0c = 0;
00009e 2444      	CLR  R4
                 ; 0000 0045                 }
                 ; 0000 0046 
                 ; 0000 0047                 if(t0c > 5)
                 _0x4:
00009f e0e5      	LDI  R30,LOW(5)
0000a0 15e4      	CP   R30,R4
0000a1 f418      	BRSH _0x9
                 ; 0000 0048                 {
                 ; 0000 0049                         TXD_USART_0 = 1;
0000a2 9a19      	SBI  0x3,1
                 ; 0000 004A                         PTT = 1;
0000a3 9a97      	SBI  0x12,7
                 ; 0000 004B                         t0c = 0;
0000a4 2444      	CLR  R4
                 ; 0000 004C                 }
                 ; 0000 004D         }
                 _0x9:
                 ; 0000 004E         //TXD_USART_0 = b2 ^ buff;
                 ; 0000 004F         //PTT = b2 ^ buff;
                 ; 0000 0050         b3 = b2;
                 _0x3:
0000a5 fa22      	BST  R2,2
0000a6 f823      	BLD  R2,3
                 ; 0000 0051         b2 = b1;
0000a7 fa21      	BST  R2,1
0000a8 f822      	BLD  R2,2
                 ; 0000 0052         b1 = buff;
0000a9 fa20      	BST  R2,0
0000aa f821      	BLD  R2,1
                 ; 0000 0053 
                 ; 0000 0054         buff = 0;
0000ab 94e8      	CLT
0000ac f820      	BLD  R2,0
                 ; 0000 0055 
                 ; 0000 0056         t0c++;
0000ad 9443      	INC  R4
                 ; 0000 0057 
                 ; 0000 0058         //if(adc_buff > 0)      buff = 1;
                 ; 0000 0059         if(t0c > 126)   t0c = 0;
0000ae e7ee      	LDI  R30,LOW(126)
0000af 15e4      	CP   R30,R4
0000b0 f408      	BRSH _0xE
0000b1 2444      	CLR  R4
                 ; 0000 005A }
                 _0xE:
0000b2 91e9      	LD   R30,Y+
0000b3 bfef      	OUT  SREG,R30
0000b4 91e9      	LD   R30,Y+
0000b5 91a9      	LD   R26,Y+
0000b6 9518      	RETI
                 ;
                 ;#define ADC_VREF_TYPE 0x20
                 ;
                 ;// Read the 8 most significant bits
                 ;// of the AD conversion result
                 ;unsigned char read_adc(unsigned char adc_input)
                 ; 0000 0061 {
                 _read_adc:
                 ; 0000 0062 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
                 ;	adc_input -> Y+0
0000b7 81e8      	LD   R30,Y
0000b8 62e0      	ORI  R30,0x20
0000b9 b9e7      	OUT  0x7,R30
                 ; 0000 0063 // Delay needed for the stabilization of the ADC input voltage
                 ; 0000 0064 //delay_us(1);
                 ; 0000 0065 // Start the AD conversion
                 ; 0000 0066 ADCSRA|=0x40;
0000ba 9a36      	SBI  0x6,6
                 ; 0000 0067 // Wait for the AD conversion to complete
                 ; 0000 0068 while ((ADCSRA & 0x10)==0);
                 _0xF:
0000bb 9b34      	SBIS 0x6,4
0000bc cffe      	RJMP _0xF
                 ; 0000 0069 ADCSRA|=0x10;
0000bd 9a34      	SBI  0x6,4
                 ; 0000 006A return ADCH;
0000be b1e5      	IN   R30,0x5
0000bf 9621      	ADIW R28,1
0000c0 9508      	RET
                 ; 0000 006B }
                 ;
                 ;// Declare your global variables here
                 ;
                 ;void init_porta(void)
                 ; 0000 0070 {
                 _init_porta:
                 ; 0000 0071         PORTA=0x00;
0000c1 e0e0      	LDI  R30,LOW(0)
0000c2 bbeb      	OUT  0x1B,R30
                 ; 0000 0072         DDRA=0x38;
0000c3 e3e8      	LDI  R30,LOW(56)
0000c4 bbea      	OUT  0x1A,R30
                 ; 0000 0073 }
0000c5 9508      	RET
                 ;
                 ;void init_portc(void)
                 ; 0000 0076 {
                 _init_portc:
                 ; 0000 0077         PORTC=0x00;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe5      	OUT  0x15,R30
                 ; 0000 0078         DDRC=0x0F;
0000c8 e0ef      	LDI  R30,LOW(15)
0000c9 bbe4      	OUT  0x14,R30
                 ; 0000 0079 }
0000ca 9508      	RET
                 ;
                 ;void init_portd(void)
                 ; 0000 007C {
                 _init_portd:
                 ; 0000 007D         PORTD=0x0F;
0000cb e0ef      	LDI  R30,LOW(15)
0000cc bbe2      	OUT  0x12,R30
                 ; 0000 007E         DDRD=0x88;
0000cd e8e8      	LDI  R30,LOW(136)
0000ce bbe1      	OUT  0x11,R30
                 ; 0000 007F }
0000cf 9508      	RET
                 ;
                 ;void init_porte(void)
                 ; 0000 0082 {
                 _init_porte:
                 ; 0000 0083         PORTE=0x03;
0000d0 e0e3      	LDI  R30,LOW(3)
0000d1 b9e3      	OUT  0x3,R30
                 ; 0000 0084         DDRE=0xF2;
0000d2 efe2      	LDI  R30,LOW(242)
0000d3 b9e2      	OUT  0x2,R30
                 ; 0000 0085 }
0000d4 9508      	RET
                 ;
                 ;void init_portf(void)
                 ; 0000 0088 {
                 _init_portf:
                 ; 0000 0089         PORTF=0x00;
0000d5 e0e0      	LDI  R30,LOW(0)
0000d6 93e0 0062 	STS  98,R30
                 ; 0000 008A         DDRF=0x00;
0000d8 93e0 0061 	STS  97,R30
                 ; 0000 008B }
0000da 9508      	RET
                 ;
                 ;void init_portg(void)
                 ; 0000 008E {
                 _init_portg:
                 ; 0000 008F         PORTG=0x00;
0000db e0e0      	LDI  R30,LOW(0)
0000dc 93e0 0065 	STS  101,R30
                 ; 0000 0090         DDRG=0x03;
0000de e0e3      	LDI  R30,LOW(3)
0000df 93e0 0064 	STS  100,R30
                 ; 0000 0091 }
0000e1 9508      	RET
                 ;
                 ;void init_port_all(void)
                 ; 0000 0094 {
                 _init_port_all:
                 ; 0000 0095         init_porta();
0000e2 dfde      	RCALL _init_porta
                 ; 0000 0096         init_portc();
0000e3 dfe2      	RCALL _init_portc
                 ; 0000 0097         init_portd();
0000e4 dfe6      	RCALL _init_portd
                 ; 0000 0098         init_porte();
0000e5 dfea      	RCALL _init_porte
                 ; 0000 0099         init_portf();
0000e6 dfee      	RCALL _init_portf
                 ; 0000 009A         init_portg();
0000e7 dff3      	RCALL _init_portg
                 ; 0000 009B }
0000e8 9508      	RET
                 ;
                 ;void main(void)
                 ; 0000 009E {
                 _main:
                 ; 0000 009F         init_port_all();
0000e9 dff8      	RCALL _init_port_all
                 ; 0000 00A0 
                 ; 0000 00A1 // Timer/Counter 0 initialization
                 ; 0000 00A2 // Clock source: System Clock
                 ; 0000 00A3 // Clock value: 86.400 kHz
                 ; 0000 00A4 // Mode: Normal top=0xFF
                 ; 0000 00A5 // OC0 output: Disconnected
                 ; 0000 00A6 ASSR=0x00;
0000ea e0e0      	LDI  R30,LOW(0)
0000eb bfe0      	OUT  0x30,R30
                 ; 0000 00A7 TCCR0=0x04;
0000ec e0e4      	LDI  R30,LOW(4)
0000ed bfe3      	OUT  0x33,R30
                 ; 0000 00A8 TCNT0=0xF7;
0000ee efe7      	LDI  R30,LOW(247)
0000ef bfe2      	OUT  0x32,R30
                 ; 0000 00A9 OCR0=0x00;
0000f0 e0e0      	LDI  R30,LOW(0)
0000f1 bfe1      	OUT  0x31,R30
                 ; 0000 00AA 
                 ; 0000 00AB // Timer(s)/Counter(s) Interrupt(s) initialization
                 ; 0000 00AC TIMSK=0x01;
0000f2 e0e1      	LDI  R30,LOW(1)
0000f3 bfe7      	OUT  0x37,R30
                 ; 0000 00AD 
                 ; 0000 00AE ETIMSK=0x00;
0000f4 e0e0      	LDI  R30,LOW(0)
0000f5 93e0 007d 	STS  125,R30
                 ; 0000 00AF 
                 ; 0000 00B0 // USART0 initialization
                 ; 0000 00B1 // Communication Parameters: 8 Data, 1 Stop, No Parity
                 ; 0000 00B2 // USART0 Receiver: On
                 ; 0000 00B3 // USART0 Transmitter: On
                 ; 0000 00B4 // USART0 Mode: Asynchronous
                 ; 0000 00B5 // USART0 Baud Rate: 9600
                 ; 0000 00B6 UCSR0A=0; //x00;
0000f7 b9eb      	OUT  0xB,R30
                 ; 0000 00B7 UCSR0B=0; //x18;
0000f8 b9ea      	OUT  0xA,R30
                 ; 0000 00B8 UCSR0C=0; //x06;
0000f9 93e0 0095 	STS  149,R30
                 ; 0000 00B9 UBRR0H=0; //x00;
0000fb 93e0 0090 	STS  144,R30
                 ; 0000 00BA UBRR0L=0; //x47;
0000fd b9e9      	OUT  0x9,R30
                 ; 0000 00BB 
                 ; 0000 00BC // Analog Comparator initialization
                 ; 0000 00BD // Analog Comparator: Off
                 ; 0000 00BE // Analog Comparator Input Capture by Timer/Counter 1: Off
                 ; 0000 00BF ACSR=0x80;
0000fe e8e0      	LDI  R30,LOW(128)
0000ff b9e8      	OUT  0x8,R30
                 ; 0000 00C0 SFIOR=0x00;
000100 e0e0      	LDI  R30,LOW(0)
000101 bde0      	OUT  0x20,R30
                 ; 0000 00C1 
                 ; 0000 00C2 // ADC initialization
                 ; 0000 00C3 // ADC Clock frequency: 691.200 kHz
                 ; 0000 00C4 // ADC Voltage Reference: AREF pin
                 ; 0000 00C5 // Only the 8 most significant bits of
                 ; 0000 00C6 // the AD conversion result are used
                 ; 0000 00C7 ADMUX=ADC_VREF_TYPE & 0xff;
000102 e2e0      	LDI  R30,LOW(32)
000103 b9e7      	OUT  0x7,R30
                 ; 0000 00C8 ADCSRA=0x84;
000104 e8e4      	LDI  R30,LOW(132)
000105 b9e6      	OUT  0x6,R30
                 ; 0000 00C9 
                 ; 0000 00CA // Global enable interrupts
                 ; 0000 00CB #asm("sei")
000106 9478      	sei
                 ; 0000 00CC 
                 ; 0000 00CD while (1)
                 _0x12:
                 ; 0000 00CE       {
                 ; 0000 00CF       // Place your code here
                 ; 0000 00D0         adc_buff = read_adc(FSK_IN);
000107 e0e7      	LDI  R30,LOW(7)
000108 93ea      	ST   -Y,R30
000109 dfad      	RCALL _read_adc
00010a 2e5e      	MOV  R5,R30
                 ; 0000 00D1         if(adc_buff > 0)        buff = 1;
00010b e0e0      	LDI  R30,LOW(0)
00010c 15e5      	CP   R30,R5
00010d f410      	BRSH _0x15
00010e 9468      	SET
00010f f820      	BLD  R2,0
                 ; 0000 00D2         if(adc_buff < 1)        buff = 0;
                 _0x15:
000110 e0e1      	LDI  R30,LOW(1)
000111 165e      	CP   R5,R30
000112 f410      	BRSH _0x16
000113 94e8      	CLT
000114 f820      	BLD  R2,0
                 ; 0000 00D3 
                 ; 0000 00D4       }
                 _0x16:
000115 cff1      	RJMP _0x12
                 ; 0000 00D5 }
                 _0x17:
000116 cfff      	RJMP _0x17
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.CSEG
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega128 register use summary:
r0 :   4 r1 :   1 r2 :  11 r3 :   0 r4 :   7 r5 :   3 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   0 
r16:   0 r17:   0 r18:   0 r19:   0 r20:   0 r21:   0 r22:   2 r23:   0 
r24:   8 r25:   2 r26:   8 r27:   3 r28:   2 r29:   1 r30:  91 r31:   5 
x  :   3 y  :   8 z  :   7 
Registers used: 17 out of 35 (48.6%)

ATmega128 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   0 add   :   0 
adiw  :   1 and   :   0 andi  :   0 asr   :   0 bclr  :   0 bld   :   6 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :   2 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :   3 brpl  :   0 brsh  :   5 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   3 call  :   0 
cbi   :   2 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :   5 cls   :   0 clt   :   2 clv   :   0 clz   :   0 com   :   0 
cp    :   5 cpc   :   0 cpi   :   0 cpse  :   0 dec   :   1 des   :   0 
elpm  :   0 eor   :   1 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 
ijmp  :   0 in    :   2 inc   :   1 jmp   :  36 ld    :   4 ldd   :   0 
ldi   :  46 lds   :   0 lpm   :   7 lsl   :   0 lsr   :   0 mov   :   1 
movw  :   3 mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 
or    :   0 ori   :   1 out   :  31 pop   :   0 push  :   0 rcall :   8 
ret   :   8 reti  :   1 rjmp  :   4 rol   :   0 ror   :   0 sbc   :   0 
sbci  :   0 sbi   :   4 sbic  :   0 sbis  :   1 sbiw  :   3 sbr   :   0 
sbrc  :   2 sbrs  :   0 sec   :   0 seh   :   0 sei   :   1 sen   :   0 
ser   :   0 ses   :   0 set   :   1 sev   :   0 sez   :   0 sleep :   0 
spm   :   0 st    :   7 std   :   0 sts   :   8 sub   :   0 subi  :   0 
swap  :   0 tst   :   0 wdr   :   0 
Instructions used: 35 out of 117 (29.9%)

ATmega128 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x00022e    522     36    558  131072   0.4%
[.dseg] 0x000100 0x000500      0      0      0    4351   0.0%
[.eseg] 0x000000 0x000000      0      0      0    4096   0.0%

Assembly complete, 0 errors, 3 warnings
