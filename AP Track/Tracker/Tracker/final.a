;/***************************************************************************************
;*
;*				HANYA UNTUK TUJUAN EDUKASIONAL
;*				FOR EDUCATION PURPOSE ONLY
;*
;*				COPYRIGHT (c)2012, HANDIKO GESANG ANUGRAH SEJATI
;*				(handikogesang@gmail.com)
;*
;*				2 FEBRUARY 2012
;*
;*				BASIC APRS BEACON, GPS PARSER, & APRS ENCODER ONLY
;*				TANPA FITUR SMART BEACONING(TM), TELEMETRY, DAN PC CONFIG
;*
;*				LAST REVISION 14 APRIL 2012
;*
;*				DOKUMEN INI BEBAS UNTUK DISEBARLUASKAN.
;*				HARAP TIDAK MELAKUKAN PERUBAHAN APAPUN ATAS ISI DOKUMEN INI
;*				DAN MENCANTUMKAN NAMA DAN EMAIL PENULIS JIKA INGIN MENYEBAR-
;*				LUASKAN DOKUMEN INI.
;*
;* Project 		: 	APRS BEACON
;* Version 		: 	GPS SUPPORTED, EEPROM DATA PROTECTOR SUPPORTED
;* Date    		: 	02/02/2012
;* Author  		: 	HANDIKO GESANG ANUGRAH S.
;* Company 		: 	TIM INSTRUMENTASI TELEMETRI DAN TELEKONTROL
;* 	  			LABORATORIUM SENSOR DAN SISTEM TELEKONTROL
;* 	  			JURUSAN TEKNIK FISIKA
;*           			FAKULTAS TEKNIK
;*           			UNIVERSITAS GADJAH MADA
;*
;* Chip type           	: 	ATtiny2313
;* Program type        	: 	Application
;* Clock frequency     	: 	11.059200 MHz
;* Memory model        	: 	Tiny
;* External SRAM size  	: 	0
;* Data Stack size     	: 	32
;*
;* File			:	final.c
;*
;* Fungsi - fungsi	: 	void set_dac(char value)
;* 				void set_nada(char i_nada)
;* 				void kirim_karakter(unsigned char input)
;* 				void kirim_paket(void)
;* 				void ubah_nada(void)
;* 				void hitung_crc(char in_crc)
;* 				void kirim_crc(void)
;* 				void ekstrak_gps(void)
;* 				void init_usart(void)
;* 				void clear_usart(void)
;* 				void timer_detik(char detik)
;*
;* Variabel global	:	char rx_buffer[RX_BUFFER_SIZE]
;* 				bit rx_buffer_overflow
;*                               flash char matrix[ ]
;*				eeprom char data_1[ ]
;*				eeprom char posisi_lat[ ]
;*				eeprom char posisi_long[ ]
;*				eeprom char data_extension[ ]
;*				eeprom char komentar[ ]
;*				eeprom char status[ ]
;*				eeprom char beacon_stat
;*				char xcount
;*				bit nada
;*				static char bit_stuff
;*				unsigned short crc;
;*
;* Konstanta custom	:	_1200
;* 				_2200
;* 				CONST_1200
;* 				CONST_2200
;* 				GAP_TIME_
;*				INITIAL_TIME_C
;*				FWD_TIME_C
;*				FLAG_
;*				CONTROL_FIELD_
;*				PROTOCOL_ID_
;*				TD_POSISI_
;*				TD_STATUS_
;*				SYM_TAB_OVL_
;*				SYM_CODE_
;*
;* Chip I/O		:	TX_NOW  PIND.3
;* 				PTT     PORTB.3
;* 				DAC_0   PORTB.7
;* 				DAC_1   PORTB.6
;* 				DAC_2   PORTB.5
;* 				DAC_3   PORTB.4
;* 				L_BUSY	PORTD.5
;* 				L_STBY  PORTD.4
;*
;* Vektor		:	RJMP __RESET
;*				RJMP _ext_int1_isr
;*				RJMP _timer1_ovf_isr
;*
;* Fuse bit		:	BODLEVEL1 = 0
;*
;*
;***************************************************************************************/
;
;// header firmware
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;
;/***************************************************************************************
;*
;*	DEFINISI KONSTANTA - KONSTANTA CUSTOM
;*
;*/
;// definisi konstanta kondisi tone yang dikirimkan
;#define _1200		0
;#define _2200		1
;
;// definisi konstanta waktu de-sampling (rekonstruksi) diskrit gelombang sinus untuk tone
;	// 1200Hz dan 2200Hz dalam microsecond (us). Silahkan fine tune konstanta ini untuk
;        // adjusting baudrate dan cek hasilnya dengan menginputkan audio dari hardware APRS
;        // pada PC / Laptop lalu cek hasil tone dan baudrate dengan Cool Edit pro pada
;        // tampilan waveform atau spektral.
;
;        // Konstanta untuk kompilasi dalam mode optimasi ukuran
;#ifdef	_OPTIMIZE_SIZE_
;	#define CONST_1200      46
;	#define CONST_2200      22
;
;        // Konstanta untuk kompilasi dalam mode optimasi kecepatan
;#else
;	#define CONST_1200      50
;	#define CONST_2200      25
;#endif
;
;// waktu jeda antara transmisi data dalam detik (s)
;#define GAP_TIME_	18
;
;// konstanta waktu timer1_ovf_isr awal
;#define INITIAL_TIME_C	5
;
;// konstanta waktu timer1_ovf_isr selanjutnya
;#define FWD_TIME_C	2
;
;// konstanta waktu opening flag
;#define TX_DELAY_	40
;
;// definisi konstanta karakter Flag
;#define FLAG_		0x7E
;
;// definisi konstanta karakter Control Field
;#define	CONTROL_FIELD_	0x03
;
;// definisi konstanta karakter PID
;#define PROTOCOL_ID_	0xF0
;
;// definisi konstanta karakter Tipe Data posisi
;#define TD_POSISI_	'!'
;
;// definisi konstanta karakter Tipe Data status
;#define TD_STATUS_	'>'
;
;// definisi konstanta karakter simbol tabel dan overlay
;#define SYM_TAB_OVL_	'/'
;
;// definisi konstanta karakter simbol station (Area Locns.)
;#define SYM_CODE_	'l'
;
;// konstanta waktu closing flag
;#define TX_TAIL_	2
;
;//	AKHIR DARI DEFINISI KONSTANTA - KONSTANTA CUSTOM
;
;
;/**************************************************************************************/
;
;// header firmware
;#include <delay.h>
;#include <stdarg.h>
;
;/***************************************************************************************
;*
;*	DEFINISI INPUT - OUTPUT ATTINY2313
;*
;*/
;// definisi input TX manual (request interupsi eksternal) INT1
;#define TX_NOW  PIND.3
;
;// definisi output LED TX dan transistor sebagai switch TX (Hi = TX, Lo = waiting)
;#define PTT     PORTB.3
;
;// definisi output tegangan DAC ladder resistor sebagai generator sinusoid ( DAC_0 = LSB,
;	// DAC_3 = MSB )
;#define DAC_0   PORTB.7
;#define DAC_1   PORTB.6
;#define DAC_2   PORTB.5
;#define DAC_3   PORTB.4
;
;// definisi output LED saat terima dan ekstrak data GPS (Hi = parsing, Lo = waiting)
;#define L_BUSY	PORTD.5
;
;// definisi output LED saat menunggu interupsi (Hi = waiting, Lo = ada proses)
;#define L_STBY  PORTD.4
;
;//	AKHIR DARI DEFINISI INPUT - OUTPUT ATTINY2313
;
;
;/***************************************************************************************
;*
;*	DEKLARASI PROTOTYPE FUNGSI - FUNGSI
;*
;*/
;void set_dac(char value);
;void set_nada(char i_nada);
;void kirim_karakter(unsigned char input);
;void kirim_paket(void);
;void ubah_nada(void);
;void hitung_crc(char in_crc);
;void kirim_crc(void);
;void ekstrak_gps(void);
;void init_usart(void);
;void clear_usart(void);
;void timer_detik(char detik);
;
;//	AKHIR DARI DEKLARASI PROTOTYPE FUNGSI - FUNGSI
;
;
;/***************************************************************************************
;*
;*	DEKLARASI VARIABEL GLOBAL
;*
;*/
;
;// variabel penyimpan nilai rekonstruksi diskrit gelombang sinusoid (matrix 16 ele.)
;flash char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
;
;// variabel penyimpan data adresses
;eeprom char data_1[28] =
;{
;	// destination field, tergeser kiri 1 bit
;        ('A'<<1),('P'<<1),('Z'<<1),('T'<<1),('2'<<1),('3'<<1),0b11100000,
;
;        // source field, tergeser kiri 1 bit
;	('Y'<<1),('D'<<1),('2'<<1),('X'<<1),('A'<<1),('C'<<1),('9'<<1),
;
;        // first path, tergeser kiri 1 bit
;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('1'<<1),(' '<<1),('1'<<1),
;
;        // last path, tergeser kiri 1 bit
;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),('2'<<1)+1
;};
;
;// variabel penyimpan data awal posisi lintang dan update data gps
;eeprom char posisi_lat[8] =
;{
;	// latitude
;        '0','7','4','5','.','3','1','S'
;};
;
;// variabel penyimpan data awal posisi bujur dan update data gps
;eeprom char posisi_long[9] =
;{
;	// longitude
;        '1','1','0','2','2','.','5','2','E'
;};
;
;// variabel penyimpan data extensi tipe PHGD
;eeprom char data_extension[7] =
;{
;	// header tipe data ekstensi
;        'P','H','G',
;
;        /************************************************************************************************
;        |-----------------------------------------------------------------------------------------------|
;	|	PHGD CODE (Power Height Gain Directivity)						|
;        |-----------------------------------------------------------------------------------------------|
;        |	P		|	H		|	G		|	D		|
;        |-----------------------|-----------------------|-----------------------|-----------------------|
;        |  0 rep.of  0 watts	|  0 rep.of  10 ft.	|  0 rep.of   0dBi	|  0 rep.of  omni.	|
;        |  1 rep.of  1 watts	|  1 rep.of  20 ft.	|  1 rep.of   1dBi	|  1 rep.of  NE		|
;        |  2 rep.of  4 watts	|  2 rep.of  40 ft.	|  2 rep.of   2dBi	|  2 rep.of  E		|
;        |  3 rep.of  9 watts	|  3 rep.of  80 ft.	|  3 rep.of   3dBi	|  3 rep.of  SE		|
;        |  4 rep.of  16 watts   |  4 rep.of  160 ft.	|  4 rep.of   4dBi	|  4 rep.of  S		|
;        |  5 rep.of  25 watts 	|  5 rep.of  320 ft.	|  5 rep.of   5dBi	|  5 rep.of  SW		|
;        |  6 rep.of  36 watts	|  6 rep.of  640 ft.	|  6 rep.of   6dBi	|  6 rep.of  W		|
;        |  7 rep.of  49 watts	|  7 rep.of  1280 ft.	|  7 rep.of   7dBi	|  7 rep.of  NW		|
;        |  8 rep.of  64 watts	|  8 rep.of  2560 ft.	|  8 rep.of   8dBi	|  8 rep.of  N		|
;        |  9 rep.of  81 watts	|  9 rep.of  5120 ft.	|  9 rep.of   9dBi	|-----------------------|
;        *************************************************************************************************/
;
;
;        // nilai representasi dari PHGD
;        // power : 4 watts, P = 2
;        '2',
;
;        // height above average terrain : 10 feet, H = 0
;        '0',
;
;        // antenna gain : 0dBi, G = 0
;        '0',
;
;        // antenna directivity : omnidirectional, D = 0
;        '0'
;
;};
;
;// variabel penyimpan konstanta string komentar
;eeprom char komentar[14] =
;{
;	// komentar
;        'L','a','b','.','S','S','T','K',' ','T','i','m','-','1'
;
;};
;
;// variabel penyimpan konstanta string status
;eeprom char status[47] =
;{
;	// status teks
;        'A','T','t','i','n','y','2','3','1','3',' ',
;        'A','P','R','S',' ','t','r','a','c','k','e','r',' ',
;        'h','a','n','d','i','k','o','g','e','s','a','n','g','@','g','m','a','i','l','.','c','o','m'
;};
;
;// variabel pengingat urutan beacon dan status
;eeprom char beacon_stat = 0;
;
;// variabel penyimpan nilai urutan interupsi, 0 ketika inisialisasi dan reset, 1 ketika TX,
;	// 2 - GAP_TIME_ ketika parsing data gps
;eeprom char xcount = 0;
;
;// variabel penyimpan tone terakhir, _1200 = 0, _2200 = 1, inisialisasi sebagai 1200Hz
;bit nada = _1200;
;
;// variabel penyimpan enablisasi bit stuffing, 0 = disable bit stuffing, 1 = enable bit stuffing
;static char bit_stuff = 0;
;
;// variabel penyimpan nilai sementara dan nilai akhir CRC-16 CCITT
;unsigned short crc;
;
;//	AKHIR DARI DEKLARASI VARIABEL GLOBAL
;
;
;/***************************************************************************************
;*
;*	KONSTANTA EVALUATOR
;*
;*/
;// cek define _1200
;#ifndef	_1200
;#error	"KONSTANTA _1200 BELUM TERDEFINISI"
;#endif
;
;// cek define _2200
;#ifndef	_2200
;#error	"KONSTANTA _2200 BELUM TERDEFINISI"
;#endif
;
;// cek define CONST_1200
;#ifndef	CONST_1200
;#error	"KONSTANTA CONST_1200 BELUM TERDEFINISI"
;#endif
;
;// cek define CONST_2200
;#ifndef	CONST_2200
;#error	"KONSTANTA CONST_2200 BELUM TERDEFINISI"
;#endif
;
;// cek define GAP_TIME_
;#ifndef	GAP_TIME_
;#error	"KONSTANTA GAP_TIME_ BELUM TERDEFINISI"
;#endif
;
;// cek define INITIAL_TIME_C
;#ifndef	INITIAL_TIME_C
;#error	"KONSTANTA INITIAL_TIME_C BELUM TERDEFINISI"
;#endif
;
;// cek define FWD_TIME_C
;#ifndef	FWD_TIME_C
;#error	"KONSTANTA FWD_TIME_C BELUM TERDEFINISI"
;#endif
;
;// cek nilai GAP_TIME_ (harus antara 15 - 30)
;#if	(GAP_TIME_ < 15)
;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu singkat menyebabkan kepadatan traffic"
;#endif
;#if	(GAP_TIME_ > 60)
;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu panjang menyebabkan 'loose of track'  "
;#endif
;
;// cek nilai INITIAL_TIME_C (harus kurang dari 7)
;#if	(INITIAL_TIME_C > 6)
;#error	"INITIAL_TIME_C bernilai terlalu besar"
;#endif
;#if	(INITIAL_TIME_C < 1)
;#error	"Nilai INITIAL_TIME_C tidak valid"
;#endif
;
;// cek nilai FWD_TIME_C (harus kurang dari 7)
;#if	(FWD_TIME_C > 6)
;#error	"FWD_TIME_C bernilai terlalu besar"
;#endif
;#if	(FWD_TIME_C < 1)
;#error	"Nilai FWD_TIME_C tidak valid"
;#endif
;
;//	AKHIR DARI KONSTANTA EVALUATOR
;
;
;/***************************************************************************************/
;	interrupt 		[EXT_INT1] void ext_int1_isr(void)
; 0000 0196 /***************************************************************************************
; 0000 0197 *	ABSTRAKSI	:	interupsi eksternal, ketika input TX_NOW bernilai LOW,
; 0000 0198 *				[EXT_INT1] aktif
; 0000 0199 *
; 0000 019A *      	INPUT		:	input TX_NOW
; 0000 019B *	OUTPUT		:       LED standby dan LED busy
; 0000 019C *	RETURN		:       tak ada
; 0000 019D */
; 0000 019E {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 019F 	// matikan LED standby
; 0000 01A0         L_STBY = 0;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 01A1 
; 0000 01A2         // tunggu 250ms (bounce switch)
; 0000 01A3         delay_ms(250);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 01A4 
; 0000 01A5         // kirim paket data
; 0000 01A6         kirim_paket();
;PCODE: $00000011 VOL: 0
; 0000 01A7 
; 0000 01A8         // nyalakan LED standby
; 0000 01A9         L_STBY = 1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 01AA 
; 0000 01AB } 	// EndOf interrupt [EXT_INT1] void ext_int1_isr(void)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;
;/***************************************************************************************/
;	interrupt 		[TIM1_OVF] void timer1_ovf_isr(void)
; 0000 01B0 /***************************************************************************************
; 0000 01B1 *	ABSTRAKSI  	: 	interupsi overflow TIMER 1 [TIM1_OVF], di-set overflow
; 0000 01B2 *				ketika waktu telah mencapai 1 detik. Pengendali urutan
; 0000 01B3 *				waktu (timeline)antara transmisi data APRS dan parsing
; 0000 01B4 *				data gps
; 0000 01B5 *
; 0000 01B6 *      	INPUT		:	tak ada
; 0000 01B7 *	OUTPUT		:       kondisi LED standby dan LED busy
; 0000 01B8 *	RETURN		:       tak ada
; 0000 01B9 */
; 0000 01BA {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 01BB 	// matikan LED stanby
; 0000 01BC         L_STBY = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 01BD 
; 0000 01BE         // tambahkan 1 nilai variabel xcount
; 0000 01BF         xcount++;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 01C0 
; 0000 01C1         // seleksi nilai variabel xcount
; 0000 01C2         // kirim paket data APRS ketika timer bernilai detik ke-1
; 0000 01C3         if(xcount == 1)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 01C4         {	// jika ya
; 0000 01C5                 // kirim paket
; 0000 01C6         	kirim_paket();
;PCODE: $00000024 VOL: 0
; 0000 01C7         }
; 0000 01C8         // terima dan ekstrak data gps ketika timer detik bernilai genap saja
; 0000 01C9         else if((xcount%2) == 0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 01CA         {	// jika ya
; 0000 01CB         	// nyalakan LED busy
; 0000 01CC                 L_BUSY = 1;
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 01CD 
; 0000 01CE                 // dapatkan data koordinat sekarang
; 0000 01CF                 ekstrak_gps();
;PCODE: $0000002D VOL: 0
; 0000 01D0 
; 0000 01D1                 //matikan LED busy
; 0000 01D2                 L_BUSY = 0;
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 01D3         }
; 0000 01D4         // jika timer detik tidak lulus seleksi di atas, tunggu hingga GAP_TIME_ habis
; 0000 01D5         else if(xcount == GAP_TIME_)
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 01D6         {	// jika ya
; 0000 01D7         	// reset nilai detik ke-
; 0000 01D8                 xcount = 0;
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 01D9         }
; 0000 01DA 
; 0000 01DB         // nyalakan LED standby
; 0000 01DC         L_STBY = 1;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 01DD 
; 0000 01DE         // reset kembali konstanta waktu timer
; 0000 01DF         timer_detik(FWD_TIME_C);
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
; 0000 01E0 
; 0000 01E1 }       // EndOf interrupt [TIM1_OVF] void timer1_ovf_isr(void)
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;
;
;/***************************************************************************************/
;	void 			kirim_paket(void)
; 0000 01E6 /***************************************************************************************
; 0000 01E7 *	ABSTRAKSI  	: 	pengendali urutan pengiriman data APRS
; 0000 01E8 *				penyusun protokol APRS
; 0000 01E9 *
; 0000 01EA *      	INPUT		:	tak ada
; 0000 01EB *	OUTPUT		:       kondisi LED dan output transistor switch TX
; 0000 01EC *	RETURN		:       tak ada
; 0000 01ED */
; 0000 01EE {
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 01EF 	char i;
; 0000 01F0 
; 0000 01F1         // inisialisasi nilai CRC dengan 0xFFFF
; 0000 01F2 	crc = 0xFFFF;
;PCODE: $00000046 VOL: 0
;	i -> R17
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
; 0000 01F3 
; 0000 01F4         // tambahkan 1 nilai counter pancar
; 0000 01F5         beacon_stat++;
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 01F6 
; 0000 01F7         // nyalakan LED TX dan PTT switch
; 0000 01F8 	PTT = 1;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 01F9 
; 0000 01FA         // tunggu 500ms
; 0000 01FB         delay_ms(500);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
; 0000 01FC 
; 0000 01FD         /**********************************************************************************
; 0000 01FE 
; 0000 01FF         			APRS AX.25 PROTOCOL
; 0000 0200 
; 0000 0201         |------------------------------------------------------------------------
; 0000 0202         |   opn. FLAG	|	DESTINATION	|	SOURCE	|	DIGI'S	| CONTROL...
; 0000 0203         |---------------|-----------------------|---------------|---------------|
; 0000 0204         |   0x7E 1Bytes |	7 Bytes		|       7 Bytes |  0 - 56 Bytes	|
; 0000 0205         |------------------------------------------------------------------------
; 0000 0206 
; 0000 0207         	-----------------------------------------------------------------
; 0000 0208         DIGI'S..|	CONTROL FIELD	|	PROTOCOL ID	|	INFO	| FCS...
; 0000 0209                 |-----------------------|-----------------------|---------------|
; 0000 020A                 |    0x03 1 Bytes	|     0xF0 1 Bytes	|  0 - 256 Bytes|
; 0000 020B                 -----------------------------------------------------------------
; 0000 020C 
; 0000 020D         	--------------------------------|
; 0000 020E         INFO... |	FCS	|   cls. FLAG	|
; 0000 020F                 |---------------|---------------|
; 0000 0210                 |	2 Bytes	|   0x7E 1Bytes |
; 0000 0211                 --------------------------------|
; 0000 0212 
; 0000 0213         Sumber : APRS101, Tucson Amateur Packet Radio Club. www.tapr.org
; 0000 0214         ************************************************************************************/
; 0000 0215 
; 0000 0216         // kirim karakter opening flag
; 0000 0217         for(i=0;i<TX_DELAY_;i++)
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0218         	kirim_karakter(FLAG_);
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 021B bit_stuff = 0;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 021C 
; 0000 021D         // kirimkan field : destination, source, PATH 1, PATH 2, control, Protocol ID, dan
; 0000 021E         	// data type ID
; 0000 021F         for(i=0;i<28;i++)
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0220         	kirim_karakter(data_1[i]);
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0223 kirim_karakter(0x03);
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0224 
; 0000 0225         // krimkan protocol ID
; 0000 0226         kirim_karakter(PROTOCOL_ID_);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 0227 
; 0000 0228         // jika sudah 20 kali memancar,
; 0000 0229         if(beacon_stat == 20)
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 022A         {
; 0000 022B         	// jika ya
; 0000 022C                 // kirim tipe data status
; 0000 022D                 kirim_karakter(TD_STATUS_);
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 022E 
; 0000 022F                 // kirim teks status
; 0000 0230                 for(i=0;i<47;i++)
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 0231                 	kirim_karakter(status[i]);
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
; 0000 0234 beacon_stat = 0;
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 0235 
; 0000 0236                 // lompat ke kirim crc
; 0000 0237                 goto lompat;
;PCODE: $0000009E VOL: 0
; 0000 0238         }
; 0000 0239 
; 0000 023A         // krimkan tipe data posisi
; 0000 023B         kirim_karakter(TD_POSISI_);
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
; 0000 023C 
; 0000 023D         // kirimkan posisi lintang
; 0000 023E         for(i=0;i<8;i++)
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 023F         	kirim_karakter(posisi_lat[i]);
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
; 0000 0242 kirim_karakter('/');
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0243 
; 0000 0244         // kirimkan posisi bujur
; 0000 0245 	for(i=0;i<9;i++)
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
; 0000 0246         	kirim_karakter(posisi_long[i]);
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 0249 kirim_karakter('l');
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
; 0000 024A 
; 0000 024B         // hanya kirim PHGD code dan komentar pada pancaran ke-5
; 0000 024C         if(beacon_stat == 5)
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 024D         {
; 0000 024E         	// kirimkan field informasi : data ekstensi tipe PHGD
; 0000 024F         	for(i=0;i<7;i++)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 0250         		kirim_karakter(data_extension[i]);
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0253 for(i=0;i<14;i++)
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0254         		kirim_karakter(komentar[i]);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
; 0000 0255 }
; 0000 0256 
; 0000 0257 
; 0000 0258         // label lompatan
; 0000 0259         lompat:
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 025A 
; 0000 025B         // kirimkan field : FCS (CRC-16 CCITT)
; 0000 025C         kirim_crc();
;PCODE: $000000FF VOL: 0
; 0000 025D 
; 0000 025E         // kirimkan karakter closing flag
; 0000 025F         for(i=0;i<TX_TAIL_;i++)
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0260         	kirim_karakter(FLAG_);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
; 0000 0263 PORTB.3 = 0;
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
; 0000 0264 
; 0000 0265 
; 0000 0266 }       // EndOf void kirim_paket(void)
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;
;
;/***************************************************************************************/
;	void 			kirim_crc(void)
; 0000 026B /***************************************************************************************
; 0000 026C *	ABSTRAKSI  	: 	Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
; 0000 026D *				nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
; 0000 026E *				Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 026F *				leading one.
; 0000 0270 *
; 0000 0271 *      	INPUT		:	tak ada
; 0000 0272 *	OUTPUT		:       tak ada
; 0000 0273 *	RETURN		:       tak ada
; 0000 0274 */
; 0000 0275 {
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0276 	static unsigned char crc_lo;
; 0000 0277 	static unsigned char crc_hi;
; 0000 0278 
; 0000 0279         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
; 0000 027A         crc_lo = crc ^ 0xFF;
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
; 0000 027B 
; 0000 027C         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
; 0000 027D         crc_hi = (crc >> 8) ^ 0xFF;
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
; 0000 027E 
; 0000 027F         // kirim 8 LSB
; 0000 0280         kirim_karakter(crc_lo);
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
; 0000 0281 
; 0000 0282         // kirim 8 MSB
; 0000 0283         kirim_karakter(crc_hi);
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 0284 
; 0000 0285 }       // EndOf void kirim_crc(void)
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;
;
;/***************************************************************************************/
;	void 			kirim_karakter(unsigned char input)
; 0000 028A /***************************************************************************************
; 0000 028B *	ABSTRAKSI  	: 	mengirim data APRS karakter-demi-karakter, menghitung FCS
; 0000 028C *				field dan melakukan bit stuffing. Polarisasi data adalah
; 0000 028D *				NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
; 0000 028E *				bit terakhir yang ditahan jika bit masukan adalah bit 1.
; 0000 028F *				Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
; 0000 0290 *				masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
; 0000 0291 * 				merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
; 0000 0292 *				tone adalah tidak penting dalam polarisasi data NRZI.
; 0000 0293 *
; 0000 0294 *      	INPUT		:	byte data protokol APRS
; 0000 0295 *	OUTPUT		:       tak ada
; 0000 0296 *	RETURN		:       tak ada
; 0000 0297 */
; 0000 0298 {
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0299 	char i;
; 0000 029A 	bit in_bit;
; 0000 029B 
; 0000 029C         // kirimkan setiap byte data (8 bit)
; 0000 029D 	for(i=0;i<8;i++)
;PCODE: $0000012A VOL: 0
;	input -> Y+1
;	i -> R17
;	in_bit -> R15.0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 029E         {
; 0000 029F         	// ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
; 0000 02A0                 in_bit = (input >> i) & 0x01;
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 02A1 
; 0000 02A2                 // jika data adalah flag, nol-kan pengingat bit stuffing
; 0000 02A3                 if(input==0x7E)	{bit_stuff = 0;}
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 02A4 
; 0000 02A5                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
; 0000 02A6                 else		{hitung_crc(in_bit);}
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 02A7 
; 0000 02A8                 // jika bit data saat ini adalah
; 0000 02A9                 // nol
; 0000 02AA                 if(!in_bit)
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 02AB                 {	// jika ya
; 0000 02AC                 	// ubah tone dan bentuk gelombang sinus
; 0000 02AD                         ubah_nada();
;PCODE: $0000014A VOL: 0
; 0000 02AE 
; 0000 02AF                         // nol-kan pengingat bit stuffing
; 0000 02B0                         bit_stuff = 0;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
; 0000 02B1                 }
; 0000 02B2                 // satu
; 0000 02B3                 else
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 02B4                 {	// jika ya
; 0000 02B5                 	// jaga tone dan bentuk gelombang sinus
; 0000 02B6                         set_nada(nada);
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 02B7 
; 0000 02B8                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
; 0000 02B9                         bit_stuff++;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 02BA 
; 0000 02BB                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
; 0000 02BC                         if(bit_stuff==5)
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 02BD                         {
; 0000 02BE                         	// kirim bit nol :
; 0000 02BF                                 // ubah tone dan bentuk gelombang sinus
; 0000 02C0                                 ubah_nada();
;PCODE: $00000159 VOL: 0
; 0000 02C1 
; 0000 02C2                                 // nol-kan pengingat bit stuffing
; 0000 02C3                                 bit_stuff = 0;
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 02C4 
; 0000 02C5                         }
; 0000 02C6                 }
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 02C7         }
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 02C8 
; 0000 02C9 }      // EndOf void kirim_karakter(unsigned char input)
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;
;
;/***************************************************************************************/
;	void 			hitung_crc(char in_crc)
; 0000 02CE /***************************************************************************************
; 0000 02CF *	ABSTRAKSI  	: 	menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
; 0000 02D0 *				generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 02D1 *				leading one
; 0000 02D2 *
; 0000 02D3 *      	INPUT		:	bit data yang terkirim
; 0000 02D4 *	OUTPUT		:       tak ada
; 0000 02D5 *	RETURN		:       tak ada
; 0000 02D6 */
; 0000 02D7 {
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 02D8 	static unsigned short xor_in;
; 0000 02D9 
; 0000 02DA         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
; 0000 02DB 	xor_in = crc ^ in_crc;
;	in_crc -> Y+0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 02DC 
; 0000 02DD         // geser kanan nilai CRC sebanyak 1 bit
; 0000 02DE 	crc >>= 1;
;PCODE: $0000016E VOL: 0
; 0000 02DF 
; 0000 02E0         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
; 0000 02E1         if(xor_in & 0x01)
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 02E2         	// maka nilai CRC di-Exor-kan dengan generator polinomial
; 0000 02E3                 crc ^= 0x8408;
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 02E4 
; 0000 02E5 }      // EndOf void hitung_crc(char in_crc)
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;
;
;/***************************************************************************************/
;	void 			ubah_nada(void)
; 0000 02EA /***************************************************************************************
; 0000 02EB *	ABSTRAKSI  	: 	Menukar seting tone terakhir dengan tone yang baru. Tone
; 0000 02EC *				1200Hz dan 2200Hz masing - masing merepresentasikan bit
; 0000 02ED *				0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
; 0000 02EE *				penting dalam polarisasi data NRZI.
; 0000 02EF *
; 0000 02F0 *      	INPUT		:	tak ada
; 0000 02F1 *	OUTPUT		:       tak ada
; 0000 02F2 *	RETURN		:       tak ada
; 0000 02F3 */
; 0000 02F4 {
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 02F5 	// jika tone terakhir adalah :
; 0000 02F6         // 1200Hz
; 0000 02F7         if(nada ==_1200)
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 02F8 	{	// jika ya
; 0000 02F9         	// ubah tone saat ini menjadi 2200Hz
; 0000 02FA                 nada = _2200;
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 02FB 
; 0000 02FC                 // bangkitkan gelombang sinus 2200Hz
; 0000 02FD         	set_nada(nada);
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 02FE 	}
; 0000 02FF         // 2200Hz
; 0000 0300         else
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
; 0000 0301         {	// jika ya
; 0000 0302         	// ubah tone saat ini menjadi 1200Hz
; 0000 0303                 nada = _1200;
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0304 
; 0000 0305                 // bangkitkan gelombang sinus 1200Hz
; 0000 0306         	set_nada(nada);
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0307         }
;PCODE: $0000018C VOL: 0
; 0000 0308 
; 0000 0309 }       // EndOf void ubah_nada(void)
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;
;
;/***************************************************************************************/
;	void 			set_dac(char value)
; 0000 030E /***************************************************************************************
; 0000 030F *	ABSTRAKSI  	: 	Men-set dan reset output DAC sebagai bilangan biner yang
; 0000 0310 *				merepresentasikan nilai diskrit dari gelombang sinus yang
; 0000 0311 *				sedang dibentuk saat ini sehingga membentuk tegangan sampling
; 0000 0312 *				dari gelombang.
; 0000 0313 *
; 0000 0314 *      	INPUT		:	nilai matrix rekonstruksi diskrit gelombang sinusoid
; 0000 0315 *	OUTPUT		:       DAC 0 - 3, tegangan kontinyu pada output Low Pass Filter
; 0000 0316 *	RETURN		:       tak ada
; 0000 0317 */
; 0000 0318 {
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0319 	// ambil nilai LSB dari matrix rekonstruksi dan set sebagai DAC-0
; 0000 031A         DAC_0 = value & 0x01;
;	value -> Y+0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 031B 
; 0000 031C         // ambil nilai dari matrix rekonstruksi, geser kanan 1 bit, ambil bit paling kanan
; 0000 031D         	// dan set sebagai DAC-1
; 0000 031E         DAC_1 =( value >> 1 ) & 0x01;
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
; 0000 031F 
; 0000 0320         // ambil nilai dari matrix rekonstruksi, geser kanan 2 bit, ambil bit paling kanan
; 0000 0321         	// dan set sebagai DAC-2
; 0000 0322         DAC_2 =( value >> 2 ) & 0x01;
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0323 
; 0000 0324         // ambil nilai dari matrix rekonstruksi, geser kanan 3 bit, ambil bit tersebut dan
; 0000 0325         	// set sebagai DAC-3 (MSB)
; 0000 0326         DAC_3 =( value >> 3 ) & 0x01;
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
; 0000 0327 
; 0000 0328 }      	// EndOf void set_dac(char value)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;
;
;/***************************************************************************************/
;	void 			set_nada(char i_nada)
; 0000 032D /***************************************************************************************
; 0000 032E *	ABSTRAKSI  	: 	Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
; 0000 032F *				dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
; 0000 0330 *				tuning pada jumlah masing - masing perulangan for dan
; 0000 0331 *				konstanta waktu untuk meng-adjust parameter baudrate dan
; 0000 0332 *				frekuensi tone.
; 0000 0333 *
; 0000 0334 *      	INPUT		:	nilai frekuensi tone yang akan ditransmisikan
; 0000 0335 *	OUTPUT		:       nilai DAC
; 0000 0336 *	RETURN		:       tak ada
; 0000 0337 */
; 0000 0338 {
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
; 0000 0339 	char i;
; 0000 033A 
; 0000 033B         // jika frekuensi tone yang akan segera dipancarkan adalah :
; 0000 033C         // 1200Hz
; 0000 033D 	if(i_nada == _1200)
;PCODE: $000001C1 VOL: 0
;	i_nada -> Y+1
;	i -> R17
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 033E     	{
; 0000 033F         	// jika ya
; 0000 0340         	for(i=0; i<16; i++)
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0341         	{
; 0000 0342                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 0343                 		// dan urutan perulangan for 0 - 15
; 0000 0344                 	set_dac(matrix[i]);
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0345 
; 0000 0346                         // bangkitkan frekuensi 1200Hz dari konstanta waktu
; 0000 0347         		delay_us(CONST_1200);
;PCODE: $000001D4 VOL: 0
; 0000 0348         	}
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
; 0000 0349     	}
; 0000 034A         // 2200Hz
; 0000 034B     	else
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 034C     	{
; 0000 034D         	// jika ya
; 0000 034E         	for(i=0; i<16; i++)
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
; 0000 034F         	{
; 0000 0350                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 0351                 		// dan urutan perulangan for 0 - 15
; 0000 0352                 	set_dac(matrix[i]);
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 0353 
; 0000 0354                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
; 0000 0355                 	delay_us(CONST_2200);
;PCODE: $000001EB VOL: 0
; 0000 0356                 }
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
; 0000 0357                 // sekali lagi, untuk mengatur baudrate lakukan fine tune pada jumlah for
; 0000 0358                 for(i=0; i<13; i++)
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0359                 {
; 0000 035A                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 035B                 		// dan urutan perulangan for
; 0000 035C                 	set_dac(matrix[i]);
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 035D 
; 0000 035E                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
; 0000 035F                 	delay_us(CONST_2200);
;PCODE: $00000200 VOL: 0
; 0000 0360                 }
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
; 0000 0361     	}
;PCODE: $00000206 VOL: 0
; 0000 0362 
; 0000 0363 } 	// EndOf void set_nada(char i_nada)
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;
;
;/***************************************************************************************/
;	void 			getComma(void)
; 0000 0368 /***************************************************************************************
; 0000 0369 *	ABSTRAKSI  	: 	Menunggu data RX serial berupa karakter koma dan segera
; 0000 036A *				kembali pada fungsi yang memanggilnya.
; 0000 036B *
; 0000 036C *      	INPUT		:	RX data serial $GPGLL gps
; 0000 036D *	OUTPUT		:       tak ada
; 0000 036E *	RETURN		:       tak ada
; 0000 036F */
; 0000 0370 {
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0371 	// jika data yang diterima bukan karakter koma, terima terus
; 0000 0372         	// jika data yang diterima adalah koma, keluar
; 0000 0373         while(getchar() != ',');
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 0374 
; 0000 0375 }      	// EndOf void getComma(void)
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;
;
;/***************************************************************************************/
;	void 			ekstrak_gps(void)
; 0000 037A /***************************************************************************************
; 0000 037B *	ABSTRAKSI  	: 	Menunggu interupsi RX data serial dari USART, memparsing
; 0000 037C *				data $GPGLL yang diterima menjadi data posisi, dan mengupdate
; 0000 037D *				data variabel posisi.
; 0000 037E *
; 0000 037F *      	INPUT		:	RX data serial $GPGLL gps
; 0000 0380 *	OUTPUT		:       tak ada
; 0000 0381 *	RETURN		:       tak ada
; 0000 0382 */
; 0000 0383 {
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
; 0000 0384 	int i;
; 0000 0385         static char buff_posisi[17];
; 0000 0386 
; 0000 0387         // aktifkan USART param. : 4800baudrate, 8, N, 1
; 0000 0388         init_usart();
;PCODE: $00000218 VOL: 0
;	i -> R16,R17
;PCODE: $00000219 VOL: 0
; 0000 0389 
; 0000 038A         /************************************************************************************************
; 0000 038B         	$GPGLL - GLL - Geographic Position Latitude / Longitude
; 0000 038C 
; 0000 038D                 Contoh : $GPGLL,3723.2475,N,12158.3416,W,161229.487,A*2C
; 0000 038E 
; 0000 038F         |-----------------------------------------------------------------------------------------------|
; 0000 0390         |	Nama		| 	Contoh		|		Deskripsi			|
; 0000 0391         |-----------------------|-----------------------|-----------------------------------------------|
; 0000 0392         |	Message ID	|	$GPGLL		|	header protokol GLL			|
; 0000 0393         |	Latitude	|	3723.2475	|	ddmm.mmmm 	, d=degree, m=minute	|
; 0000 0394         |	N/S indicator	|	N		|	N=utara, S=selatan			|
; 0000 0395         |	Longitude	|	12158.3416	|	dddmm.mmmm	, d=degree, m=minute	|
; 0000 0396         |	W/E indicator	|	W		|	W=barat, E=timur			|
; 0000 0397         |	Waktu UTC (GMT)	|	161229.487	|	HHMMSS.SS  ,H=hour, M=minute, S=second	|
; 0000 0398         |	Status		|	A		|	A=data valid, V=data invalid		|
; 0000 0399         |	Checksum	|	*2C		|						|
; 0000 039A         |-----------------------------------------------------------------------------------------------|
; 0000 039B 
; 0000 039C         	Sumber : GPS SiRF EM-406A datasheet
; 0000 039D 
; 0000 039E         *************************************************************************************************/
; 0000 039F 
; 0000 03A0         // jika data yang diterima bukan karakter $, terima terus
; 0000 03A1         	// jika data yang diterima adalah $, lanjutkan
; 0000 03A2         while(getchar() != '$');
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 03A3 
; 0000 03A4         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter G)
; 0000 03A5 	getchar();
;PCODE: $00000220 VOL: 0
; 0000 03A6 
; 0000 03A7         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter P)
; 0000 03A8         getchar();
;PCODE: $00000221 VOL: 0
; 0000 03A9 
; 0000 03AA         // tunggu data, jika yang diterima adalah karakter G
; 0000 03AB         if(getchar() == 'R')
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
; 0000 03AC         {
; 0000 03AD         	// maka
; 0000 03AE         	// tunggu data, jika yang diterima adalah karakter L
; 0000 03AF                 if(getchar() == 'M')
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 03B0         	{
; 0000 03B1                 	// maka
; 0000 03B2                         // tunggu data, jika yang diterima adalah karakter L
; 0000 03B3                         if(getchar() == 'C')
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
; 0000 03B4                 	{
; 0000 03B5                         	// maka
; 0000 03B6                                 // tunggu koma dan lanjutkan
; 0000 03B7                                 getComma();
;PCODE: $0000022B VOL: 0
; 0000 03B8                                 getComma();
;PCODE: $0000022C VOL: 0
; 0000 03B9                                 getComma();
;PCODE: $0000022D VOL: 0
; 0000 03BA 
; 0000 03BB                                 // ambil 7 byte data berurut dan masukkan dalam buffer data
; 0000 03BC                         	for(i=0; i<7; i++)	buff_posisi[i] = getchar();
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 03BF getComma();
;PCODE: $00000242 VOL: 0
; 0000 03C0 
; 0000 03C1                                 // ambil 1 byte data dan masukkan dalam buffer data
; 0000 03C2                                 buff_posisi[7] = getchar();
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 03C3 
; 0000 03C4                                 // tunggu koma dan lanjutkan
; 0000 03C5                                 getComma();
;PCODE: $00000246 VOL: 0
; 0000 03C6 
; 0000 03C7                                 // ambil 8 byte data berurut dan masukkan dalam buffer data
; 0000 03C8                                 for(i=0; i<8; i++)	buff_posisi[i+8] = getchar();
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 03CB getComma();
;PCODE: $0000025C VOL: 0
; 0000 03CC 
; 0000 03CD                                 // ambil 1 byte data dan masukkan dalam buffer data
; 0000 03CE                                 buff_posisi[16] = getchar();
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
; 0000 03CF 
; 0000 03D0                                 // segera matikan USART untuk menghindari interupsi [USART_RXC]
; 0000 03D1                                 clear_usart();
;PCODE: $00000260 VOL: 0
; 0000 03D2 
; 0000 03D3                                 // pindahkan data dari buffer kedalam variabel posisi
; 0000 03D4                                 for(i=0;i<8;i++)	{posisi_lat[i]=buff_posisi[i];}
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 03D5         			for(i=0;i<9;i++)	{posisi_long[i]=buff_posisi[i+8];}
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 03D6 
; 0000 03D7                         }
; 0000 03D8                 }
;PCODE: $0000028C VOL: 0
; 0000 03D9         }
;PCODE: $0000028D VOL: 0
; 0000 03DA 
; 0000 03DB } 	// EndOf void ekstrak_gps(void)
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;
;
;/***************************************************************************************/
;	void 			init_usart(void)
; 0000 03E0 /***************************************************************************************
; 0000 03E1 *	ABSTRAKSI  	: 	Setting parameter USART : RX only, 4800baud, 8, N, 1
; 0000 03E2 *
; 0000 03E3 *      	INPUT		:	tak ada
; 0000 03E4 *	OUTPUT		:       tak ada
; 0000 03E5 *	RETURN		:       tak ada
; 0000 03E6 */
; 0000 03E7 {
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 03E8 	// set parameter 4800baud, 8, N, 1
; 0000 03E9 	UCSRA=0x00;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 03EA 	UCSRB=0x10;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 03EB 	UCSRC=0x06;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 03EC 	UBRRH=0x00;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 03ED 	UBRRL=0x8F;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 03EE 
; 0000 03EF }       // EndOf void init_usart(void)
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;
;
;/***************************************************************************************/
;	void 			clear_usart(void)
; 0000 03F4 /***************************************************************************************
; 0000 03F5 *	ABSTRAKSI  	: 	Me-nonaktifkan dan menghapus parameter USART
; 0000 03F6 *
; 0000 03F7 *      	INPUT		:	tak ada
; 0000 03F8 *	OUTPUT		:       tak ada
; 0000 03F9 *	RETURN		:       tak ada
; 0000 03FA */
; 0000 03FB {
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 03FC 	// hapus parameter terakhir dari USART
; 0000 03FD         UCSRA=0;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 03FE 	UCSRB=0;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 03FF 	UCSRC=0;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0400 	UBRRH=0;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0401 	UBRRL=0;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0402 
; 0000 0403 }       // EndOf void clear_usart(void)
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;
;
;/***************************************************************************************/
;	void 			timer_detik(char detik)
; 0000 0408 /***************************************************************************************
; 0000 0409 *	ABSTRAKSI  	: 	Menghitung nilai register TCNT1H dan TCNT1L dari input nilai
; 0000 040A *				konstanta timer dalam satuan detik. Formula untuk menghitung
; 0000 040B *				nilai register :
; 0000 040C *				_TCNT1 = (TCNT1H << 8) + TCNT1L
; 0000 040D *				_TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
; 0000 040E *
; 0000 040F *      	INPUT		:	konstanta timer dalam satuan detik
; 0000 0410 *	OUTPUT		:       tak ada
; 0000 0411 *	RETURN		:       tak ada
; 0000 0412 */
; 0000 0413 {
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 0414 	unsigned short _TCNT1;
; 0000 0415 
; 0000 0416         // hitung nilai vaiabel _TCNT1 dari nilai input berdasarkan formula :
; 0000 0417          	// _TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
; 0000 0418                 // menjadi bilangan 16 bit
; 0000 0419 	_TCNT1 = (1 + 0xFFFF) - (detik * 10800);
;PCODE: $000002B0 VOL: 0
;	detik -> Y+2
;	_TCNT1 -> R16,R17
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 041A 
; 0000 041B         // ambil 8 bit paling kanan dan jadikan nilai register TCNT1L
; 0000 041C         TCNT1L = _TCNT1 & 0xFF;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 041D 
; 0000 041E         // ambil 8 bit paling kiri dan jadikan nilai register TCNT1H
; 0000 041F         TCNT1H = _TCNT1 >> 8;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0420 
; 0000 0421 }       // EndOf void timer_detik(char detik)
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;
;
;/***************************************************************************************/
;	void main(void)
; 0000 0426 /***************************************************************************************
; 0000 0427 *
; 0000 0428 *	MAIN PROGRAM
; 0000 0429 *
; 0000 042A */
; 0000 042B {
;PCODE: $000002C4 VOL: 0
; 0000 042C 	// pengaturan clock CPU dan menjaga agar kompatibel dengan versi code vision terdahulu
; 0000 042D #pragma optsize-
; 0000 042E 	CLKPR=0x80;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 042F 	CLKPR=0x00;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 0430 	#ifdef _OPTIMIZE_SIZE_
; 0000 0431 #pragma optsize+
; 0000 0432 	#endif
; 0000 0433 
; 0000 0434         // set bit register PORTB
; 0000 0435         PORTB=0x00;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 0436 
; 0000 0437         // set bit Data Direction Register PORTB
; 0000 0438 	DDRB=0xF8;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0439 
; 0000 043A         // set bit register PORTD
; 0000 043B         PORTD=0x09;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 043C 
; 0000 043D         // set bit Data Direction Register PORTD
; 0000 043E 	DDRD=0x30;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 043F 
; 0000 0440         // set register Analog Comparator
; 0000 0441         ACSR=0x80;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0442 
; 0000 0443         // set register EXT_IRQ_1 (External Interrupt 1 Request), Low Interrupt
; 0000 0444 	GIMSK=0x80;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 0445 	MCUCR=0x08;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 0446 	EIFR=0x80;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0447 
; 0000 0448         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
; 0000 0449 	TCCR1B=0x05;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 044A 
; 0000 044B         // set konstanta waktu 5 detik sebagai awalan
; 0000 044C         timer_detik(INITIAL_TIME_C);
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
; 0000 044D 
; 0000 044E         // set interupsi timer untuk Timer 1
; 0000 044F         TIMSK=0x80;
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 0450 
; 0000 0451         // enable watchdog dan set nilai register untuk overflow :
; 0000 0452 // preprosesor direktif #pragma's
; 0000 0453 #pragma optsize-
; 0000 0454 
; 0000 0455 	/*=======================================================
; 0000 0456         |                                         		|
; 0000 0457         |	WATCHDOG OVERFLOW'S TIME CONSTANTS             	|
; 0000 0458         |							|
; 0000 0459         |-------------------------------------------------------|
; 0000 045A         |	WDTCR	|	WDTCR	|	OVERFLOW	|
; 0000 045B         |---------------|---------------|-----------------------|
; 0000 045C         |	0x39	|	0x29	|	8 DETIK		|
; 0000 045D         |	0x38	|	0x28	|	4 DETIK		|
; 0000 045E         |	0x1F	|	0x0F	|	2 DETIK		|
; 0000 045F         |	0x1E	|	0x0E	|	1 DETIK		|
; 0000 0460         |-------------------------------------------------------|
; 0000 0461         | Sumber : ATMEL datasheet for ATTINY2313               |
; 0000 0462         ========================================================*/
; 0000 0463 
; 0000 0464         // set konstanta waktu watchdog overflow
; 0000 0465         WDTCR=0x39;
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
; 0000 0466 	WDTCR=0x29;
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0467 	#ifdef _OPTIMIZE_SIZE_
; 0000 0468 #pragma optsize+
; 0000 0469 	#endif
; 0000 046A 
; 0000 046B         // indikator awalan hardware aktif :
; 0000 046C         // nyalakan LED busy
; 0000 046D         L_BUSY = 1;
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 046E 
; 0000 046F         // tunggu 500ms
; 0000 0470         delay_ms(500);
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
; 0000 0471 
; 0000 0472         // nyalakan LED standby
; 0000 0473         L_STBY = 1;
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0474 
; 0000 0475         // tunggu 500ms
; 0000 0476         delay_ms(500);
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
; 0000 0477 
; 0000 0478         // matikan LED busy
; 0000 0479         L_BUSY = 0;
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 047A 
; 0000 047B         // tunggu 500ms
; 0000 047C         delay_ms(500);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
; 0000 047D 
; 0000 047E         // aktifkan interupsi global (berdasar setting register)
; 0000 047F         #asm("sei")
;PCODE: $000002F3 VOL: 0
	sei
;PCODE: $000002F4 VOL: 0
; 0000 0480 
; 0000 0481         // tidak lakukan apapun selain menunggu interupsi timer1_ovf_isr
; 0000 0482         while (1)
;PCODE: $000002F5 VOL: 0
; 0000 0483         {
; 0000 0484         	// blok ini kosong
; 0000 0485         };
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0486 
; 0000 0487 }	// END OF MAIN PROGRAM
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;/*
;*
;*	END OF FILE
;*
;****************************************************************************************/
