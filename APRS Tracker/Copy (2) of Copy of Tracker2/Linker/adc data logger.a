;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 4/25/2014
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega16
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 256
;*****************************************************/
;
;#include <mega16.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;// Alphanumeric LCD Module functions
;#include <alcd.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0023 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0024 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0025 // Delay needed for the stabilization of the ADC input voltage
; 0000 0026 delay_us(10);
;PCODE: $00000012 VOL: 0
; 0000 0027 // Start the AD conversion
; 0000 0028 ADCSRA|=0x40;
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0029 // Wait for the AD conversion to complete
; 0000 002A while ((ADCSRA & 0x10)==0);
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 002B ADCSRA|=0x10;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 002C return ADCW;
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 002D }
;PCODE: $00000020 VOL: 0
;
;// Declare your global variables here
;char lcd[32];
;#include <stdio.h>
;
;void adc_to_lcd (char adc_in)
; 0000 0034 {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0035 	sprintf(lcd,"%i",read_adc(adc_in));
;	adc_in -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0036         lcd_puts(lcd);
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0037         delay_ms(100);
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0038         lcd_clear();
;PCODE: $00000037 VOL: 0
; 0000 0039 }
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;
;void main(void)
; 0000 003C {
;PCODE: $0000003B VOL: 0
; 0000 003D // Declare your local variables here
; 0000 003E 
; 0000 003F // Input/Output Ports initialization
; 0000 0040 // Port A initialization
; 0000 0041 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0042 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0043 PORTA=0x00;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0044 DDRA=0x00;
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0045 
; 0000 0046 // Port B initialization
; 0000 0047 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 0048 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 0049 PORTB=0x00;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 004A DDRB=0x00;
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 004B 
; 0000 004C // Port C initialization
; 0000 004D // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 004E // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 004F PORTC=0x00;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 0050 DDRC=0xFF;
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 0051 
; 0000 0052 // Port D initialization
; 0000 0053 // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0054 // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0055 PORTD=0x00;
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0056 DDRD=0xFF;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 0057 
; 0000 0058 // Timer/Counter 0 initialization
; 0000 0059 // Clock source: System Clock
; 0000 005A // Clock value: Timer 0 Stopped
; 0000 005B // Mode: Normal top=0xFF
; 0000 005C // OC0 output: Disconnected
; 0000 005D TCCR0=0x00;
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
; 0000 005E TCNT0=0x00;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 005F OCR0=0x00;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0060 
; 0000 0061 // Timer/Counter 1 initialization
; 0000 0062 // Clock source: System Clock
; 0000 0063 // Clock value: Timer1 Stopped
; 0000 0064 // Mode: Normal top=0xFFFF
; 0000 0065 // OC1A output: Discon.
; 0000 0066 // OC1B output: Discon.
; 0000 0067 // Noise Canceler: Off
; 0000 0068 // Input Capture on Falling Edge
; 0000 0069 // Timer1 Overflow Interrupt: Off
; 0000 006A // Input Capture Interrupt: Off
; 0000 006B // Compare A Match Interrupt: Off
; 0000 006C // Compare B Match Interrupt: Off
; 0000 006D TCCR1A=0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 006E TCCR1B=0x00;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 006F TCNT1H=0x00;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0070 TCNT1L=0x00;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0071 ICR1H=0x00;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0072 ICR1L=0x00;
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 0073 OCR1AH=0x00;
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 0074 OCR1AL=0x00;
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
; 0000 0075 OCR1BH=0x00;
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0076 OCR1BL=0x00;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 0077 
; 0000 0078 // Timer/Counter 2 initialization
; 0000 0079 // Clock source: System Clock
; 0000 007A // Clock value: Timer2 Stopped
; 0000 007B // Mode: Normal top=0xFF
; 0000 007C // OC2 output: Disconnected
; 0000 007D ASSR=0x00;
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 007E TCCR2=0x00;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007F TCNT2=0x00;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0080 OCR2=0x00;
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 0081 
; 0000 0082 // External Interrupt(s) initialization
; 0000 0083 // INT0: Off
; 0000 0084 // INT1: Off
; 0000 0085 // INT2: Off
; 0000 0086 MCUCR=0x00;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 0087 MCUCSR=0x00;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
; 0000 0088 
; 0000 0089 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 008A TIMSK=0x00;
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 008B 
; 0000 008C // USART initialization
; 0000 008D // USART disabled
; 0000 008E UCSRB=0x00;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
; 0000 008F 
; 0000 0090 // Analog Comparator initialization
; 0000 0091 // Analog Comparator: Off
; 0000 0092 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0093 ACSR=0x80;
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0094 SFIOR=0x00;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
; 0000 0095 
; 0000 0096 // ADC initialization
; 0000 0097 // ADC Clock frequency: 691.200 kHz
; 0000 0098 // ADC Voltage Reference: AREF pin
; 0000 0099 // ADC Auto Trigger Source: ADC Stopped
; 0000 009A ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 009B ADCSRA=0x84;
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 009C 
; 0000 009D // SPI initialization
; 0000 009E // SPI disabled
; 0000 009F SPCR=0x00;
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
; 0000 00A0 
; 0000 00A1 // TWI initialization
; 0000 00A2 // TWI disabled
; 0000 00A3 TWCR=0x00;
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 00A4 
; 0000 00A5 // Alphanumeric LCD initialization
; 0000 00A6 // Connections specified in the
; 0000 00A7 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
; 0000 00A8 // RS - PORTC Bit 0
; 0000 00A9 // RD - PORTC Bit 1
; 0000 00AA // EN - PORTC Bit 2
; 0000 00AB // D4 - PORTC Bit 4
; 0000 00AC // D5 - PORTC Bit 5
; 0000 00AD // D6 - PORTC Bit 6
; 0000 00AE // D7 - PORTC Bit 7
; 0000 00AF // Characters/line: 8
; 0000 00B0 lcd_init(8);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
; 0000 00B1 
; 0000 00B2 while (1)
;PCODE: $00000085 VOL: 0
; 0000 00B3       {
; 0000 00B4       // Place your code here
; 0000 00B5       	adc_to_lcd(0);
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
; 0000 00B6         adc_to_lcd(1);
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00B7         adc_to_lcd(2);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 00B8       }
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
; 0000 00B9 }
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
