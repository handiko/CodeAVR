;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/14/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;/******************* ADC ***************************/
;
;#include <delay.h>
;
;#define ADC_VREF_TYPE 0x20
;#define ADC_BUSY_LED    PORTC.4
;#define I_ADC_BUSY_LED  PORTC.5
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 0025 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0026     ADC_BUSY_LED = 1;
;	adc_input -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0027     I_ADC_BUSY_LED = 0;
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
; 0000 0028 
; 0000 0029     ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 002A 
; 0000 002B     // Delay needed for the stabilization of the ADC input voltage
; 0000 002C     delay_us(10);
;PCODE: $00000016 VOL: 0
; 0000 002D 
; 0000 002E     // Start the AD conversion
; 0000 002F     ADCSRA|=0x40;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0030 
; 0000 0031     // Wait for the AD conversion to complete
; 0000 0032     while ((ADCSRA & 0x10)==0);
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0033     ADCSRA|=0x10;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0034 
; 0000 0035     ADC_BUSY_LED = 0;
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 0036 
; 0000 0037     return ADCH;
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
; 0000 0038 }
;PCODE: $00000026 VOL: 0
;
;/******************* END OF ADC ********************/
;
;/********************** USART INTERRUPT*************************/
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 8
;unsigned char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE <= 256
;    unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;    unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 006F {
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0070     unsigned char status,data;
; 0000 0071     status=UCSRA;
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 0072     data=UDR;
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0073     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0074     {
; 0000 0075         rx_buffer[rx_wr_index++]=data;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 0076         #if RX_BUFFER_SIZE == 256
; 0000 0077             // special case for receiver buffer size=256
; 0000 0078             if (++rx_counter == 0)
; 0000 0079             {
; 0000 007A         #else
; 0000 007B             if (rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 007C             if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 007D             {
; 0000 007E                 rx_counter=0;
;PCODE: $00000040 VOL: 0
; 0000 007F         #endif
; 0000 0080                 rx_buffer_overflow=1;
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0081             }
; 0000 0082     }
;PCODE: $00000044 VOL: 0
; 0000 0083 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;unsigned char getchar(void)
; 0000 008A {
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
; 0000 008B     unsigned char data;
; 0000 008C     while (rx_counter==0);
;PCODE: $0000004C VOL: 0
;	data -> R17
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 008D     data=rx_buffer[rx_rd_index++];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 008E     #if RX_BUFFER_SIZE != 256
; 0000 008F         if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 0090     #endif
; 0000 0091     #asm("cli")
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
	cli
;PCODE: $0000005D VOL: 0
; 0000 0092     --rx_counter;
;PCODE: $0000005E VOL: 0
; 0000 0093     #asm("sei")
;PCODE: $0000005F VOL: 0
	sei
;PCODE: $00000060 VOL: 0
; 0000 0094     return data;
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 0095 }
;PCODE: $00000064 VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;unsigned char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE <= 256
;    unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;    unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 00A5 {
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 00A6     if (tx_counter)
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00A7     {
; 0000 00A8         --tx_counter;
;PCODE: $00000069 VOL: 0
; 0000 00A9         UDR=tx_buffer[tx_rd_index++];
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 00AA         #if TX_BUFFER_SIZE != 256
; 0000 00AB             if (tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 00AC         #endif
; 0000 00AD     }
;PCODE: $00000074 VOL: 0
; 0000 00AE }
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(unsigned char c)
; 0000 00B5 {
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00B6     while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00B7     #asm("cli")
;PCODE: $00000081 VOL: 0
	cli
;PCODE: $00000082 VOL: 0
; 0000 00B8     if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00B9     {
; 0000 00BA         tx_buffer[tx_wr_index++]=c;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00BB         #if TX_BUFFER_SIZE != 256
; 0000 00BC             if (tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00BD         #endif
; 0000 00BE         ++tx_counter;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00BF     }
; 0000 00C0     else
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00C1     UDR=c;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00C2     #asm("sei")
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
	sei
;PCODE: $0000009C VOL: 0
; 0000 00C3 }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;/**************************** END OF USART INTERRUPT*************/
;
;/**************************** MACRO ****************************/
;
;#define TIME_CONST_1  100
;
;#if TIME_CONST_1 > 200
;#error "TIME_CONST_1 harus bernilai dibawah 200"
;#endif
;
;#define PTT_ON  (PORTB = 0xFF)
;#define PTT_OFF (PORTB = 0x00)
;#define DEBUG_PORT  PIND.7
;#define TX_LED  PORTC.0
;#define RX_LED  PORTC.1
;#define _1200_BAUD  PORTC.2
;#define _38400_BAUD PORTC.3
;#define CARRIER_DETECT  PIND.6
;
;/**************************** GLOBAL VARIABLE ******************/
;
;unsigned char   sensor_1[TIME_CONST_1] ,
;                sensor_2[TIME_CONST_1] ,
;                sensor_3[TIME_CONST_1] ,
;                sensor_4[TIME_CONST_1] ;
;
;eeprom unsigned char   sensor_1_min , sensor_2_min , sensor_3_min , sensor_4_min ,
;                    sensor_1_ave , sensor_2_ave , sensor_3_ave , sensor_4_ave ,
;                    sensor_1_max , sensor_2_max , sensor_3_max , sensor_4_max ;
;
;/**************************** FUNCTION DECLARATION *************/
;void set_time_gap(void);
;void init_port_a(void);
;void init_port_b(void);
;void init_port_c(void);
;void init_port_d(void);
;void init_timer(void);
;void init_usart(unsigned int baud);
;void kirim_data(void);
;void init_adc(void);
;void olah_data(void);
;void receive_command(void);
;
;/******************* TIMER 0 sampling adc **********************/
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00F8 {
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00F9     // Place your code here
; 0000 00FA     // time gap ???
; 0000 00FB     TCNT0=0x01;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00FC }
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;
;/******************* TIMER 1 transmit data *********************/
;#if TIME_CONST_1 < 128
;    char timer1_count;
;#else
;    unsigned char timer1_count;
;#endif
;void set_time_gap(void)
; 0000 0105 {
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
; 0000 0106     /*
; 0000 0107     // time gap 30ms
; 0000 0108     TCNT1H=0xFE;
; 0000 0109     TCNT1L=0xBC;
; 0000 010A     */
; 0000 010B 
; 0000 010C     // time gap 20ms
; 0000 010D     TCNT1H=0xFF;
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
; 0000 010E     TCNT1L=0x28;
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 010F }
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0113 {
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
; 0000 0114     // Place your code here
; 0000 0115     timer1_count++;
;PCODE: $000000B1 VOL: 0
; 0000 0116 
; 0000 0117     if(timer1_count < TIME_CONST_1)
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0118     {
; 0000 0119         sensor_1[timer1_count] = read_adc(0);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 011A         sensor_2[timer1_count] = read_adc(1);
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 011B         sensor_3[timer1_count] = read_adc(2);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 011C         sensor_4[timer1_count] = read_adc(3);
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 011D 
; 0000 011E         if(CARRIER_DETECT)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 011F         {
; 0000 0120             if((timer1_count % 30) == 0)
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0121             {
; 0000 0122                 init_usart(1200);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
; 0000 0123                 receive_command();
;PCODE: $000000E5 VOL: 0
; 0000 0124             }
; 0000 0125         }
;PCODE: $000000E6 VOL: 0
; 0000 0126         if(!DEBUG_PORT)
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
; 0000 0127         {
; 0000 0128             if((timer1_count % 30) == 0)
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
; 0000 0129             {
; 0000 012A                 init_usart(38400);
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
; 0000 012B                 putsf("debug ready ");
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
; 0000 012C             }
; 0000 012D         }
;PCODE: $000000F8 VOL: 0
; 0000 012E     }
;PCODE: $000000F9 VOL: 0
; 0000 012F     if(timer1_count == TIME_CONST_1)
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
; 0000 0130     {
; 0000 0131         timer1_count = 0;
;PCODE: $000000FE VOL: 0
; 0000 0132 
; 0000 0133         init_usart(1200);
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 0134 
; 0000 0135         olah_data();
;PCODE: $00000102 VOL: 0
; 0000 0136 
; 0000 0137         RX_LED = 0;
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 0138         TX_LED = 1;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
; 0000 0139         PTT_ON;
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 013A         delay_ms(300);
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 013B 
; 0000 013C         kirim_data();
;PCODE: $0000010C VOL: 0
; 0000 013D         kirim_data();
;PCODE: $0000010D VOL: 0
; 0000 013E         kirim_data();
;PCODE: $0000010E VOL: 0
; 0000 013F 
; 0000 0140         delay_ms(150);
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 0141         PTT_OFF;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0142         TX_LED = 0;
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
; 0000 0143     }
; 0000 0144 
; 0000 0145     set_time_gap();
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
; 0000 0146 }
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;
;// Declare your global variables here
;
;void init_port_a(void)
; 0000 014B {
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
; 0000 014C     // Port A initialization
; 0000 014D     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 014E     // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=P
; 0000 014F     PORTA=0x01;
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0150     DDRA=0x00;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 0151 }
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;
;void init_port_b(void)
; 0000 0154 {
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 0155     // Port B initialization
; 0000 0156     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0157     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0158     PORTB=0x00;
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0159     DDRB=0xFF;
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 015A }
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;
;void init_port_c(void)
; 0000 015D {
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
; 0000 015E     // Port C initialization
; 0000 015F     // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0160     // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0161     PORTC=0x00;
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0162     DDRC=0xFF;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0163 }
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;
;void init_port_d(void)
; 0000 0166 {
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0167     // Port D initialization
; 0000 0168     // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 0169     // State7=P State6=P State5=P State4=P State3=P State2=P State1=1 State0=P
; 0000 016A     PORTD=0xFF;
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
; 0000 016B     DDRD=0x02;
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 016C }
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;
;void init_timer(void)
; 0000 016F {
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
; 0000 0170     // TIMER 0 sampling ADC
; 0000 0171 
; 0000 0172     // Timer/Counter 0 initialization
; 0000 0173     // Clock source: System Clock
; 0000 0174     // Clock value: 10.800 kHz
; 0000 0175     // Mode: Normal top=0xFF
; 0000 0176     // OC0 output: Disconnected
; 0000 0177     TCCR0=0x05;
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
; 0000 0178     TCNT0=0xCA;
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 0179     OCR0=0x00;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
; 0000 017A 
; 0000 017B     // TIMER_1 transmit data
; 0000 017C 
; 0000 017D     // Timer/Counter 1 initialization
; 0000 017E     // Clock source: System Clock
; 0000 017F     // Clock value: 10.800 kHz
; 0000 0180     // Mode: Normal top=0xFFFF
; 0000 0181     // OC1A output: Discon.
; 0000 0182     // OC1B output: Discon.
; 0000 0183     // Noise Canceler: Off
; 0000 0184     // Input Capture on Falling Edge
; 0000 0185     // Timer1 Overflow Interrupt: On
; 0000 0186     // Input Capture Interrupt: Off
; 0000 0187     // Compare A Match Interrupt: Off
; 0000 0188     // Compare B Match Interrupt: Off
; 0000 0189     TCCR1A=0x00;
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 018A     TCCR1B=0x05;
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 018B 
; 0000 018C     set_time_gap();
;PCODE: $00000147 VOL: 0
; 0000 018D }
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;
;void init_usart(unsigned int baud)
; 0000 0190 {
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0191     if(baud==1200)
;	baud -> Y+0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 0192     {
; 0000 0193         // USART initialization
; 0000 0194         // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0195         // USART Receiver: On
; 0000 0196         // USART Transmitter: On
; 0000 0197         // USART Mode: Asynchronous
; 0000 0198         // USART Baud Rate: 1200
; 0000 0199         UCSRA=0x00;
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 019A         UCSRB=0xD8;
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 019B         UCSRC=0x86;
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
; 0000 019C         UBRRH=0x02;
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 019D         UBRRL=0x3F;
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 019E 
; 0000 019F         _1200_BAUD = 1;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 01A0         _38400_BAUD = 0;
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 01A1     }
; 0000 01A2 
; 0000 01A3     if(baud==38400)
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 01A4     {
; 0000 01A5         // USART initialization
; 0000 01A6         // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01A7         // USART Receiver: On
; 0000 01A8         // USART Transmitter: On
; 0000 01A9         // USART Mode: Asynchronous
; 0000 01AA         // USART Baud Rate: 38400
; 0000 01AB         UCSRA=0x00;
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 01AC         UCSRB=0xD8;
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
; 0000 01AD         UCSRC=0x86;
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 01AE         UBRRH=0x00;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 01AF         UBRRL=0x11;
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
; 0000 01B0 
; 0000 01B1         _1200_BAUD = 0;
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 01B2         _38400_BAUD = 1;
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 01B3     }
; 0000 01B4 }
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;
;#define SEPARATOR   ','
;void kirim_data(void)
; 0000 01B8 {
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
; 0000 01B9     putchar('$');
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
; 0000 01BA 
; 0000 01BB     putchar('3');
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 01BC     putchar('S');
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 01BD     putchar('E');
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
; 0000 01BE     putchar('C');
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
; 0000 01BF 
; 0000 01C0     putchar(SEPARATOR);
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
; 0000 01C1     putchar(sensor_1_min);
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01C2     putchar(sensor_1_ave);
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 01C3     putchar(sensor_1_max);
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
; 0000 01C4 
; 0000 01C5     putchar(sensor_2_min);
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
; 0000 01C6     putchar(sensor_2_ave);
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 01C7     putchar(sensor_2_max);
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
; 0000 01C8 
; 0000 01C9     putchar(sensor_3_min);
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
; 0000 01CA     putchar(sensor_3_ave);
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
; 0000 01CB     putchar(sensor_3_max);
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
; 0000 01CC 
; 0000 01CD     putchar(sensor_4_min);
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
; 0000 01CE     putchar(sensor_4_ave);
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 01CF     putchar(sensor_4_max);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
; 0000 01D0 
; 0000 01D1     putchar(SEPARATOR);
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
; 0000 01D2     putchar('*');
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 01D3 
; 0000 01D4     putchar(13);
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 01D5 }
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;
;void init_adc(void)
; 0000 01D8 {
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01D9     // ADC initialization
; 0000 01DA     // ADC Clock frequency: 86.400 kHz
; 0000 01DB     // ADC Voltage Reference: AREF pin
; 0000 01DC     // Only the 8 most significant bits of
; 0000 01DD     // the AD conversion result are used
; 0000 01DE     ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 01DF     ADCSRA=0x87;
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
; 0000 01E0 }
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;
;void olah_data(void)
; 0000 01E3 {
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 01E4     #if TIME_CONST_1 < 128
; 0000 01E5         char i;
; 0000 01E6     #else
; 0000 01E7         unsigned char i;
; 0000 01E8     #endif
; 0000 01E9 
; 0000 01EA     unsigned int ave_temp_1 = 0 , ave_temp_2 = 0 , ave_temp_3 = 0 , ave_temp_4 = 0;
; 0000 01EB 
; 0000 01EC     sensor_1_min = 255;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;	i -> R17
;	ave_temp_1 -> R18,R19
;	ave_temp_2 -> R20,R21
;	ave_temp_3 -> Y+8
;	ave_temp_4 -> Y+6
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
; 0000 01ED     sensor_1_ave = 0;
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 01EE     sensor_1_max = 0;
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
; 0000 01EF 
; 0000 01F0     sensor_2_min = 255;
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 01F1     sensor_2_ave = 0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 01F2     sensor_2_max = 0;
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
; 0000 01F3 
; 0000 01F4     sensor_3_min = 255;
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 01F5     sensor_3_ave = 0;
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
; 0000 01F6     sensor_3_max = 0;
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 01F7 
; 0000 01F8     sensor_4_min = 255;
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
; 0000 01F9     sensor_4_ave = 0;
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
; 0000 01FA     sensor_4_max = 0;
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
; 0000 01FB 
; 0000 01FC     for(i=0;i<TIME_CONST_1;i++)
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 01FD     {
; 0000 01FE         if(sensor_1[i] < sensor_1_min) sensor_1_min = sensor_1[i];
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
; 0000 01FF         if(sensor_1[i] > sensor_1_max) sensor_1_max = sensor_1[i];
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
; 0000 0200         ave_temp_1 += sensor_1[i];
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0201 
; 0000 0202         if(sensor_2[i] < sensor_2_min) sensor_2_min = sensor_2[i];
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 0203         if(sensor_2[i] > sensor_2_max) sensor_2_max = sensor_2[i];
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
; 0000 0204         ave_temp_2 += sensor_2[i];
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
; 0000 0205 
; 0000 0206         if(sensor_3[i] < sensor_3_min) sensor_3_min = sensor_3[i];
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 0207         if(sensor_3[i] > sensor_3_max) sensor_3_max = sensor_3[i];
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0208         ave_temp_3 += sensor_3[i];
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
; 0000 0209 
; 0000 020A         if(sensor_4[i] < sensor_4_min) sensor_4_min = sensor_4[i];
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 020B         if(sensor_4[i] > sensor_4_max) sensor_4_max = sensor_4[i];
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 020C         ave_temp_4 += sensor_4[i];
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
; 0000 020D     }
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 020E 
; 0000 020F     sensor_1_ave = (unsigned char)(ave_temp_1 / TIME_CONST_1);
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
; 0000 0210     sensor_2_ave = (unsigned char)(ave_temp_2 / TIME_CONST_1);
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 0211     sensor_3_ave = (unsigned char)(ave_temp_3 / TIME_CONST_1);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
; 0000 0212     sensor_4_ave = (unsigned char)(ave_temp_4 / TIME_CONST_1);
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0213 }
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;
;void receive_command(void)
; 0000 0216 {
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0217     RX_LED = 1;
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0218 }
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;
;void main(void)
; 0000 021B {
;PCODE: $000002C0 VOL: 0
; 0000 021C     init_port_a();
;PCODE: $000002C1 VOL: 0
; 0000 021D     init_port_b();
;PCODE: $000002C2 VOL: 0
; 0000 021E     init_port_c();
;PCODE: $000002C3 VOL: 0
; 0000 021F     init_port_d();
;PCODE: $000002C4 VOL: 0
; 0000 0220     init_usart(1200);
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0221     init_adc();
;PCODE: $000002C8 VOL: 0
; 0000 0222     init_timer();
;PCODE: $000002C9 VOL: 0
; 0000 0223 
; 0000 0224     timer1_count = 0;
;PCODE: $000002CA VOL: 0
; 0000 0225 
; 0000 0226     // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0227     TIMSK=0x05;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 0228 
; 0000 0229     // Analog Comparator initialization
; 0000 022A     // Analog Comparator: Off
; 0000 022B     // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 022C     ACSR=0x80;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 022D     SFIOR=0x00;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 022E 
; 0000 022F     // Global enable interrupts
; 0000 0230     #asm("sei")
;PCODE: $000002D1 VOL: 0
	sei
;PCODE: $000002D2 VOL: 0
; 0000 0231 
; 0000 0232     while (1)
;PCODE: $000002D3 VOL: 0
; 0000 0233     {
; 0000 0234         // Place your code here
; 0000 0235     };
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 0236 }
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
