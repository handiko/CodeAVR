;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/20/2013
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega128
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 1024
;*****************************************************/
;
;#include <mega128.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x1C
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x18
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x14
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x1C
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x08
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;#include <stdlib.h>
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART0 Transmitter buffer
;#define TX_BUFFER_SIZE0 8
;char tx_buffer0[TX_BUFFER_SIZE0];
;
;#if TX_BUFFER_SIZE0 <= 256
;unsigned char tx_wr_index0,tx_rd_index0,tx_counter0;
;#else
;unsigned int tx_wr_index0,tx_rd_index0,tx_counter0;
;#endif
;
;// USART0 Transmitter interrupt service routine
;interrupt [USART0_TXC] void usart0_tx_isr(void)
; 0000 004C {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 004D if (tx_counter0)
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 004E    {
; 0000 004F    --tx_counter0;
;PCODE: $00000011 VOL: 0
; 0000 0050    UDR0=tx_buffer0[tx_rd_index0++];
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0051 #if TX_BUFFER_SIZE0 != 256
; 0000 0052    if (tx_rd_index0 == TX_BUFFER_SIZE0) tx_rd_index0=0;
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
; 0000 0053 #endif
; 0000 0054    }
;PCODE: $0000001C VOL: 0
; 0000 0055 }
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART0 Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(unsigned char c)
; 0000 005C {
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 005D while (tx_counter0 == TX_BUFFER_SIZE0);
;	c -> Y+0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 005E #asm("cli")
;PCODE: $00000029 VOL: 0
	cli
;PCODE: $0000002A VOL: 0
; 0000 005F if (tx_counter0 || ((UCSR0A & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
; 0000 0060    {
; 0000 0061    tx_buffer0[tx_wr_index0++]=c;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
; 0000 0062 #if TX_BUFFER_SIZE0 != 256
; 0000 0063    if (tx_wr_index0 == TX_BUFFER_SIZE0) tx_wr_index0=0;
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
; 0000 0064 #endif
; 0000 0065    ++tx_counter0;
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0066    }
; 0000 0067 else
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0068    UDR0=c;
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 0069 #asm("sei")
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
	sei
;PCODE: $00000044 VOL: 0
; 0000 006A }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define ADC_VREF_TYPE 0x00
;
;// Read the AD conversion result
;unsigned int read_adc(unsigned char adc_input)
; 0000 0075 {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0076 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 0077 // Delay needed for the stabilization of the ADC input voltage
; 0000 0078 delay_us(10);
;PCODE: $0000004D VOL: 0
; 0000 0079 // Start the AD conversion
; 0000 007A ADCSRA|=0x40;
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 007B // Wait for the AD conversion to complete
; 0000 007C while ((ADCSRA & 0x10)==0);
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 007D ADCSRA|=0x10;
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 007E return ADCW;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
; 0000 007F }
;PCODE: $0000005B VOL: 0
;
;// Declare your global variables here
;
;eeprom unsigned char op_string[25] =
;{
;        0xC0,0x00,
;        ('A'<<1),('P'<<1),('A'<<1),('V'<<1),('R'<<1),(' '<<1),('0'<<1),
;        ('S'<<1),('E'<<1),('R'<<1),('M'<<1),('O'<<1),(' '<<1),('0'<<1),
;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),(('2'<<1)+1),
;        0x03,0xF0
;};
;
;flash unsigned char pos[45] =
;{
;        "=0749.48S/11007.40Er Telemetry Waduk Sermo"
;};
;
;flash unsigned char def_t[43] =
;{      //:YD2JTF-1 :
;        ":SERMO    :PARM.Piezo1,Piezo2,W_Lvl,Cahaya"
;};
;
;flash unsigned char unit_t[37] =
;{      //:YD2JTF-1 :
;        ":SERMO    :UNIT.Volt,Volt,meter,Volt"
;};
;
;flash unsigned char eqn_t[62] =
;{
;        ":SERMO    :EQNS.0,0.019,0,0,0.019,0,0,0.004,0,0,0.019,0,0,1,0"
;};
;
;flash unsigned char cls_string[2] =
;{
;        0x0D,0xC0
;};
;
;//int t_idx = 0;
;//eeprom unsigned int e_t_idx = 250;
;eeprom int e_idx = 100;
;int _idx = 0;
;eeprom int _t_idx[3];
;eeprom unsigned char _ch1[3];
;eeprom unsigned char _ch2[3];
;eeprom unsigned char _ch3[3];
;eeprom unsigned char _ch4[3];
;eeprom unsigned char _ch5[3];
;
;char timer_idx = 0;
;
;void read_sensor(void)
; 0000 00B3 {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 00B4         unsigned char ch1,ch2,ch3,ch4,ch5;
; 0000 00B5         int rat,pul,sat;
; 0000 00B6         char _rat;
; 0000 00B7         char _pul;
; 0000 00B8         char _sat;
; 0000 00B9 
; 0000 00BA         unsigned char b_t_idx;
; 0000 00BB 
; 0000 00BC         ch1 = read_adc(0);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	ch1 -> R17
;	ch2 -> R16
;	ch3 -> R19
;	ch4 -> R18
;	ch5 -> R21
;	rat -> Y+13
;	pul -> Y+11
;	sat -> Y+9
;	_rat -> R20
;	_pul -> Y+8
;	_sat -> Y+7
;	b_t_idx -> Y+6
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 00BD 
; 0000 00BE         rat = ch1 / 100;
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
; 0000 00BF         ch1 = ch1 % 100;
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
; 0000 00C0         pul = ch1 / 10;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00C1         sat = ch1 % 10;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 00C2 
; 0000 00C3         _rat = rat + '0';
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 00C4         _pul = pul + '0';
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00C5         _sat = sat + '0';
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00C6 
; 0000 00C7         _ch1[0] = _rat;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00C8         _ch1[1] = _pul;
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00C9         _ch1[2] = _sat;
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 00CA 
; 0000 00CB         ch2 = read_adc(1);
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00CC 
; 0000 00CD         rat = ch2 / 100;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
; 0000 00CE         ch2 = ch2 % 100;
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00CF         pul = ch2 / 10;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00D0         sat = ch2 % 10;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00D1 
; 0000 00D2         _rat = rat + '0';
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00D3         _pul = pul + '0';
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00D4         _sat = sat + '0';
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
; 0000 00D5 
; 0000 00D6         _ch2[0] = _rat;
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00D7         _ch2[1] = _pul;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D8         _ch2[2] = _sat;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D9 
; 0000 00DA         ch3 = read_adc(2);
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00DB 
; 0000 00DC         rat = ch3 / 100;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
; 0000 00DD         ch3 = ch3 % 100;
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00DE         pul = ch3 / 10;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
; 0000 00DF         sat = ch3 % 10;
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E0 
; 0000 00E1         _rat = rat + '0';
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
; 0000 00E2         _pul = pul + '0';
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00E3         _sat = sat + '0';
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00E4 
; 0000 00E5         _ch3[0] = _rat;
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00E6         _ch3[1] = _pul;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00E7         _ch3[2] = _sat;
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
; 0000 00E8 
; 0000 00E9         ch4 = read_adc(3);
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
; 0000 00EA 
; 0000 00EB         rat = ch4 / 100;
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 00EC         ch4 = ch4 % 100;
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 00ED         pul = ch4 / 10;
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 00EE         sat = ch4 % 10;
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00EF 
; 0000 00F0         _rat = rat + '0';
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00F1         _pul = pul + '0';
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
; 0000 00F2         _sat = sat + '0';
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
; 0000 00F3 
; 0000 00F4         _ch4[0] = _rat;
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
; 0000 00F5         _ch4[1] = _pul;
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
; 0000 00F6         _ch4[2] = _sat;
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 00F7 
; 0000 00F8         ch5 = 0;
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00F9 
; 0000 00FA         rat = ch5 / 100;
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 00FB         ch5 = ch5 % 100;
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 00FC         pul = ch5 / 10;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
; 0000 00FD         sat = ch5 % 10;
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
; 0000 00FE 
; 0000 00FF         _rat = rat + '0';
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0100         _pul = pul + '0';
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0101         _sat = sat + '0';
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0102 
; 0000 0103         _ch5[0] = _rat;
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
; 0000 0104         _ch5[1] = _pul;
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
; 0000 0105         _ch5[2] = _sat;
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
; 0000 0106 
; 0000 0107         b_t_idx = _idx;
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
; 0000 0108 
; 0000 0109         rat = b_t_idx / 100;
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 010A         b_t_idx = b_t_idx % 100;
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 010B         pul = b_t_idx / 10;
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
; 0000 010C         sat = b_t_idx % 10;
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 010D 
; 0000 010E         _rat = rat + '0';
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
; 0000 010F         _pul = pul + '0';
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0110         _sat = sat + '0';
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
; 0000 0111 
; 0000 0112         _t_idx[0] = _rat;
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
; 0000 0113         _t_idx[1] = _pul;
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
; 0000 0114         _t_idx[2] = _sat;
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 0115 
; 0000 0116         _idx++;
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
; 0000 0117         //if(_idx > 999) _idx = 0;
; 0000 0118 
; 0000 0119         e_idx = _idx;
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
; 0000 011A }
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;
;void kirim_string(void)
; 0000 011D {
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 011E         int i;
; 0000 011F 
; 0000 0120         for(i=0;i<25;i++)
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;	i -> R16,R17
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
; 0000 0121         {
; 0000 0122                 putchar(op_string[i]);
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0123         }
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
; 0000 0124         for(i=0;i<45;i++)
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0125         {
; 0000 0126                 putchar(pos[i]);
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0127         }
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
; 0000 0128         for(i=0;i<2;i++)
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0129         {
; 0000 012A                 putchar(cls_string[i]);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 012B         }
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 012C 
; 0000 012D         putchar(13);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 012E 
; 0000 012F         delay_ms(1000);
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
; 0000 0130 }
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;
;void kirim_data_telem(void)
; 0000 0133 {
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
; 0000 0134         int i;
; 0000 0135 
; 0000 0136         read_sensor();
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;	i -> R16,R17
;PCODE: $000001BB VOL: 0
; 0000 0137 
; 0000 0138         for(i=0;i<25;i++)
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
; 0000 0139         {
; 0000 013A                                 putchar(op_string[i]);
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 013B         }
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 013C                                 putchar('T');
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
; 0000 013D                                 putchar('#');
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
; 0000 013E         for(i=0;i<3;i++)        putchar(_t_idx[i]);
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
; 0000 013F putchar(',');
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 0140         for(i=0;i<3;i++)        putchar(_ch1[i]);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0141 putchar(',');
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0142         for(i=0;i<3;i++)        putchar(_ch2[i]);
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0143 putchar(',');
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
; 0000 0144         for(i=0;i<3;i++)        putchar(_ch3[i]);
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
; 0000 0145 putchar(',');
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
; 0000 0146         for(i=0;i<3;i++)        putchar(_ch4[i]);
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0147 putchar(',');
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
; 0000 0148         for(i=0;i<3;i++)        putchar(_ch5[i]);
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
; 0000 0149 putchar(',');
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
; 0000 014A                                 puts("00000000");
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
; 0000 014B         for(i=0;i<2;i++)
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 014C         {
; 0000 014D                                 putchar(cls_string[i]);
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
; 0000 014E         }
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 014F 
; 0000 0150         putchar(13);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 0151 
; 0000 0152         delay_ms(1000);
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0153 }
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0

	.DSEG
_0x2E:
	.BYTE 0x9
;
;void kirim_param_telem(void)
; 0000 0156 {

	.CSEG
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
; 0000 0157         int i;
; 0000 0158 
; 0000 0159         for(i=0;i<25;i++)
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;	i -> R16,R17
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 015A         {
; 0000 015B                 putchar(op_string[i]);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
; 0000 015C         }
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 015D         for(i=0;i<43;i++)
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 015E         {
; 0000 015F                 putchar(def_t[i]);
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0160         }
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 0161         for(i=0;i<2;i++)
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 0162         {
; 0000 0163                 putchar(cls_string[i]);
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
; 0000 0164         }
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0165 
; 0000 0166         putchar(13);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
; 0000 0167 
; 0000 0168         delay_ms(1000);
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
; 0000 0169 }
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;
;void kirim_unit_telem(void)
; 0000 016C {
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 016D         int i;
; 0000 016E 
; 0000 016F         for(i=0;i<25;i++)
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;	i -> R16,R17
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
; 0000 0170         {
; 0000 0171                 putchar(op_string[i]);
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0172         }
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 0173         for(i=0;i<37;i++)
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 0174         {
; 0000 0175                 putchar(unit_t[i]);
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 0176         }
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
; 0000 0177         for(i=0;i<2;i++)
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0178         {
; 0000 0179                 putchar(cls_string[i]);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
; 0000 017A         }
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
; 0000 017B 
; 0000 017C         putchar(13);
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 017D 
; 0000 017E         delay_ms(1000);
;PCODE: $00000301 VOL: 0
;PCODE: $00000302 VOL: 0
;PCODE: $00000303 VOL: 0
; 0000 017F }
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;
;void kirim_eqn_telem(void)
; 0000 0182 {
;PCODE: $00000307 VOL: 0
;PCODE: $00000308 VOL: 0
; 0000 0183         int i;
; 0000 0184 
; 0000 0185         for(i=0;i<25;i++)
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;	i -> R16,R17
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
; 0000 0186         {
; 0000 0187                 putchar(op_string[i]);
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
; 0000 0188         }
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
;PCODE: $0000031D VOL: 0
; 0000 0189         for(i=0;i<62;i++)
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 018A         {
; 0000 018B                 putchar(eqn_t[i]);
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
; 0000 018C         }
;PCODE: $0000032C VOL: 0
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
; 0000 018D         for(i=0;i<2;i++)
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 018E         {
; 0000 018F                 putchar(cls_string[i]);
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
; 0000 0190         }
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
;PCODE: $00000343 VOL: 0
; 0000 0191 
; 0000 0192         putchar(13);
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
; 0000 0193 
; 0000 0194         delay_ms(1000);
;PCODE: $00000347 VOL: 0
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 0195 }
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
;
;void timer(void)
; 0000 0198 {
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
; 0000 0199         if(timer_idx==3)
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 019A         {
; 0000 019B                 kirim_string();
;PCODE: $00000352 VOL: 0
; 0000 019C                 delay_ms(5000);
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
;PCODE: $00000355 VOL: 0
; 0000 019D 
; 0000 019E                 kirim_param_telem();
;PCODE: $00000356 VOL: 0
; 0000 019F                 delay_ms(5000);
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
;PCODE: $00000359 VOL: 0
; 0000 01A0 
; 0000 01A1                 kirim_unit_telem();
;PCODE: $0000035A VOL: 0
; 0000 01A2                 delay_ms(5000);
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
; 0000 01A3 
; 0000 01A4                 kirim_eqn_telem();
;PCODE: $0000035E VOL: 0
; 0000 01A5                 delay_ms(5000);
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 01A6 
; 0000 01A7                 kirim_data_telem();
;PCODE: $00000362 VOL: 0
; 0000 01A8         }
; 0000 01A9         else
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01AA         {
; 0000 01AB                 kirim_data_telem();
;PCODE: $00000365 VOL: 0
; 0000 01AC         }
;PCODE: $00000366 VOL: 0
; 0000 01AD 
; 0000 01AE         if(timer_idx==100)      timer_idx = 0;
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
; 0000 01AF }
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;
;void main(void)
; 0000 01B2 {
;PCODE: $0000036E VOL: 0
; 0000 01B3 // Declare your local variables here
; 0000 01B4 
; 0000 01B5 // Input/Output Ports initialization
; 0000 01B6 // Port A initialization
; 0000 01B7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01B8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01B9 PORTA=0x00;
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 01BA DDRA=0x00;
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
; 0000 01BB 
; 0000 01BC // Port B initialization
; 0000 01BD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01BE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01BF PORTB=0x00;
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01C0 DDRB=0x00;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 01C1 
; 0000 01C2 // Port C initialization
; 0000 01C3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01C4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01C5 PORTC=0x00;
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 01C6 DDRC=0x00;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
; 0000 01C7 
; 0000 01C8 // Port D initialization
; 0000 01C9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 01CA // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 01CB PORTD=0x03;
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 01CC DDRD=0x02;
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 01CD 
; 0000 01CE // Port E initialization
; 0000 01CF // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01D0 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01D1 PORTE=0x00;
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
; 0000 01D2 DDRE=0x00;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01D3 
; 0000 01D4 // Port F initialization
; 0000 01D5 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01D6 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 01D7 PORTF=0x00;
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
; 0000 01D8 DDRF=0x00;
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
; 0000 01D9 
; 0000 01DA // Port G initialization
; 0000 01DB // Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 01DC // State4=T State3=T State2=T State1=T State0=T
; 0000 01DD PORTG=0x00;
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
; 0000 01DE DDRG=0x00;
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
; 0000 01DF 
; 0000 01E0 // USART0 initialization
; 0000 01E1 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 01E2 // USART0 Receiver: Off
; 0000 01E3 // USART0 Transmitter: On
; 0000 01E4 // USART0 Mode: Asynchronous
; 0000 01E5 // USART0 Baud Rate: 1200
; 0000 01E6 UCSR0A=0x00;
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 01E7 UCSR0B=0x48;
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
; 0000 01E8 UCSR0C=0x06;
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
; 0000 01E9 UBRR0H=0x02;
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
; 0000 01EA UBRR0L=0x3F;
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
; 0000 01EB 
; 0000 01EC // Analog Comparator initialization
; 0000 01ED // Analog Comparator: Off
; 0000 01EE // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 01EF ACSR=0x80;
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
; 0000 01F0 SFIOR=0x00;
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
; 0000 01F1 
; 0000 01F2 // ADC initialization
; 0000 01F3 // ADC Clock frequency: 691.200 kHz
; 0000 01F4 // ADC Voltage Reference: AREF pin
; 0000 01F5 ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
; 0000 01F6 ADCSRA=0x84;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01F7 
; 0000 01F8 _idx = e_idx;
;PCODE: $0000039D VOL: 0
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
; 0000 01F9 
; 0000 01FA while (1)
;PCODE: $000003A0 VOL: 0
; 0000 01FB         {
; 0000 01FC                 // Place your code here
; 0000 01FD                 timer();
;PCODE: $000003A1 VOL: 0
; 0000 01FE                 timer_idx++;
;PCODE: $000003A2 VOL: 0
; 0000 01FF                 delay_ms(5000);
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
; 0000 0200         }
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
; 0000 0201 }
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
