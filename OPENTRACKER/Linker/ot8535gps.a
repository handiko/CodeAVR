;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 1/13/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega8535
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 128
;*****************************************************/
;
;#include <mega8535.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x40
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0xB0
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0xA0
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0xB0
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <stdio.h>
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<OVR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;#define RX_BUFFER_SIZE 8
;#define TX_BUFFER_SIZE 8
;char rx_buffer[RX_BUFFER_SIZE];
;char tx_buffer[TX_BUFFER_SIZE];
;char GPRMC[100];
;bit rx_buffer_overflow;
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 0035 {	char status,data;

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0036 	status=UCSRA;
;PCODE: $0000000F VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0037 	data=UDR;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0038 	if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0039    	{	rx_buffer[rx_wr_index]=data;
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 003A    		if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 003B    		if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 003C       	{	rx_counter=0;
;PCODE: $00000025 VOL: 0
; 0000 003D       		rx_buffer_overflow=1;
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 003E       	};
;PCODE: $00000029 VOL: 0
; 0000 003F    	};
;PCODE: $0000002A VOL: 0
; 0000 0040 }
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 0043 {	if (tx_counter)
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
; 0000 0044    	{	--tx_counter;
;PCODE: $00000033 VOL: 0
; 0000 0045    		UDR=tx_buffer[tx_rd_index];
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
; 0000 0046    		if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
; 0000 0047    	};
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0048 }
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void)
; 0000 004E {	char data;
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 004F 	while (rx_counter==0);
;PCODE: $00000045 VOL: 0
;	data -> R17
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
; 0000 0050 	data=rx_buffer[rx_rd_index];
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0051 	if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0052 	#asm("cli")
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
	cli
;PCODE: $00000056 VOL: 0
; 0000 0053 	--rx_counter;
;PCODE: $00000057 VOL: 0
; 0000 0054 	#asm("sei")
;PCODE: $00000058 VOL: 0
	sei
;PCODE: $00000059 VOL: 0
; 0000 0055 	return data;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0056 }
;PCODE: $0000005D VOL: 0
;#pragma used-
;#endif
;
;#ifndef _DEBUG_TERMINAL_IO_
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 005E {	while (tx_counter == TX_BUFFER_SIZE);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;	c -> Y+0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
; 0000 005F 	#asm("cli")
;PCODE: $00000066 VOL: 0
	cli
;PCODE: $00000067 VOL: 0
; 0000 0060 	if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
; 0000 0061    	{	tx_buffer[tx_wr_index]=c;
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
; 0000 0062    		if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0063    		++tx_counter;
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
; 0000 0064    	}
; 0000 0065 	else
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0066    	UDR=c;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0067 	#asm("sei")
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
	sei
;PCODE: $00000081 VOL: 0
; 0000 0068 }
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;#pragma used-
;#endif
;
;#include <string.h>
;#include <ctype.h>
;#include <delay.h>
;
;#define DAC_0	PORTB.0
;#define DAC_1	PORTB.1
;#define DAC_2	PORTB.2
;#define DAC_3	PORTB.3
;
;#define PTT	PORTB.4
;
;#define STBY_LED	PORTD.3
;#define TX_LED		PORTD.4
;#define AUX_LED		PORTD.5
;
;#define MODE	PIND.6
;#define TX_NOW	PIND.7
;
;#define on	1
;#define off 0
;
;#define PTT_ON	(PTT = on)
;#define PTT_OFF	(PTT = off)
;#define TX_LED_ON	(TX_LED = on)
;#define TX_LED_OFF	(TX_LED = off)
;#define STBY_LED_ON	(STBY_LED = off)
;#define STBY_LED_OFF	(STBY_LED = off)
;
;#define CONST_1200      52
;#define CONST_2200      (CONST_1200/2)
;#define CONST_POLYNOM   0b10001000000100001	// x^16 + x^12 + x^5 + 1
;//#define CONST_POLYNOM	0b11000000000000101	// x^16 + x^15 + x^2 + 1
;
;flash char flag[24] =
;{	0x7E,0x7E,0x7E,0x7E,
;    0x7E,0x7E,0x7E,0x7E,
;    0x7E,0x7E,0x7E,0x7E,
;    0x7E,0x7E,0x7E,0x7E,
;    0x7E,0x7E,0x7E,0x7E,
;    0x7E,0x7E,0x7E,0x7E
;};
;flash char ssid_2 = 0b01100100;
;flash char ssid_9 = 0b01110010;
;flash char ssid_2final = 0b01100101;
;//flash char ssid_9final = 0b01110011;
;eeprom char destination[7] =
;{   0x41,0x50,0x55,0x32,0x35,0x4D,
;    0               // SSID
;    // APU25N-2     // 0b011SSIDx format, SSID = 2 = 0b0010
;};
;eeprom char source[7] =
;{   0x59,0x44,0x32,0x58,0x42,0x43,
;    0               // SSID
;    // YD2XBC-9     // 0b011SSIDx format, SSID = 9 = 0b1001
;};
;eeprom char digi[7] =
;{   // 0x57,0x49,0x44,0x45,0x32,0x32,0x20    // atau
;    0x57,0x49,0x44,0x45,0x32,
;    0,              // SSID
;    0x20
;    // WIDE2-2      // 0b011SSIDx format, SSID = 2 = 0b0010
;};
;char destination_final[7];
;char source_final[7];
;char digi_final[7];
;flash char control_field = 0x03;
;flash char protocol_id = 0xF0;
;flash char data_type = 0x21;
;eeprom char latitude[8] =
;{	0x30,0x37,0x34,0x35,0x2E,0x37,0x39,0x53					// format string
;    // 0,7,4,5,0x2E,7,9,0x53								// format int
;    // 0745.79S
;};
;eeprom char symbol_table = 0x2F;
;eeprom char longitude[9] =
;{	0x31,0x31,0x30,0x30,0x35,0x2E,0x32,0x31,0x45
;    // 1,1,0,0,5,0x2E,2,1,0x45
;    // 11005.21E
;};
;eeprom char symbol_code = 0x3E;
;eeprom char comment[43] =
;{	0x54,0x45,0x53,0x54,0x49,0x4E,0x47,0x20,                // testing(spasi)
;    0x46,0x4F,0x52,0x20,                                    // for(spasi)
;    0x45,0x4D,0x45,0x52,0x47,0x45,0x4E,0x43,0x59,0x20,      // emergency(spasi)
;    0x42,0x45,0x41,0x43,0x4F,0x4E,0x20,                     // beacon(spasi)
;    0x20,0x20,0x20,0x20,0x20,0x20,0x20,                     // (spasi)
;    0x20,0x20,0x20,0x20,0x20,0x20,0x20                      // (spasi)
;    // testing for emergency beacon
;};
;bit flag_state;
;bit crc_flag = 0;
;int tone = 1200;
;char fcshi;
;char fcslo;
;char count_1 = 0;
;char x_counter = 0;
;unsigned char xcount = 0;
;long fcs_arr = 0;
;
;void init_data(void);
;void protocol(void);
;void send_data(char input);
;void fliptone(void);
;void set_dac(char value);
;void send_tone(int nada);
;void send_fcs(char infcs);
;void calc_fcs(char in);
;
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 00D9 {	xcount++;
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
; 0000 00DA     if((xcount>1) && (xcount<80))	AUX_LED = on;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00DB     else AUX_LED = off;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00DC     TCNT0=0xFF;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
; 0000 00DD }
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;
;void init_data(void)
; 0000 00E0 {	int i;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00E1     for(i=0;i<7;i++)
;PCODE: $000000A2 VOL: 0
;	i -> R16,R17
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00E2     {  	digi_final[i] = digi[i] << 1;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 00E3         destination_final[i] = destination[i] << 1;
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E4         source_final[i] = source[i] << 1;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00E5     }
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00E6 
; 0000 00E7     destination_final[6] = ssid_2;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
; 0000 00E8     source_final[6] = ssid_9;
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E9     digi_final[5] = ssid_2final;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00EA }
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;
;void protocol(void)
; 0000 00ED {	int i;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00EE 
; 0000 00EF     init_data();											// persiapkan bit shifting
;PCODE: $000000DA VOL: 0
;	i -> R16,R17
;PCODE: $000000DB VOL: 0
; 0000 00F0 
; 0000 00F1     PTT_ON;
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
; 0000 00F2     TX_LED_ON;
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
; 0000 00F3     delay_ms(250);                  						// tunggu sampai radio stabil
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
;PCODE: $000000E2 VOL: 0
; 0000 00F4 
; 0000 00F5     crc_flag = 0;
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
; 0000 00F6     flag_state = 1;
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 00F7     for(i=0;i<24;i++)       send_data(flag[i]);             // kirim flag 24 kali
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 00F8 flag_state = 0;
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
; 0000 00F9     for(i=0;i<7;i++)        send_data(destination_final[i]);// kirim callsign tujuan
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
; 0000 00FA for(i=0;i<7;i++)        send_data(source_final[i]);
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
; 0000 00FB send_data(ssid_9);
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
; 0000 00FC     for(i=0;i<7;i++)        send_data(digi_final[i]);       // kirim path digi
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 00FD send_data(control_field);
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 00FE     send_data(protocol_id);                                 // kirim data PID
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
; 0000 00FF     send_data(data_type);                                   // kirim data type info
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 0100     for(i=0;i<8;i++)        send_data(latitude[i]);         // kirim data lintang posisi
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
; 0000 0101 send_data(symbol_table);
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0102     for(i=0;i<9;i++)        send_data(longitude[i]);        // kirim data bujur posisi
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
; 0000 0103 send_data(symbol_code);
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 0104     for(i=0;i<43;i++);      send_data(comment[i]);          // kirim komen
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0105     crc_flag = 1;    		calc_fcs(0);	               		// hitung FCS
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 0106     send_fcs(fcshi);                                        // kirim 8 MSB dari FCS
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 0107     send_fcs(fcslo);                                        // kirim 8 LSB dari FCS
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
; 0000 0108     flag_state = 1;
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
; 0000 0109     for(i=0;i<12;i++)       send_data(flag[i]);             // kirim flag 12 kali
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
; 0000 010A flag_state = 0;
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 010B     PTT_OFF;
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
; 0000 010C     TX_LED_OFF;
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 010D }
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;
;void send_data(char input)
; 0000 0110 {	int i;
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
; 0000 0111     bit x;
; 0000 0112     for(i=0;i<8;i++)
;PCODE: $000001B1 VOL: 0
;	input -> Y+2
;	i -> R16,R17
;	x -> R15.0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
; 0000 0113     {	x = (input >> i) & 0x01;
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
; 0000 0114         if(!flag_state)	calc_fcs(x);
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
; 0000 0115         if(x)
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
; 0000 0116         {	if(!flag_state) count_1++;
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
; 0000 0117             if(count_1==5)  fliptone();
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0118             send_tone(tone);
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0119         }
; 0000 011A         if(!x)  fliptone();
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 011B     }
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
; 0000 011C }
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;
;void fliptone(void)
; 0000 011F {	count_1 = 0;
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
; 0000 0120     switch(tone)
;PCODE: $000001EF VOL: 0
; 0000 0121     {	case 1200:      tone=2200;      send_tone(tone);        break;
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
; 0000 0122         case 2200:      tone=1200;      send_tone(tone);        break;
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
; 0000 0123     }
;PCODE: $000001FF VOL: 0
; 0000 0124 }
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;
;void set_dac(char value)
; 0000 0127 {	DAC_0 = value & 0x01;
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;	value -> Y+0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0128     DAC_1 =( value >> 1 ) & 0x01;
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 0129     DAC_2 =( value >> 2 ) & 0x01;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 012A     DAC_3 =( value >> 3 ) & 0x01;
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
; 0000 012B }
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;
;void send_tone(int nada)
; 0000 012E {	if(nada==1200)
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;	nada -> Y+0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
; 0000 012F     {	set_dac(7);     delay_us(CONST_1200);
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
; 0000 0130 
; 0000 0131         set_dac(10);    delay_us(CONST_1200);
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 0132         set_dac(13);    delay_us(CONST_1200);
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
; 0000 0133         set_dac(14);    delay_us(CONST_1200);
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 0134 
; 0000 0135         set_dac(15);    delay_us(CONST_1200);
;PCODE: $0000024A VOL: 0
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0136 
; 0000 0137         set_dac(14);    delay_us(CONST_1200);
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 0138         set_dac(13);    delay_us(CONST_1200);
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 0139         set_dac(10);    delay_us(CONST_1200);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
; 0000 013A 
; 0000 013B         set_dac(7);     delay_us(CONST_1200);
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 013C 
; 0000 013D         set_dac(5);     delay_us(CONST_1200);
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
; 0000 013E         set_dac(2);     delay_us(CONST_1200);
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
; 0000 013F         set_dac(1);     delay_us(CONST_1200);
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
; 0000 0140 
; 0000 0141         set_dac(0);     delay_us(CONST_1200);
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
; 0000 0142 
; 0000 0143         set_dac(1);     delay_us(CONST_1200);
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
; 0000 0144         set_dac(2);     delay_us(CONST_1200);
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
; 0000 0145         set_dac(5);     delay_us(CONST_1200);
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
; 0000 0146     }
; 0000 0147 
; 0000 0148     else
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
; 0000 0149     {  	set_dac(7);     delay_us(CONST_2200);
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
; 0000 014A 
; 0000 014B         set_dac(10);    delay_us(CONST_2200);
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
; 0000 014C         set_dac(13);    delay_us(CONST_2200);
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
; 0000 014D         set_dac(14);    delay_us(CONST_2200);
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 014E 
; 0000 014F         set_dac(15);    delay_us(CONST_2200);
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 0150 
; 0000 0151         set_dac(14);    delay_us(CONST_2200);
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0152         set_dac(13);    delay_us(CONST_2200);
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 0153         set_dac(10);    delay_us(CONST_2200);
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0154 
; 0000 0155         set_dac(7);     delay_us(CONST_2200);
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0156 
; 0000 0157         set_dac(5);     delay_us(CONST_2200);
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0158         set_dac(2);     delay_us(CONST_2200);
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0159         set_dac(1);     delay_us(CONST_2200);
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 015A 
; 0000 015B         set_dac(0);     delay_us(CONST_2200);
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 015C 
; 0000 015D         set_dac(1);     delay_us(CONST_2200);
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 015E         set_dac(2);     delay_us(CONST_2200);
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 015F         set_dac(5);     delay_us(CONST_2200);
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 0160 
; 0000 0161         set_dac(7);     delay_us(CONST_2200);
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
; 0000 0162 
; 0000 0163         set_dac(10);    delay_us(CONST_2200);
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
; 0000 0164         set_dac(13);    delay_us(CONST_2200);
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 0165         set_dac(14);    delay_us(CONST_2200);
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 0166 
; 0000 0167         set_dac(15);    delay_us(CONST_2200);
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 0168 
; 0000 0169         set_dac(14);    delay_us(CONST_2200);
;PCODE: $000002D0 VOL: 0
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
;PCODE: $000002D3 VOL: 0
; 0000 016A         set_dac(13);    delay_us(CONST_2200);
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
; 0000 016B         set_dac(10);    delay_us(CONST_2200);
;PCODE: $000002D8 VOL: 0
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
; 0000 016C 
; 0000 016D         set_dac(7);     delay_us(CONST_2200);
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 016E 
; 0000 016F         set_dac(5);     delay_us(CONST_2200);
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 0170         set_dac(2);     delay_us(CONST_2200);
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 0171         set_dac(1);     delay_us(CONST_2200);
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
; 0000 0172 
; 0000 0173         set_dac(0);     delay_us(CONST_2200);
;PCODE: $000002EC VOL: 0
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
; 0000 0174 
; 0000 0175         set_dac(1);     delay_us(CONST_2200);
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 0176         set_dac(2);     delay_us(CONST_2200);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
; 0000 0177         set_dac(5);     delay_us(CONST_2200);
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0178     }
;PCODE: $000002FC VOL: 0
; 0000 0179 }
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
;PCODE: $000002FF VOL: 0
;
;void send_fcs(char infcs)
; 0000 017C {	int j=7;
;PCODE: $00000300 VOL: 0
;PCODE: $00000301 VOL: 0
; 0000 017D 	bit x;
; 0000 017E 	while(j>0)
;PCODE: $00000302 VOL: 0
;	infcs -> Y+2
;	j -> R16,R17
;	x -> R15.0
;PCODE: $00000303 VOL: 0
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 017F     {	x = (infcs >> j) & 0x01;
;PCODE: $00000308 VOL: 0
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
; 0000 0180         if(x)
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
; 0000 0181         {	count_1++;
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
; 0000 0182             if(count_1==5)    fliptone();
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
; 0000 0183             send_tone(tone);
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 0184         }
; 0000 0185         if(!x)  fliptone();
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 0186         j--;
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 0187 	}
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
; 0000 0188 }
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
;PCODE: $0000032A VOL: 0
;
;void calc_fcs(char in)
; 0000 018B {	int i;
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 018C  	fcs_arr += in;
;PCODE: $0000032D VOL: 0
;	in -> Y+2
;	i -> R16,R17
;PCODE: $0000032E VOL: 0
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
; 0000 018D   	x_counter++;
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 018E 
; 0000 018F    	if(crc_flag)
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 0190     {	for(i=0;i<16;i++)
;PCODE: $0000033A VOL: 0
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;PCODE: $0000033E VOL: 0
;PCODE: $0000033F VOL: 0
;PCODE: $00000340 VOL: 0
;PCODE: $00000341 VOL: 0
;PCODE: $00000342 VOL: 0
; 0000 0191         {	if((fcs_arr >> 16)==1)
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 0192             {	fcs_arr ^= CONST_POLYNOM;
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
; 0000 0193             }
; 0000 0194           	fcs_arr <<= 1;
;PCODE: $0000034C VOL: 0
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
; 0000 0195     	}
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 0196     	fcshi = fcs_arr >> 8; 			// ambil 8 bit paling kiri
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 0197     	fcslo = fcs_arr & 0b11111111; 	// ambil 8 bit paling kanan
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
;PCODE: $0000035B VOL: 0
; 0000 0198     }
; 0000 0199 
; 0000 019A     if((x_counter==17) && ((fcs_arr >> 16)==1))
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 0
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
; 0000 019B     {	fcs_arr ^= CONST_POLYNOM;
;PCODE: $00000369 VOL: 0
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
;PCODE: $0000036C VOL: 0
; 0000 019C         x_counter -= 1;
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
;PCODE: $0000036F VOL: 0
;PCODE: $00000370 VOL: 0
; 0000 019D     }
; 0000 019E 
; 0000 019F     if(x_counter==17)
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
;PCODE: $00000374 VOL: 0
; 0000 01A0     {	x_counter -= 1;
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
; 0000 01A1     }
; 0000 01A2 
; 0000 01A3     fcs_arr <<= 1;
;PCODE: $00000379 VOL: 0
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
; 0000 01A4 }
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;
;void TerimaGps(void)
; 0000 01A7 {	int i;
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
; 0000 01A8 	for(i=0; i<100; i++)
;PCODE: $00000383 VOL: 0
;	i -> R16,R17
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
;PCODE: $00000388 VOL: 0
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
; 0000 01A9 	GPRMC[i] = getchar();
;PCODE: $0000038D VOL: 0
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
; 0000 01AA }
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
;PCODE: $0000039A VOL: 0
;
;char last_marker;
;char buffer[2][11];
;char cari_koma(char marker_koma);
;char lintang(char marker_lintang);
;char bujur(char marker_bujur);
;void ParsingLintang(void);
;void ParsingBujur(void);
;void ParsingGps(void)
; 0000 01B4 {	int i;
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01B5 	for(i=0; i<strlen(GPRMC); i++)
;PCODE: $0000039D VOL: 0
;	i -> R16,R17
;PCODE: $0000039E VOL: 0
;PCODE: $0000039F VOL: 0
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
;PCODE: $000003A3 VOL: 0
;PCODE: $000003A4 VOL: 0
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
; 0000 01B6     {	if(GPRMC[i]=='$')
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
; 0000 01B7     	{
; 0000 01B8         if(GPRMC[i+1]=='G')
;PCODE: $000003AE VOL: 0
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 01B9         {
; 0000 01BA         if(GPRMC[i+2]=='P')
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
;PCODE: $000003B9 VOL: 0
; 0000 01BB         {
; 0000 01BC         if(GPRMC[i+3]=='R')
;PCODE: $000003BA VOL: 0
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
; 0000 01BD         {
; 0000 01BE         if(GPRMC[i+4]=='M')
;PCODE: $000003C0 VOL: 0
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
; 0000 01BF         {
; 0000 01C0         if(GPRMC[i+5]=='C')
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
;PCODE: $000003CB VOL: 0
; 0000 01C1         {	i += 5;
;PCODE: $000003CC VOL: 0
;PCODE: $000003CD VOL: 0
; 0000 01C2         	last_marker = i;
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 01C3         	last_marker = cari_koma(last_marker);
;PCODE: $000003D0 VOL: 0
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
;PCODE: $000003D3 VOL: 0
; 0000 01C4         	last_marker = lintang(last_marker);
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
; 0000 01C5         	last_marker = cari_koma(last_marker);
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
;PCODE: $000003DB VOL: 0
; 0000 01C6         	last_marker = bujur(last_marker);
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
; 0000 01C7         	last_marker = cari_koma(last_marker);
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 01C8             ParsingLintang();
;PCODE: $000003E4 VOL: 0
; 0000 01C9             ParsingBujur();
;PCODE: $000003E5 VOL: 0
; 0000 01CA         }}}}}}
;PCODE: $000003E6 VOL: 0
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
; 0000 01CB     }
;PCODE: $000003EB VOL: 0
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 01CC }
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;
;char cari_koma(char marker_koma)
; 0000 01CF {	int i;
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
; 0000 01D0 	marker_koma += 1;
;PCODE: $000003F6 VOL: 0
;	marker_koma -> Y+2
;	i -> R16,R17
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
; 0000 01D1 	if(GPRMC[marker_koma] == ',')
;PCODE: $000003FA VOL: 0
;PCODE: $000003FB VOL: 0
;PCODE: $000003FC VOL: 0
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
;PCODE: $000003FF VOL: 0
; 0000 01D2 	last_marker = marker_koma;
;PCODE: $00000400 VOL: 0
;PCODE: $00000401 VOL: 0
; 0000 01D3 	else
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
; 0000 01D4     {	for(i=marker_koma;;i++)
;PCODE: $00000404 VOL: 0
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 01D5     	{	last_marker = i;
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
; 0000 01D6         	if(GPRMC[i]==',')
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 01D7             break;
;PCODE: $00000412 VOL: 0
; 0000 01D8         }
;PCODE: $00000413 VOL: 0
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
;PCODE: $00000416 VOL: 0
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 01D9     }
;PCODE: $00000419 VOL: 0
; 0000 01DA     return (last_marker);
;PCODE: $0000041A VOL: 0
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 01DB }
;PCODE: $0000041E VOL: 0
;
;char lintang(char marker_lintang)
; 0000 01DE { 	int i;
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 01DF 	marker_lintang += 1;
;PCODE: $00000421 VOL: 0
;	marker_lintang -> Y+2
;	i -> R16,R17
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 01E0     for(i=marker_lintang;;i++)
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
; 0000 01E1     { 	if(GPRMC[i]==',')
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
; 0000 01E2     	break;
;PCODE: $00000431 VOL: 0
; 0000 01E3         buffer[0][i-marker_lintang]=GPRMC[i];
;PCODE: $00000432 VOL: 0
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
;PCODE: $0000043C VOL: 0
;PCODE: $0000043D VOL: 0
; 0000 01E4         last_marker=i;
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
; 0000 01E5     }
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
; 0000 01E6     return (last_marker);
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
;PCODE: $00000448 VOL: 0
; 0000 01E7 }
;PCODE: $00000449 VOL: 0
;
;char bujur(char marker_bujur)
; 0000 01EA { 	int i;
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
; 0000 01EB 	marker_bujur += 1;
;PCODE: $0000044C VOL: 0
;	marker_bujur -> Y+2
;	i -> R16,R17
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
; 0000 01EC     for(i=marker_bujur;;i++)
;PCODE: $00000450 VOL: 0
;PCODE: $00000451 VOL: 0
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
; 0000 01ED     { 	if(GPRMC[i]==',')
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
; 0000 01EE     	break;
;PCODE: $0000045C VOL: 0
; 0000 01EF         buffer[1][i-marker_bujur]=GPRMC[i];
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 01F0         last_marker=i;
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
; 0000 01F1     }
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
; 0000 01F2     return (last_marker);
;PCODE: $00000471 VOL: 0
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
; 0000 01F3 }
;PCODE: $00000475 VOL: 0
;
;void ParsingLintang(void)
; 0000 01F6 {	int i;
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 01F7 	for(i=0; i<7; i++) latitude[i]=buffer[0][i];
;PCODE: $00000478 VOL: 0
;	i -> R16,R17
;PCODE: $00000479 VOL: 0
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
; 0000 01F8 latitude[7]='S';
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
;PCODE: $00000492 VOL: 0
; 0000 01F9 }
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;
;void ParsingBujur(void)
; 0000 01FC {	int i;
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
; 0000 01FD 	for(i=0; i<8; i++) longitude[i]=buffer[1][i];
;PCODE: $00000498 VOL: 0
;	i -> R16,R17
;PCODE: $00000499 VOL: 0
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 01FE longitude[8]='E';
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
; 0000 01FF }
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;
;void main(void)
; 0000 0202 {	// Port B initialization
;PCODE: $000004B5 VOL: 0
; 0000 0203 	// Func7=In Func6=In Func5=In Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 0204 	// State7=T State6=T State5=T State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 0205 	PORTB=0x00;
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
; 0000 0206 	DDRB=0x1F;
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
; 0000 0207 
; 0000 0208 	// Port D initialization
; 0000 0209 	// Func7=In Func6=In Func5=Out Func4=Out Func3=Out Func2=In Func1=Out Func0=In
; 0000 020A 	// State7=P State6=P State5=0 State4=0 State3=0 State2=T State1=0 State0=T
; 0000 020B 	PORTD=0xC0;
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 020C 	DDRD=0x3A;
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 020D 
; 0000 020E     // USART initialization
; 0000 020F 	// Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0210 	// USART Receiver: On
; 0000 0211 	// USART Transmitter: On
; 0000 0212 	// USART Mode: Asynchronous
; 0000 0213 	// USART Baud Rate: 4800
; 0000 0214 	UCSRA=0x00;
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
; 0000 0215 	UCSRB=0xD8;
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0216 	UCSRC=0x86;
;PCODE: $000004C2 VOL: 0
;PCODE: $000004C3 VOL: 0
; 0000 0217 	UBRRH=0x00;
;PCODE: $000004C4 VOL: 0
;PCODE: $000004C5 VOL: 0
; 0000 0218 	UBRRL=0x8F;
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
; 0000 0219 
; 0000 021A     // Timer/Counter 0 initialization
; 0000 021B 	// Clock source: System Clock
; 0000 021C 	// Clock value: 10.800 kHz
; 0000 021D 	// Mode: Normal top=0xFF
; 0000 021E 	// OC0 output: Disconnected
; 0000 021F 	TCCR0=0x05;
;PCODE: $000004C8 VOL: 0
;PCODE: $000004C9 VOL: 0
; 0000 0220 	TCNT0=0xFF;
;PCODE: $000004CA VOL: 0
;PCODE: $000004CB VOL: 0
; 0000 0221 	OCR0=0x00;
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 0222 
; 0000 0223 	// Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0224 	TIMSK=0x01;
;PCODE: $000004CE VOL: 0
;PCODE: $000004CF VOL: 0
; 0000 0225 
; 0000 0226 	ACSR=0x80;
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 0227 	SFIOR=0x00;
;PCODE: $000004D2 VOL: 0
;PCODE: $000004D3 VOL: 0
; 0000 0228 
; 0000 0229 	#asm("sei")
;PCODE: $000004D4 VOL: 0
	sei
;PCODE: $000004D5 VOL: 0
; 0000 022A 
; 0000 022B     STBY_LED = on;
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
; 0000 022C 
; 0000 022D 	while (1)
;PCODE: $000004D8 VOL: 0
; 0000 022E     {	STBY_LED = on;
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
; 0000 022F     	if((MODE) && (TX_NOW))
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
; 0000 0230     	{	TerimaGps();
;PCODE: $000004E5 VOL: 0
; 0000 0231     		ParsingGps();
;PCODE: $000004E6 VOL: 0
; 0000 0232         	#asm("cli")
;PCODE: $000004E7 VOL: 0
	cli
;PCODE: $000004E8 VOL: 0
; 0000 0233     		protocol();
;PCODE: $000004E9 VOL: 0
; 0000 0234         	#asm("sei")
;PCODE: $000004EA VOL: 0
	sei
;PCODE: $000004EB VOL: 0
; 0000 0235             delay_ms(10000);
;PCODE: $000004EC VOL: 0
;PCODE: $000004ED VOL: 0
;PCODE: $000004EE VOL: 0
; 0000 0236         	delay_ms(10000);
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
;PCODE: $000004F1 VOL: 0
; 0000 0237             delay_ms(10000);
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
;PCODE: $000004F4 VOL: 0
; 0000 0238         }
; 0000 0239     	if((!MODE) && (TX_NOW))
;PCODE: $000004F5 VOL: 0
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
; 0000 023A         {	delay_ms(10000);
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
; 0000 023B         	delay_ms(10000);
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
; 0000 023C             delay_ms(10000);
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 023D         	#asm("cli")
;PCODE: $00000509 VOL: 0
	cli
;PCODE: $0000050A VOL: 0
; 0000 023E     		protocol();
;PCODE: $0000050B VOL: 0
; 0000 023F         	#asm("sei")
;PCODE: $0000050C VOL: 0
	sei
;PCODE: $0000050D VOL: 0
; 0000 0240         }
; 0000 0241         if(!TX_NOW)
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
; 0000 0242         { 	delay_ms(250);
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
; 0000 0243         	STBY_LED = off;
;PCODE: $00000515 VOL: 0
;PCODE: $00000516 VOL: 0
; 0000 0244         	#asm("cli")
;PCODE: $00000517 VOL: 0
	cli
;PCODE: $00000518 VOL: 0
; 0000 0245     		protocol();
;PCODE: $00000519 VOL: 0
; 0000 0246         	#asm("sei")
;PCODE: $0000051A VOL: 0
	sei
;PCODE: $0000051B VOL: 0
; 0000 0247         }
; 0000 0248     }
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
;PCODE: $0000051E VOL: 0
; 0000 0249 }
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
