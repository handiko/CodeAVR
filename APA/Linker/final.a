;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 6/8/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATmega32
;Program type            : Application
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Small
;External RAM size       : 0
;Data Stack size         : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;
;#include <delay.h>
;
;char i;
;bit enadc;
;
;unsigned int time;
;
;unsigned char sen_buff[10];
;unsigned char sen[26];
;
;// External Interrupt 0 service routine
;//interrupt [EXT_INT0] void ext_int0_isr(void)
;//{
;	//for(i=0;i<26;i++)
;        //{
;        //	sen[i]=0;
;        //}
;//}
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;#define TRIGGER PINB.0
;#define MUX_A	PINB.0
;#define MUX_B	PINB.1
;#define MUX_C	PINB.2
;
;unsigned char read_adc(unsigned char adc_input);
;
;char ratusan(unsigned char in)
; 0000 0038 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0039 	in/=100;
;	in -> Y+0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 003A 
; 0000 003B         return (in +'0');
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 003C }
;PCODE: $00000018 VOL: 0
;
;char puluhan(unsigned char in)
; 0000 003F {
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0040 	in%=100;
;	in -> Y+0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 0041 
; 0000 0042         return ((in / 10)+'0');
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
; 0000 0043 }
;PCODE: $00000027 VOL: 0
;
;char satuan(unsigned char in)
; 0000 0046 {
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
; 0000 0047 	return ((in % 10)+'0');
;	in -> Y+0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0048 }
;PCODE: $00000031 VOL: 0
;
;// Timer 0 overflow interrupt service routine
;interrupt [TIM0_OVF] void timer0_ovf_isr(void)
; 0000 004C {
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 004D 	time++;
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
; 0000 004E         sen_buff[0]=read_adc(0);
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 004F         sen_buff[1]=read_adc(1);
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0050         sen_buff[2]=read_adc(2);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0051         sen_buff[3]=read_adc(3);
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 0052 
; 0000 0053         if(sen_buff[0]>sen[17])	sen[17]=sen_buff[0];
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0054         if(sen_buff[1]>sen[9])	sen[9]=sen_buff[1];
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0055         if(sen_buff[2]>sen[1])	sen[1]=sen_buff[2];
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 0056         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0057 
; 0000 0058         sen_buff[0]=read_adc(0);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0059         sen_buff[1]=read_adc(1);
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 005A         sen_buff[2]=read_adc(2);
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 005B         sen_buff[3]=read_adc(3);
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
; 0000 005C 
; 0000 005D         if(sen_buff[0]>sen[18])	sen[18]=sen_buff[0];
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 005E         if(sen_buff[1]>sen[10])	sen[10]=sen_buff[1];
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 005F         if(sen_buff[2]>sen[2])	sen[2]=sen_buff[2];
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
; 0000 0060         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 0061 
; 0000 0062         sen_buff[0]=read_adc(0);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
; 0000 0063 	sen_buff[1]=read_adc(1);
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 0064         sen_buff[2]=read_adc(2);
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
;PCODE: $000000BE VOL: 0
; 0000 0065         sen_buff[3]=read_adc(3);
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 0066 
; 0000 0067         if(sen_buff[0]>sen[19])	sen[18]=sen_buff[0];
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 0068         if(sen_buff[1]>sen[11])	sen[11]=sen_buff[1];
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
; 0000 0069         if(sen_buff[2]>sen[3])	sen[3]=sen_buff[2];
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 006A         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 006B 
; 0000 006C         sen_buff[0]=read_adc(0);
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 006D         sen_buff[1]=read_adc(1);
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 006E         sen_buff[2]=read_adc(2);
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
; 0000 006F         sen_buff[3]=read_adc(3);
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0070 
; 0000 0071         if(sen_buff[0]>sen[20])	sen[20]=sen_buff[0];
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
; 0000 0072         if(sen_buff[1]>sen[12])	sen[12]=sen_buff[1];
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
; 0000 0073         if(sen_buff[2]>sen[4])	sen[4]=sen_buff[2];
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 0074         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0075 
; 0000 0076         sen_buff[0]=read_adc(0);
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0077         sen_buff[1]=read_adc(1);
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
; 0000 0078         sen_buff[2]=read_adc(2);
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
;PCODE: $00000138 VOL: 0
; 0000 0079         sen_buff[3]=read_adc(3);
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
; 0000 007A 
; 0000 007B 	if(sen_buff[0]>sen[21])	sen[21]=sen_buff[0];
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
; 0000 007C         if(sen_buff[1]>sen[13])	sen[13]=sen_buff[1];
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
;PCODE: $00000150 VOL: 0
; 0000 007D         if(sen_buff[2]>sen[5])	sen[5]=sen_buff[2];
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
; 0000 007E         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
; 0000 007F 
; 0000 0080         sen_buff[0]=read_adc(0);
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
; 0000 0081         sen_buff[1]=read_adc(1);
;PCODE: $0000016C VOL: 0
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
; 0000 0082         sen_buff[2]=read_adc(2);
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
; 0000 0083         sen_buff[3]=read_adc(3);
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
; 0000 0084 
; 0000 0085                         if(sen_buff[0]>sen[22])	sen[22]=sen_buff[0];
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 0086                         if(sen_buff[1]>sen[14])	sen[14]=sen_buff[1];
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
; 0000 0087                         if(sen_buff[2]>sen[6])	sen[6]=sen_buff[2];
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0088                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 0089                 //}
; 0000 008A 
; 0000 008B                 //else if((MUX_A==1)&&(MUX_B==1)&&(MUX_C==0))
; 0000 008C                 //{
; 0000 008D                 	sen_buff[0]=read_adc(0);
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
; 0000 008E                         sen_buff[1]=read_adc(1);
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
; 0000 008F                         sen_buff[2]=read_adc(2);
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
; 0000 0090                         sen_buff[3]=read_adc(3);
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0091 
; 0000 0092                         if(sen_buff[0]>sen[23])	sen[23]=sen_buff[0];
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
; 0000 0093                         if(sen_buff[1]>sen[15])	sen[15]=sen_buff[1];
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
; 0000 0094                         if(sen_buff[2]>sen[7])	sen[7]=sen_buff[2];
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 0095                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
; 0000 0096                // }
; 0000 0097 
; 0000 0098                 //else if((MUX_A==1)&&(MUX_B==1)&&(MUX_C==1))
; 0000 0099                 //{
; 0000 009A                 	sen_buff[0]=read_adc(0);
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 009B                         sen_buff[1]=read_adc(1);
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
; 0000 009C                         sen_buff[2]=read_adc(2);
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
; 0000 009D                         sen_buff[3]=read_adc(3);
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
; 0000 009E 
; 0000 009F                         if(sen_buff[0]>sen[24])	sen[24]=sen_buff[0];
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
; 0000 00A0                         if(sen_buff[1]>sen[16])	sen[16]=sen_buff[1];
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 00A1                         if(sen_buff[2]>sen[8])	sen[8]=sen_buff[2];
;PCODE: $00000208 VOL: 0
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
; 0000 00A2                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
;PCODE: $00000213 VOL: 0
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
; 0000 00A3                // }
; 0000 00A4 
; 0000 00A5         putchar(13);
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
;PCODE: $00000221 VOL: 0
; 0000 00A6         puts("mulai");
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
; 0000 00A7         for(i=0;i<25;i++)
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 00A8         {
; 0000 00A9         	putchar(13);
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 00AA                 putchar(ratusan(sen[i+1]));
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
; 0000 00AB                 putchar(puluhan(sen[i+1]));
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
; 0000 00AC                 putchar(satuan(sen[i+1]));
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 00AD         }
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
;PCODE: $0000024E VOL: 0
; 0000 00AE         putchar(13);
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
; 0000 00AF         puts("selesai");
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
; 0000 00B0         putchar(13);
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
; 0000 00B1 
; 0000 00B2         if(time==1000)
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
; 0000 00B3         {
; 0000 00B4         	for(i=0;i<26;i++)
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
; 0000 00B5                 {
; 0000 00B6                 	sen[i]=0;
;PCODE: $00000263 VOL: 0
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 00B7                 }
;PCODE: $00000268 VOL: 0
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
; 0000 00B8                 time=0;
;PCODE: $0000026C VOL: 0
; 0000 00B9         }
; 0000 00BA 
; 0000 00BB         TCNT0=0x94;
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
; 0000 00BC }
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0

	.DSEG
_0x23:
	.BYTE 0xE
;
;#define ADC_VREF_TYPE 0x60
;
;// Read the 8 most significant bits
;// of the AD conversion result
;unsigned char read_adc(unsigned char adc_input)
; 0000 00C3 {

	.CSEG
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
; 0000 00C4 ADMUX=adc_input | (ADC_VREF_TYPE & 0xff);
;	adc_input -> Y+0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 00C5 // Delay needed for the stabilization of the ADC input voltage
; 0000 00C6 delay_us(10);
;PCODE: $00000278 VOL: 0
; 0000 00C7 // Start the AD conversion
; 0000 00C8 ADCSRA|=0x40;
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
; 0000 00C9 // Wait for the AD conversion to complete
; 0000 00CA while ((ADCSRA & 0x10)==0);
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 00CB ADCSRA|=0x10;
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
; 0000 00CC return ADCH;
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
; 0000 00CD }
;PCODE: $00000286 VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 00D2 {
;PCODE: $00000287 VOL: 0
; 0000 00D3 // Declare your local variables here
; 0000 00D4 
; 0000 00D5 // Input/Output Ports initialization
; 0000 00D6 // Port A initialization
; 0000 00D7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00D8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00D9 PORTA=0x00;
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
; 0000 00DA DDRA=0x00;
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
; 0000 00DB 
; 0000 00DC // Port B initialization
; 0000 00DD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00DE // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00DF PORTB=0x00;
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 00E0 DDRB=0x00;
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
; 0000 00E1 
; 0000 00E2 // Port C initialization
; 0000 00E3 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00E4 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00E5 PORTC=0x00;
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 00E6 DDRC=0x00;
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 00E7 
; 0000 00E8 // Port D initialization
; 0000 00E9 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 00EA // State7=T State6=T State5=T State4=T State3=T State2=T State1=1 State0=P
; 0000 00EB PORTD=0x03;
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
; 0000 00EC DDRD=0x02;
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 00ED 
; 0000 00EE // Timer/Counter 0 initialization
; 0000 00EF // Clock source: System Clock
; 0000 00F0 // Clock value: 10.800 kHz
; 0000 00F1 // Mode: Normal top=0xFF
; 0000 00F2 // OC0 output: Disconnected
; 0000 00F3 TCCR0=0x05;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
; 0000 00F4 TCNT0=0x94;
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 00F5 OCR0=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 00F6 
; 0000 00F7 // Timer/Counter 1 initialization
; 0000 00F8 // Clock source: System Clock
; 0000 00F9 // Clock value: Timer1 Stopped
; 0000 00FA // Mode: Normal top=0xFFFF
; 0000 00FB // OC1A output: Discon.
; 0000 00FC // OC1B output: Discon.
; 0000 00FD // Noise Canceler: Off
; 0000 00FE // Input Capture on Falling Edge
; 0000 00FF // Timer1 Overflow Interrupt: Off
; 0000 0100 // Input Capture Interrupt: Off
; 0000 0101 // Compare A Match Interrupt: Off
; 0000 0102 // Compare B Match Interrupt: Off
; 0000 0103 TCCR1A=0x00;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 0104 TCCR1B=0x00;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 0105 TCNT1H=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 0106 TCNT1L=0x00;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 0107 ICR1H=0x00;
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 0108 ICR1L=0x00;
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 0109 OCR1AH=0x00;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 010A OCR1AL=0x00;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 010B OCR1BH=0x00;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 010C OCR1BL=0x00;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 010D 
; 0000 010E // Timer/Counter 2 initialization
; 0000 010F // Clock source: System Clock
; 0000 0110 // Clock value: Timer2 Stopped
; 0000 0111 // Mode: Normal top=0xFF
; 0000 0112 // OC2 output: Disconnected
; 0000 0113 ASSR=0x00;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 0114 TCCR2=0x00;
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
; 0000 0115 TCNT2=0x00;
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 0116 OCR2=0x00;
;PCODE: $000002B8 VOL: 0
;PCODE: $000002B9 VOL: 0
; 0000 0117 
; 0000 0118 // External Interrupt(s) initialization
; 0000 0119 // INT0: On
; 0000 011A // INT0 Mode: Rising Edge
; 0000 011B // INT1: Off
; 0000 011C // INT2: Off
; 0000 011D GICR|=0x40;
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
; 0000 011E MCUCR=0x03;
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
; 0000 011F MCUCSR=0x00;
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
; 0000 0120 GIFR=0x40;
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 0121 
; 0000 0122 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 0123 TIMSK=0x01;
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 0124 
; 0000 0125 // USART initialization
; 0000 0126 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 0127 // USART Receiver: Off
; 0000 0128 // USART Transmitter: On
; 0000 0129 // USART Mode: Asynchronous
; 0000 012A // USART Baud Rate: 1200
; 0000 012B UCSRA=0x00;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
; 0000 012C UCSRB=0x08;
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 012D UCSRC=0x86;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
; 0000 012E UBRRH=0x02;
;PCODE: $000002CB VOL: 0
;PCODE: $000002CC VOL: 0
; 0000 012F UBRRL=0x3F;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 0130 
; 0000 0131 // Analog Comparator initialization
; 0000 0132 // Analog Comparator: Off
; 0000 0133 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 0134 ACSR=0x80;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 0135 SFIOR=0x00;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 0136 
; 0000 0137 // ADC initialization
; 0000 0138 // ADC Clock frequency: 691.200 kHz
; 0000 0139 // ADC Voltage Reference: AVCC pin
; 0000 013A // Only the 8 most significant bits of
; 0000 013B // the AD conversion result are used
; 0000 013C ADMUX=ADC_VREF_TYPE & 0xff;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 013D ADCSRA=0x84;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 013E 
; 0000 013F // SPI initialization
; 0000 0140 // SPI disabled
; 0000 0141 SPCR=0x00;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 0142 
; 0000 0143 // TWI initialization
; 0000 0144 // TWI disabled
; 0000 0145 TWCR=0x00;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 0146 
; 0000 0147 time=0;
;PCODE: $000002DB VOL: 0
; 0000 0148 
; 0000 0149 enadc=0;
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 014A 
; 0000 014B // Global enable interrupts
; 0000 014C #asm("sei")
;PCODE: $000002DF VOL: 0
	sei
;PCODE: $000002E0 VOL: 0
; 0000 014D 
; 0000 014E while (1)
;PCODE: $000002E1 VOL: 0
; 0000 014F       {
; 0000 0150       /* Place your code here
; 0000 0151       		if((MUX_A==0)&&(MUX_B==0)&&(MUX_C==0))
; 0000 0152                 {
; 0000 0153                 	sen_buff[0]=read_adc(0);
; 0000 0154                         sen_buff[1]=read_adc(1);
; 0000 0155                         sen_buff[2]=read_adc(2);
; 0000 0156                         sen_buff[3]=read_adc(3);
; 0000 0157 
; 0000 0158                         if(sen_buff[0]>sen[17])	sen[17]=sen_buff[0];
; 0000 0159                         if(sen_buff[1]>sen[9])	sen[9]=sen_buff[1];
; 0000 015A                         if(sen_buff[2]>sen[1])	sen[1]=sen_buff[2];
; 0000 015B                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 015C                 }
; 0000 015D 
; 0000 015E                 else if((MUX_A==0)&&(MUX_B==0)&&(MUX_C==1))
; 0000 015F                 {
; 0000 0160                 	sen_buff[0]=read_adc(0);
; 0000 0161                         sen_buff[1]=read_adc(1);
; 0000 0162                         sen_buff[2]=read_adc(2);
; 0000 0163                         sen_buff[3]=read_adc(3);
; 0000 0164 
; 0000 0165                         if(sen_buff[0]>sen[18])	sen[18]=sen_buff[0];
; 0000 0166                         if(sen_buff[1]>sen[10])	sen[10]=sen_buff[1];
; 0000 0167                         if(sen_buff[2]>sen[2])	sen[2]=sen_buff[2];
; 0000 0168                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 0169                 }
; 0000 016A 
; 0000 016B                 else if((MUX_A==0)&&(MUX_B==1)&&(MUX_C==0))
; 0000 016C                 {
; 0000 016D                 	sen_buff[0]=read_adc(0);
; 0000 016E                         sen_buff[1]=read_adc(1);
; 0000 016F                         sen_buff[2]=read_adc(2);
; 0000 0170                         sen_buff[3]=read_adc(3);
; 0000 0171 
; 0000 0172                         if(sen_buff[0]>sen[19])	sen[18]=sen_buff[0];
; 0000 0173                         if(sen_buff[1]>sen[11])	sen[11]=sen_buff[1];
; 0000 0174                         if(sen_buff[2]>sen[3])	sen[3]=sen_buff[2];
; 0000 0175                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 0176                 }
; 0000 0177 
; 0000 0178                 else if((MUX_A==0)&&(MUX_B==1)&&(MUX_C==1))
; 0000 0179                 {
; 0000 017A                 	sen_buff[0]=read_adc(0);
; 0000 017B                         sen_buff[1]=read_adc(1);
; 0000 017C                         sen_buff[2]=read_adc(2);
; 0000 017D                         sen_buff[3]=read_adc(3);
; 0000 017E 
; 0000 017F                         if(sen_buff[0]>sen[20])	sen[20]=sen_buff[0];
; 0000 0180                         if(sen_buff[1]>sen[12])	sen[12]=sen_buff[1];
; 0000 0181                         if(sen_buff[2]>sen[4])	sen[4]=sen_buff[2];
; 0000 0182                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 0183                 }
; 0000 0184 
; 0000 0185                 else if((MUX_A==1)&&(MUX_B==0)&&(MUX_C==0))
; 0000 0186                 {
; 0000 0187                 	sen_buff[0]=read_adc(0);
; 0000 0188                         sen_buff[1]=read_adc(1);
; 0000 0189                         sen_buff[2]=read_adc(2);
; 0000 018A                         sen_buff[3]=read_adc(3);
; 0000 018B 
; 0000 018C                         if(sen_buff[0]>sen[21])	sen[21]=sen_buff[0];
; 0000 018D                         if(sen_buff[1]>sen[13])	sen[13]=sen_buff[1];
; 0000 018E                         if(sen_buff[2]>sen[5])	sen[5]=sen_buff[2];
; 0000 018F                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 0190                 }
; 0000 0191 
; 0000 0192                 else if((MUX_A==1)&&(MUX_B==0)&&(MUX_C==1))
; 0000 0193                 {
; 0000 0194                 	sen_buff[0]=read_adc(0);
; 0000 0195                         sen_buff[1]=read_adc(1);
; 0000 0196                         sen_buff[2]=read_adc(2);
; 0000 0197                         sen_buff[3]=read_adc(3);
; 0000 0198 
; 0000 0199                         if(sen_buff[0]>sen[22])	sen[22]=sen_buff[0];
; 0000 019A                         if(sen_buff[1]>sen[14])	sen[14]=sen_buff[1];
; 0000 019B                         if(sen_buff[2]>sen[6])	sen[6]=sen_buff[2];
; 0000 019C                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 019D                 }
; 0000 019E 
; 0000 019F                 else if((MUX_A==1)&&(MUX_B==1)&&(MUX_C==0))
; 0000 01A0                 {
; 0000 01A1                 	sen_buff[0]=read_adc(0);
; 0000 01A2                         sen_buff[1]=read_adc(1);
; 0000 01A3                         sen_buff[2]=read_adc(2);
; 0000 01A4                         sen_buff[3]=read_adc(3);
; 0000 01A5 
; 0000 01A6                         if(sen_buff[0]>sen[23])	sen[23]=sen_buff[0];
; 0000 01A7                         if(sen_buff[1]>sen[15])	sen[15]=sen_buff[1];
; 0000 01A8                         if(sen_buff[2]>sen[7])	sen[7]=sen_buff[2];
; 0000 01A9                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 01AA                 }
; 0000 01AB 
; 0000 01AC                 else if((MUX_A==1)&&(MUX_B==1)&&(MUX_C==1))
; 0000 01AD                 {
; 0000 01AE                 	sen_buff[0]=read_adc(0);
; 0000 01AF                         sen_buff[1]=read_adc(1);
; 0000 01B0                         sen_buff[2]=read_adc(2);
; 0000 01B1                         sen_buff[3]=read_adc(3);
; 0000 01B2 
; 0000 01B3                         if(sen_buff[0]>sen[24])	sen[24]=sen_buff[0];
; 0000 01B4                         if(sen_buff[1]>sen[16])	sen[16]=sen_buff[1];
; 0000 01B5                         if(sen_buff[2]>sen[8])	sen[8]=sen_buff[2];
; 0000 01B6                         if(sen_buff[3]>sen[25])	sen[25]=sen_buff[3];
; 0000 01B7                 }  */
; 0000 01B8       }
;PCODE: $000002E2 VOL: 0
;PCODE: $000002E3 VOL: 0
; 0000 01B9 }
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
