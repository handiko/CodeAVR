;/*****************************************************
;This program was produced by the
;CodeWizardAVR V1.25.3 Professional
;Automatic Program Generator
;© Copyright 1998-2007 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 10/1/2011
;Author  : Handiko Gesang
;Company :
;Comments:
;
;
;Chip type           : ATmega32
;Program type        : Application
;Clock frequency     : 12.000000 MHz
;Memory model        : Small
;External SRAM size  : 0
;Data Stack size     : 512
;*****************************************************/
;
;#include <mega32.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <lcd.h>
;#include <delay.h>
;#include <stdio.h>
;
;#define RXB8    1
;#define TXB8    0
;#define UPE     2
;#define OVR     3
;#define FE      4
;#define UDRE    5
;#define RXC     7
;
;#define FRAMING_ERROR           (1<<FE)
;#define PARITY_ERROR            (1<<UPE)
;#define DATA_OVERRUN            (1<<OVR)
;#define DATA_REGISTER_EMPTY     (1<<UDRE)
;#define RX_COMPLETE             (1<<RXC)
;
;#asm
;PCODE: $0000000D VOL: 0
   .equ __lcd_port=0x1B ;PORTA
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
; 0000 002D #endasm
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE  8
;char rx_buffer[RX_BUFFER_SIZE];
;
;#if RX_BUFFER_SIZE<256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void)
; 0000 003E {

	.CSEG
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 003F         char status,data;
; 0000 0040         status=UCSRA;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
; 0000 0041         data=UDR;
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
; 0000 0042         if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0)
;PCODE: $00000018 VOL: 0
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 0043         {
; 0000 0044                 rx_buffer[rx_wr_index]=data;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
; 0000 0045                 if (++rx_wr_index == RX_BUFFER_SIZE) rx_wr_index=0;
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 0046                 if (++rx_counter == RX_BUFFER_SIZE)
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0047                 {
; 0000 0048                         rx_counter=0;
;PCODE: $00000029 VOL: 0
; 0000 0049                         rx_buffer_overflow=1;
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
; 0000 004A                 };
;PCODE: $0000002D VOL: 0
; 0000 004B         };
;PCODE: $0000002E VOL: 0
; 0000 004C }
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;
;char getchar(void)
; 0000 0054 {
;PCODE: $00000033 VOL: 0
;PCODE: $00000034 VOL: 0
; 0000 0055         char data;
; 0000 0056         while (rx_counter==0);
;PCODE: $00000035 VOL: 0
;	data -> R17
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
; 0000 0057         data=rx_buffer[rx_rd_index];
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
; 0000 0058         if (++rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 0059 
; 0000 005A         #asm("cli")
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
	cli
;PCODE: $00000046 VOL: 0
; 0000 005B         --rx_counter;
;PCODE: $00000047 VOL: 0
; 0000 005C         #asm("sei")
;PCODE: $00000048 VOL: 0
	sei
;PCODE: $00000049 VOL: 0
; 0000 005D 
; 0000 005E         return data;
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 005F }
;PCODE: $0000004D VOL: 0
;#pragma used-
;#endif
;
;// USART Transmitter buffer
;#define TX_BUFFER_SIZE 8
;char tx_buffer[TX_BUFFER_SIZE];
;
;#if TX_BUFFER_SIZE<256
;unsigned char tx_wr_index,tx_rd_index,tx_counter;
;#else
;unsigned int tx_wr_index,tx_rd_index,tx_counter;
;#endif
;
;// USART Transmitter interrupt service routine
;interrupt [USART_TXC] void usart_tx_isr(void)
; 0000 006F {
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
; 0000 0070         if (tx_counter)
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0071         {
; 0000 0072                 --tx_counter;
;PCODE: $00000052 VOL: 0
; 0000 0073                 UDR=tx_buffer[tx_rd_index];
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0074                 if (++tx_rd_index == TX_BUFFER_SIZE) tx_rd_index=0;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
; 0000 0075         };
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0076 }
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Write a character to the USART Transmitter buffer
;#define _ALTERNATE_PUTCHAR_
;#pragma used+
;void putchar(char c)
; 0000 007D {
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
; 0000 007E         while (tx_counter == TX_BUFFER_SIZE);
;	c -> Y+0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 007F 
; 0000 0080         #asm("cli")
;PCODE: $0000006A VOL: 0
	cli
;PCODE: $0000006B VOL: 0
; 0000 0081         if (tx_counter || ((UCSRA & DATA_REGISTER_EMPTY)==0))
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 0082         {
; 0000 0083                 tx_buffer[tx_wr_index]=c;
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
; 0000 0084                 if (++tx_wr_index == TX_BUFFER_SIZE) tx_wr_index=0;
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
; 0000 0085                 ++tx_counter;
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
; 0000 0086         }
; 0000 0087         else
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 0088         UDR=c;
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
; 0000 0089 
; 0000 008A         #asm("sei")
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
	sei
;PCODE: $00000085 VOL: 0
; 0000 008B }
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
;PCODE: $00000088 VOL: 0
;
;#pragma used-
;#endif
;
;// Standard Input/Output functions
;#include <stdio.h>
;
;// Declare your global variables here
;
;void main(void)
; 0000 0096 {
;PCODE: $00000089 VOL: 0
; 0000 0097 // Declare your local variables here
; 0000 0098 
; 0000 0099 // Input/Output Ports initialization
; 0000 009A // Port A initialization
; 0000 009B // Func7=Out Func6=Out Func5=Out Func4=Out Func3=Out Func2=Out Func1=Out Func0=Out
; 0000 009C // State7=0 State6=0 State5=0 State4=0 State3=0 State2=0 State1=0 State0=0
; 0000 009D PORTA=0x00;
;PCODE: $0000008A VOL: 0
;PCODE: $0000008B VOL: 0
; 0000 009E DDRA=0xFF;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
; 0000 009F 
; 0000 00A0 // Port B initialization
; 0000 00A1 // Func7=Out Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A2 // State7=0 State6=P State5=P State4=P State3=P State2=P State1=P State0=P
; 0000 00A3 PORTB=0x7F;
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
; 0000 00A4 DDRB=0x80;
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 00A5 
; 0000 00A6 // Port C initialization
; 0000 00A7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A9 PORTC=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00AA DDRC=0x00;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 00AB 
; 0000 00AC // Port D initialization
; 0000 00AD // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=Out Func0=In
; 0000 00AE // State7=T State6=T State5=T State4=T State3=T State2=T State1=0 State0=T
; 0000 00AF PORTD=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00B0 DDRD=0x02;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00B1 
; 0000 00B2 // Timer/Counter 0 initialization
; 0000 00B3 // Clock source: System Clock
; 0000 00B4 // Clock value: Timer 0 Stopped
; 0000 00B5 // Mode: Normal top=FFh
; 0000 00B6 // OC0 output: Disconnected
; 0000 00B7 TCCR0=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00B8 TCNT0=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00B9 OCR0=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00BA 
; 0000 00BB // Timer/Counter 1 initialization
; 0000 00BC // Clock source: System Clock
; 0000 00BD // Clock value: Timer 1 Stopped
; 0000 00BE // Mode: Normal top=FFFFh
; 0000 00BF // OC1A output: Discon.
; 0000 00C0 // OC1B output: Discon.
; 0000 00C1 // Noise Canceler: Off
; 0000 00C2 // Input Capture on Falling Edge
; 0000 00C3 // Timer 1 Overflow Interrupt: Off
; 0000 00C4 // Input Capture Interrupt: Off
; 0000 00C5 // Compare A Match Interrupt: Off
; 0000 00C6 // Compare B Match Interrupt: Off
; 0000 00C7 TCCR1A=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00C8 TCCR1B=0x00;
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00C9 TCNT1H=0x00;
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00CA TCNT1L=0x00;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00CB ICR1H=0x00;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00CC ICR1L=0x00;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00CD OCR1AH=0x00;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00CE OCR1AL=0x00;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00CF OCR1BH=0x00;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00D0 OCR1BL=0x00;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00D1 
; 0000 00D2 // Timer/Counter 2 initialization
; 0000 00D3 // Clock source: System Clock
; 0000 00D4 // Clock value: Timer 2 Stopped
; 0000 00D5 // Mode: Normal top=FFh
; 0000 00D6 // OC2 output: Disconnected
; 0000 00D7 ASSR=0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00D8 TCCR2=0x00;
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00D9 TCNT2=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00DA OCR2=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00DB 
; 0000 00DC // External Interrupt(s) initialization
; 0000 00DD // INT0: Off
; 0000 00DE // INT1: Off
; 0000 00DF // INT2: Off
; 0000 00E0 MCUCR=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00E1 MCUCSR=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00E2 
; 0000 00E3 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00E4 TIMSK=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00E5 
; 0000 00E6 // USART initialization
; 0000 00E7 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00E8 // USART Receiver: On
; 0000 00E9 // USART Transmitter: On
; 0000 00EA // USART Mode: Asynchronous
; 0000 00EB // USART Baud rate: 9600
; 0000 00EC UCSRA=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00ED UCSRB=0xD8;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00EE UCSRC=0x86;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00EF UBRRH=0x00;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00F0 UBRRL=0x4D;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00F1 
; 0000 00F2 // Analog Comparator initialization
; 0000 00F3 // Analog Comparator: Off
; 0000 00F4 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00F5 ACSR=0x80;
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00F6 SFIOR=0x00;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00F7 
; 0000 00F8 // Global enable interrupts
; 0000 00F9 #asm("sei")
;PCODE: $000000D0 VOL: 0
	sei
;PCODE: $000000D1 VOL: 0
; 0000 00FA 
; 0000 00FB lcd_init(16);
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00FC 
; 0000 00FD lcd_clear();
;PCODE: $000000D5 VOL: 0
; 0000 00FE lcd_gotoxy(0,0);
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
; 0000 00FF lcd_putsf("A");
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
; 0000 0100 
; 0000 0101 while (1)
;PCODE: $000000DF VOL: 0
; 0000 0102       {
; 0000 0103       // Place your code here
; 0000 0104 
; 0000 0105       };
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 0106 }
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
