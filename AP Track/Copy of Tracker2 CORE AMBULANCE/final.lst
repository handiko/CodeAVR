
AVRASM ver. 2.1.30  H:\Punya Koko\LPKTA\Copy of Tracker2 CORE AMBULANCE\final.asm Mon Jul 21 15:26:42 2014

H:\Punya Koko\LPKTA\Copy of Tracker2 CORE AMBULANCE\final.asm(961): warning: Register r3 already defined by the .DEF directive
H:\Punya Koko\LPKTA\Copy of Tracker2 CORE AMBULANCE\final.asm(962): warning: Register r4 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V2.05.0 Professional
                 ;(C) Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Chip type                : ATtiny2313
                 ;Program type             : Application
                 ;Clock frequency          : 11.059200 MHz
                 ;Memory model             : Tiny
                 ;Optimize for             : Size
                 ;(s)printf features       : int, width
                 ;(s)scanf features        : int, width
                 ;External RAM size        : 0
                 ;Data Stack size          : 32 byte(s)
                 ;Heap size                : 0 byte(s)
                 ;Promote 'char' to 'int'  : No
                 ;'char' is unsigned       : No
                 ;8 bit enums              : Yes
                 ;global 'const' stored in FLASH: No
                 ;Enhanced core instructions    : On
                 ;Smart register allocation     : On
                 ;Automatic register allocation : On
                 
                 	#pragma AVRPART ADMIN PART_NAME ATtiny2313
                 	#pragma AVRPART MEMORY PROG_FLASH 2048
                 	#pragma AVRPART MEMORY EEPROM 128
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 223
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU WDTCR=0x21
                 	.EQU MCUSR=0x34
                 	.EQU MCUCR=0x35
                 	.EQU SPL=0x3D
                 	.EQU SREG=0x3F
                 	.EQU GPIOR0=0x13
                 	.EQU GPIOR1=0x14
                 	.EQU GPIOR2=0x15
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x00DF
                 	.EQU __DSTACK_SIZE=0x0020
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	RCALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	RCALL __EEPROMRDW
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R26,SPL
                 	IN   R27,SPH
                 	ADIW R26,@0+1
                 	LD   R30,X+
                 	LD   R31,X+
                 	LD   R22,X
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOV  R26,R@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	SUBI R26,-@1
                 	RCALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _xcount=R3
                 	.DEF _crc=R4
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION VALUES
                 	.EQU __GPIOR0_INIT=0x00
                 	.EQU __GPIOR1_INIT=0x00
                 	.EQU __GPIOR2_INIT=0x00
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 c028      	RJMP __RESET
000001 cffe      	RJMP 0x00
000002 c054      	RJMP _ext_int1_isr
000003 cffc      	RJMP 0x00
000004 cffb      	RJMP 0x00
000005 c057      	RJMP _timer1_ovf_isr
000006 cff9      	RJMP 0x00
000007 cff8      	RJMP 0x00
000008 cff7      	RJMP 0x00
000009 cff6      	RJMP 0x00
00000a cff5      	RJMP 0x00
00000b cff4      	RJMP 0x00
00000c cff3      	RJMP 0x00
00000d cff2      	RJMP 0x00
00000e cff1      	RJMP 0x00
00000f cff0      	RJMP 0x00
000010 cfef      	RJMP 0x00
000011 cfee      	RJMP 0x00
000012 cfed      	RJMP 0x00
                 
                 _matrix:
000013 0a07
000014 0e0d
000015 0e0f
000016 0a0d      	.DB  0x7,0xA,0xD,0xE,0xF,0xE,0xD,0xA
000017 0507
000018 0102
000019 0100
00001a 0502      	.DB  0x7,0x5,0x2,0x1,0x0,0x1,0x2,0x5
                 _tbl10_G100:
00001b 2710
00001c 03e8
00001d 0064
00001e 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
00001f 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000020 1000
000021 0100
000022 0010
000023 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 _0x8F:
H:\Punya Koko\LPKTA\Copy of Tracker2 CORE AMBULANCE\final.asm(1006): warning: .cseg .db misalignment - padding zero byte
000024 0000      	.DB  0x0
                 
                 __GLOBAL_INI_TBL:
000025 0001      	.DW  0x01
000026 0003      	.DW  0x03
000027 0048      	.DW  _0x8F*2
                 
                 _0xFFFFFFFF:
000028 0000      	.DW  0
                 
                 __RESET:
000029 94f8      	CLI
00002a 27ee      	CLR  R30
00002b bbec      	OUT  EECR,R30
00002c bfe5      	OUT  MCUCR,R30
                 
                 ;DISABLE WATCHDOG
00002d e1f8      	LDI  R31,0x18
00002e b7a4      	IN   R26,MCUSR
00002f 7fa7      	CBR  R26,8
000030 bfa4      	OUT  MCUSR,R26
000031 bdf1      	OUT  WDTCR,R31
000032 bde1      	OUT  WDTCR,R30
                 
                 ;CLEAR R2-R14
000033 e08d      	LDI  R24,(14-2)+1
000034 e0a2      	LDI  R26,2
                 __CLEAR_REG:
000035 93ed      	ST   X+,R30
000036 958a      	DEC  R24
000037 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000038 e880      	LDI  R24,__CLEAR_SRAM_SIZE
000039 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00003a 93ed      	ST   X+,R30
00003b 958a      	DEC  R24
00003c f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00003d e4ea      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00003e e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00003f 9185      	LPM  R24,Z+
000040 9195      	LPM  R25,Z+
000041 9700      	SBIW R24,0
000042 f061      	BREQ __GLOBAL_INI_END
000043 91a5      	LPM  R26,Z+
000044 91b5      	LPM  R27,Z+
000045 9005      	LPM  R0,Z+
000046 9015      	LPM  R1,Z+
000047 01bf      	MOVW R22,R30
000048 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000049 9005      	LPM  R0,Z+
00004a 920d      	ST   X+,R0
00004b 9701      	SBIW R24,1
00004c f7e1      	BRNE __GLOBAL_INI_LOOP
00004d 01fb      	MOVW R30,R22
00004e cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;GPIOR0-GPIOR2 INITIALIZATION
00004f e0e0      	LDI  R30,__GPIOR0_INIT
000050 bbe3      	OUT  GPIOR0,R30
                 	;__GPIOR1_INIT = __GPIOR0_INIT
000051 bbe4      	OUT  GPIOR1,R30
                 	;__GPIOR2_INIT = __GPIOR0_INIT
000052 bbe5      	OUT  GPIOR2,R30
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000053 edef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000054 bfed      	OUT  SPL,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000055 e8c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
                 
000056 c268      	RJMP _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x80
                 
                 	.CSEG
                 ;/***************************************************************************************
                 ;*
                 ;*				HANYA UNTUK TUJUAN EDUKASIONAL
                 ;*				FOR EDUCATION PURPOSE ONLY
                 ;*
                 ;*				COPYRIGHT (c)2012, HANDIKO GESANG ANUGRAH SEJATI
                 ;*				(handikogesang@gmail.com)
                 ;*
                 ;*				2 FEBRUARY 2012
                 ;*
                 ;*				BASIC APRS BEACON, GPS PARSER, & APRS ENCODER ONLY
                 ;*				TANPA FITUR SMART BEACONING(TM), TELEMETRY, DAN PC CONFIG
                 ;*
                 ;*				LAST REVISION 30 SEPTEMBER 2012
                 ;*
                 ;*				DOKUMEN INI BEBAS UNTUK DISEBARLUASKAN.
                 ;*				HARAP TIDAK MELAKUKAN PERUBAHAN APAPUN ATAS ISI DOKUMEN INI
                 ;*				DAN MENCANTUMKAN NAMA DAN EMAIL PENULIS JIKA INGIN MENYEBAR-
                 ;*				LUASKAN DOKUMEN INI.
                 ;*
                 ;* Project 		: 	APRS BEACON
                 ;* Version 		: 	GPS SUPPORTED, EEPROM DATA PROTECTOR SUPPORTED
                 ;* Date    		: 	02/02/2012
                 ;* Author  		: 	HANDIKO GESANG ANUGRAH S.
                 ;* Company 		: 	TIM INSTRUMENTASI TELEMETRI DAN TELEKONTROL
                 ;* 	  			LABORATORIUM SENSOR DAN SISTEM TELEKONTROL
                 ;* 	  			JURUSAN TEKNIK FISIKA
                 ;*           			FAKULTAS TEKNIK
                 ;*           			UNIVERSITAS GADJAH MADA
                 ;*
                 ;* Chip type           	: 	ATtiny2313
                 ;* Program type        	: 	Application
                 ;* Clock frequency     	: 	11.059200 MHz
                 ;* Memory model        	: 	Tiny
                 ;* External SRAM size  	: 	0
                 ;* Data Stack size     	: 	32
                 ;*
                 ;* File			:	final.c
                 ;*
                 ;* Fungsi - fungsi	: 	void set_dac(char value)
                 ;* 				void set_nada(char i_nada)
                 ;* 				void kirim_karakter(unsigned char input)
                 ;* 				void kirim_paket(void)
                 ;* 				void ubah_nada(void)
                 ;* 				void hitung_crc(char in_crc)
                 ;* 				void kirim_crc(void)
                 ;* 				void ekstrak_gps(void)
                 ;*
                 ;* Variabel global	:	char rx_buffer[RX_BUFFER_SIZE]
                 ;* 				bit rx_buffer_overflow
                 ;*                               flash char matrix[ ]
                 ;*				eeprom char data_1[ ]
                 ;*				eeprom char posisi_lat[ ]
                 ;*				eeprom char posisi_long[ ]
                 ;*				eeprom char data_extension[ ]
                 ;*				eeprom char komentar[ ]
                 ;*				eeprom char status[ ]
                 ;*				eeprom char beacon_stat
                 ;*				char xcount
                 ;*				bit nada
                 ;*				static char bit_stuff
                 ;*				unsigned short crc;
                 ;*
                 ;* Konstanta custom	:	_1200
                 ;* 				_2200
                 ;* 				CONST_1200
                 ;* 				CONST_2200
                 ;* 				GAP_TIME_
                 ;*				FLAG_
                 ;*				CONTROL_FIELD_
                 ;*				PROTOCOL_ID_
                 ;*				TD_POSISI_
                 ;*				TD_STATUS_
                 ;*				SYM_TAB_OVL_
                 ;*				SYM_CODE_
                 ;*
                 ;* Chip I/O		:	TX_NOW  PIND.3
                 ;* 				PTT     PORTB.3
                 ;* 				DAC_0   PORTB.7
                 ;* 				DAC_1   PORTB.6
                 ;* 				DAC_2   PORTB.5
                 ;* 				DAC_3   PORTB.4
                 ;* 				L_BUSY	PORTD.5
                 ;* 				L_STBY  PORTD.4
                 ;*
                 ;* Vektor		:	RJMP __RESET
                 ;*				RJMP _ext_int1_isr
                 ;*				RJMP _timer1_ovf_isr
                 ;*
                 ;* Fuse bit		:	BODLEVEL1 = 0
                 ;*
                 ;*
                 ;***************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <tiny2313.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x20
                 	.EQU __sm_mask=0x50
                 	.EQU __sm_powerdown=0x10
                 	.EQU __sm_standby=0x40
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <stdio.h>
                 ;#include <tiny4313_bits.h>
                 ;
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;*
                 ;*/
                 ;// definisi konstanta kondisi tone yang dikirimkan
                 ;#define _1200		0
                 ;#define _2200		1
                 ;
                 ;// definisi konstanta waktu de-sampling (rekonstruksi) diskrit gelombang sinus untuk tone
                 ;	// 1200Hz dan 2200Hz dalam microsecond (us). Silahkan fine tune konstanta ini untuk
                 ;        // adjusting baudrate dan cek hasilnya dengan menginputkan audio dari hardware APRS
                 ;        // pada PC / Laptop lalu cek hasil tone dan baudrate dengan Cool Edit pro pada
                 ;        // tampilan waveform atau spektral.
                 ;
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi ukuran
                 ;#ifdef	_OPTIMIZE_SIZE_
                 ;	#define CONST_1200      46
                 ;	#define CONST_2200      25  // 22-25    22-->2400Hz   25-->2200Hz
                 ;
                 ;        // Konstanta untuk kompilasi dalam mode optimasi kecepatan
                 ;#else
                 ;	#define CONST_1200      50
                 ;	#define CONST_2200      25
                 ;#endif
                 ;
                 ;// waktu jeda antara transmisi data dalam detik (s)
                 ;#define GAP_TIME_	12
                 ;
                 ;// konstanta waktu opening flag
                 ;#define TX_DELAY_	100
                 ;
                 ;// definisi konstanta karakter Flag
                 ;#define FLAG_		0x7E
                 ;
                 ;// definisi konstanta karakter Control Field
                 ;#define	CONTROL_FIELD_	0x03
                 ;
                 ;// definisi konstanta karakter PID
                 ;#define PROTOCOL_ID_	0xF0
                 ;
                 ;// definisi konstanta karakter Tipe Data posisi
                 ;#define TD_POSISI_	'!'
                 ;
                 ;// definisi konstanta karakter Tipe Data status
                 ;#define TD_STATUS_	'>'
                 ;
                 ;// definisi konstanta karakter simbol tabel dan overlay (/)
                 ;#define SYM_TAB_OVL_	'/'
                 ;
                 ;// definisi konstanta karakter simbol station (Ambulance)
                 ;#define SYM_CODE_	'a'
                 ;
                 ;// konstanta waktu closing flag
                 ;#define TX_TAIL_	15
                 ;
                 ;//	AKHIR DARI DEFINISI KONSTANTA - KONSTANTA CUSTOM
                 ;
                 ;
                 ;/**************************************************************************************/
                 ;
                 ;// header firmware
                 ;#include <delay.h>
                 ;#include <stdarg.h>
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEFINISI INPUT - OUTPUT ATTINY2313
                 ;*
                 ;*/
                 ;// definisi input TX manual (request interupsi eksternal) INT1
                 ;#define TX_NOW  PIND.3
                 ;
                 ;// definisi output LED TX dan transistor sebagai switch TX (Hi = TX, Lo = waiting)
                 ;#define PTT     PORTB.3
                 ;
                 ;// definisi output tegangan DAC ladder resistor sebagai generator sinusoid ( DAC_0 = LSB,
                 ;	// DAC_3 = MSB )
                 ;#define DAC_0   PORTB.7
                 ;#define DAC_1   PORTB.6
                 ;#define DAC_2   PORTB.5
                 ;#define DAC_3   PORTB.4
                 ;
                 ;// definisi output LED saat terima dan ekstrak data GPS (Hi = parsing, Lo = waiting)
                 ;#define L_BUSY	PORTD.5
                 ;
                 ;// definisi output LED saat menunggu interupsi (Hi = waiting, Lo = ada proses)
                 ;#define L_STBY  PORTD.4
                 ;
                 ;//	AKHIR DARI DEFINISI INPUT - OUTPUT ATTINY2313
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;*
                 ;*/
                 ;void set_dac(char value);
                 ;void set_nada(char i_nada);
                 ;void kirim_karakter(unsigned char input);
                 ;void kirim_paket(void);
                 ;void ubah_nada(void);
                 ;void hitung_crc(char in_crc);
                 ;void kirim_crc(void);
                 ;void ekstrak_gps(void);
                 ;
                 ;
                 ;//	AKHIR DARI DEKLARASI PROTOTYPE FUNGSI - FUNGSI
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	DEKLARASI VARIABEL GLOBAL
                 ;*
                 ;*/
                 ;
                 ;// variabel penyimpan nilai rekonstruksi diskrit gelombang sinusoid (matrix 16 ele.)
                 ;flash char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
                 ;
                 ;// variabel penyimpan data adresses
                 ;eeprom unsigned char data_1[21] =
                 ;{
                 ;	// destination field, tergeser kiri 1 bit
                 ;        ('A'<<1),('P'<<1),('R'<<1),('S'<<1),(' '<<1),(' '<<1),('0'<<1),
                 ;
                 ;        // source field, tergeser kiri 1 bit
                 ;	    // ('Y'<<1),('B'<<1),('2'<<1),('Y'<<1),('O'<<1),('U'<<1),('1'<<1),
                 ;        // ('Y'<<1),('B'<<1),('2'<<1),('Z'<<1),('Y'<<1),(' '<<1),('1'<<1),
                 ;        ('Y'<<1),('C'<<1),('2'<<1),('Z'<<1),('Y'<<1),('E'<<1),('1'<<1),
                 ;
                 ;        // path, tergeser kiri 1 bit
                 ;        ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),('2'<<1)+1
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi lintang dan update data gps
                 ;eeprom char posisi_lat[8] =
                 ;{
                 ;	// latitude
                 ;        '0','0','0','0','.','0','0','0'
                 ;};
                 ;
                 ;// variabel penyimpan data awal posisi bujur dan update data gps
                 ;eeprom char posisi_long[9] =
                 ;{
                 ;	// longitude
                 ;        '0','0','0','0','0','.','0','0','E'
                 ;};
                 ;
                 ;eeprom char altitude[6];
                 ;
                 ;// variabel penyimpan data extensi tipe PHGD
                 ;eeprom char data_extension[7] =
                 ;{
                 ;	// header tipe data ekstensi
                 ;        'P','H','G',
                 ;
                 ;        /************************************************************************************************
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;	|	PHGD CODE (Power Height Gain Directivity)						|
                 ;        |-----------------------------------------------------------------------------------------------|
                 ;        |	P		|	H		|	G		|	D		|
                 ;        |-----------------------|-----------------------|-----------------------|-----------------------|
                 ;        |  0 rep.of  0 watts	|  0 rep.of  10 ft.	|  0 rep.of   0dBi	|  0 rep.of  omni.	|
                 ;        |  1 rep.of  1 watts	|  1 rep.of  20 ft.	|  1 rep.of   1dBi	|  1 rep.of  NE		|
                 ;        |  2 rep.of  4 watts	|  2 rep.of  40 ft.	|  2 rep.of   2dBi	|  2 rep.of  E		|
                 ;        |  3 rep.of  9 watts	|  3 rep.of  80 ft.	|  3 rep.of   3dBi	|  3 rep.of  SE		|
                 ;        |  4 rep.of  16 watts   |  4 rep.of  160 ft.	|  4 rep.of   4dBi	|  4 rep.of  S		|
                 ;        |  5 rep.of  25 watts 	|  5 rep.of  320 ft.	|  5 rep.of   5dBi	|  5 rep.of  SW		|
                 ;        |  6 rep.of  36 watts	|  6 rep.of  640 ft.	|  6 rep.of   6dBi	|  6 rep.of  W		|
                 ;        |  7 rep.of  49 watts	|  7 rep.of  1280 ft.	|  7 rep.of   7dBi	|  7 rep.of  NW		|
                 ;        |  8 rep.of  64 watts	|  8 rep.of  2560 ft.	|  8 rep.of   8dBi	|  8 rep.of  N		|
                 ;        |  9 rep.of  81 watts	|  9 rep.of  5120 ft.	|  9 rep.of   9dBi	|-----------------------|
                 ;        *************************************************************************************************/
                 ;
                 ;
                 ;        // nilai representasi dari PHGD
                 ;        // power : 4 watts, P = 2
                 ;        '2',
                 ;
                 ;        // height above average terrain : 10 feet, H = 0
                 ;        '0',
                 ;
                 ;        // antenna gain : 2dBi, G = 2
                 ;        '2',
                 ;
                 ;        // antenna directivity : omnidirectional, D = 0
                 ;        '0'
                 ;
                 ;};
                 ;
                 ;// variabel penyimpan konstanta string komentar
                 ;eeprom char komentar[28] =
                 ;{
                 ;	'C','O','R','E',' ','O','R','D','A',' ','D','I','Y',' ',//'M','o','b','i','l','e',' ','T','r','a','c','k','e','r'
                 ;                                                            'A','m','b','u','l','a','n','c','e',' ',' ',' ',' ',' '
                 ;
                 ;};
                 ;
                 ;eeprom char status[47] =
                 ;{
                 ;	    'A','T','t','i','n','y','2','3','1','3',' ',
                 ;        'A','P','R','S',' ','t','r','a','c','k','e','r',' ',
                 ;        'h','a','n','d','i','k','o','g','e','s','a','n','g','@','g','m','a','i','l','.','c','o','m'
                 ;};
                 ;
                 ;// variabel pengingat urutan beacon dan status
                 ;eeprom char beacon_stat = 0;
                 ;
                 ;// variabel penyimpan nilai urutan interupsi, 0 ketika inisialisasi dan reset, 1 ketika TX,
                 ;	// 2 - GAP_TIME_ ketika parsing data gps
                 ;char xcount = 0;
                 ;
                 ;// variabel penyimpan tone terakhir, _1200 = 0, _2200 = 1, inisialisasi sebagai 1200Hz
                 ;bit nada = _1200;
                 ;
                 ;// variabel penyimpan enablisasi bit stuffing, 0 = disable bit stuffing, 1 = enable bit stuffing
                 ;static char bit_stuff = 0;
                 ;
                 ;// variabel penyimpan nilai sementara dan nilai akhir CRC-16 CCITT
                 ;unsigned short crc;
                 ;
                 ;//	AKHIR DARI DEKLARASI VARIABEL GLOBAL
                 ;
                 ;
                 ;/***************************************************************************************
                 ;*
                 ;*	KONSTANTA EVALUATOR
                 ;*
                 ;*/
                 ;// cek define _1200
                 ;#ifndef	_1200
                 ;#error	"KONSTANTA _1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define _2200
                 ;#ifndef	_2200
                 ;#error	"KONSTANTA _2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_1200
                 ;#ifndef	CONST_1200
                 ;#error	"KONSTANTA CONST_1200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define CONST_2200
                 ;#ifndef	CONST_2200
                 ;#error	"KONSTANTA CONST_2200 BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek define GAP_TIME_
                 ;#ifndef	GAP_TIME_
                 ;#error	"KONSTANTA GAP_TIME_ BELUM TERDEFINISI"
                 ;#endif
                 ;
                 ;// cek nilai GAP_TIME_ (harus antara 15 - 30)
                 ;#if	(GAP_TIME_ < 15)
                 ;//#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu singkat menyebabkan kepadatan traffic"
                 ;#endif
                 ;#if	(GAP_TIME_ > 60)
                 ;#error	"GAP_TIME_ harus bernilai antara 15 - 60. GAP_TIME_ yang terlalu panjang menyebabkan 'loose of track'  "
                 ;#endif
                 ;
                 ;//	AKHIR DARI KONSTANTA EVALUATOR
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[EXT_INT1] void ext_int1_isr(void)
                 ; 0000 0172 /***************************************************************************************
                 ; 0000 0173 *	ABSTRAKSI	:	interupsi eksternal, ketika input TX_NOW bernilai LOW,
                 ; 0000 0174 *				[EXT_INT1] aktif
                 ; 0000 0175 *
                 ; 0000 0176 *      	INPUT		:	input TX_NOW
                 ; 0000 0177 *	OUTPUT		:       LED standby dan LED busy
                 ; 0000 0178 *	RETURN		:       tak ada
                 ; 0000 0179 */
                 ; 0000 017A {
                 
                 	.CSEG
                 _ext_int1_isr:
000057 d299      	RCALL SUBOPT_0x0
                 ; 0000 017B 	// matikan LED standby
                 ; 0000 017C         L_STBY = 0;
                 ; 0000 017D 
                 ; 0000 017E         // tunggu 250ms (bounce switch)
                 ; 0000 017F         delay_ms(250);
000058 efea      	LDI  R30,LOW(250)
000059 e0f0      	LDI  R31,HIGH(250)
00005a d2a5      	RCALL SUBOPT_0x1
                 ; 0000 0180 
                 ; 0000 0181         // kirim paket data
                 ; 0000 0182         kirim_paket();
                 ; 0000 0183 
                 ; 0000 0184         // nyalakan LED standby
                 ; 0000 0185         L_STBY = 1;
00005b 9a94      	SBI  0x12,4
                 ; 0000 0186 
                 ; 0000 0187 } 	// EndOf interrupt [EXT_INT1] void ext_int1_isr(void)
00005c c017      	RJMP _0x8E
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	interrupt 		[TIM1_OVF] void timer1_ovf_isr(void)
                 ; 0000 018C /***************************************************************************************
                 ; 0000 018D *	ABSTRAKSI  	: 	interupsi overflow TIMER 1 [TIM1_OVF], di-set overflow
                 ; 0000 018E *				ketika waktu telah mencapai 1 detik. Pengendali urutan
                 ; 0000 018F *				waktu (timeline)antara transmisi data APRS dan parsing
                 ; 0000 0190 *				data gps
                 ; 0000 0191 *
                 ; 0000 0192 *      	INPUT		:	tak ada
                 ; 0000 0193 *	OUTPUT		:       kondisi LED standby dan LED busy
                 ; 0000 0194 *	RETURN		:       tak ada
                 ; 0000 0195 */
                 ; 0000 0196 {
                 _timer1_ovf_isr:
00005d d293      	RCALL SUBOPT_0x0
                 ; 0000 0197 	// matikan LED stanby
                 ; 0000 0198         L_STBY = 0;
                 ; 0000 0199 
                 ; 0000 019A         // tambahkan 1 nilai variabel xcount
                 ; 0000 019B         xcount++;
00005e 9433      	INC  R3
                 ; 0000 019C 
                 ; 0000 019D         // seleksi nilai variabel xcount
                 ; 0000 019E         if((xcount%2) == 0)
00005f 2da3      	MOV  R26,R3
000060 e0e2      	LDI  R30,LOW(2)
000061 d358      	RCALL __MODB21
000062 30e0      	CPI  R30,0
000063 f419      	BRNE _0x9
                 ; 0000 019F         {	// jika ya
                 ; 0000 01A0         	// nyalakan LED busy
                 ; 0000 01A1                 L_BUSY = 1;
000064 9a95      	SBI  0x12,5
                 ; 0000 01A2 
                 ; 0000 01A3                 // dapatkan data koordinat sekarang
                 ; 0000 01A4                 ekstrak_gps();
000065 d134      	RCALL _ekstrak_gps
                 ; 0000 01A5 
                 ; 0000 01A6                 //matikan LED busy
                 ; 0000 01A7                 L_BUSY = 0;
000066 9895      	CBI  0x12,5
                 ; 0000 01A8         }
                 ; 0000 01A9 
                 ; 0000 01AA         // terima dan ekstrak data gps ketika timer detik bernilai genap saja
                 ; 0000 01AB         if((xcount%8) == 0)
                 _0x9:
000067 2da3      	MOV  R26,R3
000068 e0e8      	LDI  R30,LOW(8)
000069 d350      	RCALL __MODB21
00006a 30e0      	CPI  R30,0
00006b f431      	BRNE _0xE
                 ; 0000 01AC         {	// jika ya
                 ; 0000 01AD         	// nyalakan LED busy
                 ; 0000 01AE                 L_BUSY = 1;
00006c 9a95      	SBI  0x12,5
                 ; 0000 01AF 
                 ; 0000 01B0                 // dapatkan data koordinat sekarang
                 ; 0000 01B1                 ekstrak_gps();
00006d d12c      	RCALL _ekstrak_gps
                 ; 0000 01B2 
                 ; 0000 01B3                 //matikan LED busy
                 ; 0000 01B4                 L_BUSY = 0;
00006e 9895      	CBI  0x12,5
                 ; 0000 01B5 
                 ; 0000 01B6                 // berikan delay sebentar
                 ; 0000 01B7                 delay_ms(500);
00006f d294      	RCALL SUBOPT_0x2
000070 d28f      	RCALL SUBOPT_0x1
                 ; 0000 01B8 
                 ; 0000 01B9                 // kirim paket data
                 ; 0000 01BA                 kirim_paket();
                 ; 0000 01BB 
                 ; 0000 01BC                 // reset variable counter
                 ; 0000 01BD                 xcount = 0;
000071 2433      	CLR  R3
                 ; 0000 01BE         }
                 ; 0000 01BF 
                 ; 0000 01C0         // nyalakan LED standby
                 ; 0000 01C1         L_STBY = 1;
                 _0xE:
000072 9a94      	SBI  0x12,4
                 ; 0000 01C2 
                 ; 0000 01C3         // reset kembali konstanta waktu timer
                 ; 0000 01C4         TCNT1H = 0xAB;
000073 d293      	RCALL SUBOPT_0x3
                 ; 0000 01C5         TCNT1L = 0xA0;
                 ; 0000 01C6 
                 ; 0000 01C7 }       // EndOf interrupt [TIM1_OVF] void timer1_ovf_isr(void)
                 _0x8E:
000074 91e9      	LD   R30,Y+
000075 bfef      	OUT  SREG,R30
000076 91f9      	LD   R31,Y+
000077 91e9      	LD   R30,Y+
000078 91b9      	LD   R27,Y+
000079 91a9      	LD   R26,Y+
00007a 9199      	LD   R25,Y+
00007b 9189      	LD   R24,Y+
00007c 9179      	LD   R23,Y+
00007d 9169      	LD   R22,Y+
00007e 90f9      	LD   R15,Y+
00007f 9019      	LD   R1,Y+
000080 9009      	LD   R0,Y+
000081 9518      	RETI
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_paket(void)
                 ; 0000 01CC /***************************************************************************************
                 ; 0000 01CD *	ABSTRAKSI  	: 	pengendali urutan pengiriman data APRS
                 ; 0000 01CE *				penyusun protokol APRS
                 ; 0000 01CF *
                 ; 0000 01D0 *      	INPUT		:	tak ada
                 ; 0000 01D1 *	OUTPUT		:       kondisi LED dan output transistor switch TX
                 ; 0000 01D2 *	RETURN		:       tak ada
                 ; 0000 01D3 */
                 ; 0000 01D4 {
                 _kirim_paket:
                 ; 0000 01D5 	char i;
                 ; 0000 01D6 
                 ; 0000 01D7         // inisialisasi nilai CRC dengan 0xFFFF
                 ; 0000 01D8 	crc = 0xFFFF;
000082 931a      	ST   -Y,R17
                 ;	i -> R17
000083 efef      	LDI  R30,LOW(65535)
000084 efff      	LDI  R31,HIGH(65535)
000085 012f      	MOVW R4,R30
                 ; 0000 01D9 
                 ; 0000 01DA         // tambahkan 1 nilai counter pancar
                 ; 0000 01DB         beacon_stat++;
000086 d285      	RCALL SUBOPT_0x4
000087 5fef      	SUBI R30,-LOW(1)
000088 d353      	RCALL __EEPROMWRB
000089 50e1      	SUBI R30,LOW(1)
                 ; 0000 01DC 
                 ; 0000 01DD         // nyalakan LED TX dan PTT switch
                 ; 0000 01DE 	PTT = 1;
00008a 9ac3      	SBI  0x18,3
                 ; 0000 01DF 
                 ; 0000 01E0         // tunggu 300ms
                 ; 0000 01E1         delay_ms(100);
00008b e6e4      	LDI  R30,LOW(100)
00008c e0f0      	LDI  R31,HIGH(100)
00008d d282      	RCALL SUBOPT_0x5
                 ; 0000 01E2 
                 ; 0000 01E3         /**********************************************************************************
                 ; 0000 01E4 
                 ; 0000 01E5         			APRS AX.25 PROTOCOL
                 ; 0000 01E6 
                 ; 0000 01E7         |------------------------------------------------------------------------
                 ; 0000 01E8         |   opn. FLAG	|	DESTINATION	|	SOURCE	|	DIGI'S	| CONTROL...
                 ; 0000 01E9         |---------------|-----------------------|---------------|---------------|
                 ; 0000 01EA         |   0x7E 1Bytes |	7 Bytes		|       7 Bytes |  0 - 56 Bytes	|
                 ; 0000 01EB         |------------------------------------------------------------------------
                 ; 0000 01EC 
                 ; 0000 01ED         	-----------------------------------------------------------------
                 ; 0000 01EE         DIGI'S..|	CONTROL FIELD	|	PROTOCOL ID	|	INFO	| FCS...
                 ; 0000 01EF                 |-----------------------|-----------------------|---------------|
                 ; 0000 01F0                 |    0x03 1 Bytes	|     0xF0 1 Bytes	|  0 - 256 Bytes|
                 ; 0000 01F1                 -----------------------------------------------------------------
                 ; 0000 01F2 
                 ; 0000 01F3         	--------------------------------|
                 ; 0000 01F4         INFO... |	FCS	|   cls. FLAG	|
                 ; 0000 01F5                 |---------------|---------------|
                 ; 0000 01F6                 |	2 Bytes	|   0x7E 1Bytes |
                 ; 0000 01F7                 --------------------------------|
                 ; 0000 01F8 
                 ; 0000 01F9         Sumber : APRS101, Tucson Amateur Packet Radio Club. www.tapr.org
                 ; 0000 01FA         ************************************************************************************/
                 ; 0000 01FB 
                 ; 0000 01FC         // kirim karakter opening flag
                 ; 0000 01FD         for(i=0;i<TX_DELAY_;i++)
00008e e010      	LDI  R17,LOW(0)
                 _0x18:
00008f 3614      	CPI  R17,100
000090 f424      	BRGE _0x19
                 ; 0000 01FE         	kirim_karakter(FLAG_);
000091 e7ee      	LDI  R30,LOW(126)
000092 d280      	RCALL SUBOPT_0x6
000093 5f1f      	SUBI R17,-1
000094 cffa      	RJMP _0x18
                 _0x19:
                 ; 0000 0201 bit_stuff = 0;
000095 d27f      	RCALL SUBOPT_0x7
                 ; 0000 0202 
                 ; 0000 0203         // kirimkan field : destination, source, PATH 1, PATH 2, control, Protocol ID, dan
                 ; 0000 0204         	// data type ID
                 ; 0000 0205         for(i=0;i<21;i++)
000096 e010      	LDI  R17,LOW(0)
                 _0x1B:
000097 3115      	CPI  R17,21
000098 f434      	BRGE _0x1C
                 ; 0000 0206         	kirim_karakter(data_1[i]);
000099 d27f      	RCALL SUBOPT_0x8
00009a 50a0      	SUBI R26,LOW(-_data_1)
00009b 40b0      	SBCI R27,HIGH(-_data_1)
00009c d27f      	RCALL SUBOPT_0x9
00009d 5f1f      	SUBI R17,-1
00009e cff8      	RJMP _0x1B
                 _0x1C:
                 ; 0000 0209 kirim_karakter(0x03);
00009f e0e3      	LDI  R30,LOW(3)
0000a0 d272      	RCALL SUBOPT_0x6
                 ; 0000 020A 
                 ; 0000 020B         // krimkan protocol ID
                 ; 0000 020C         kirim_karakter(PROTOCOL_ID_);
0000a1 efe0      	LDI  R30,LOW(240)
0000a2 d270      	RCALL SUBOPT_0x6
                 ; 0000 020D 
                 ; 0000 020E         // jika sudah 20 kali memancar,
                 ; 0000 020F         if(beacon_stat == 20)
0000a3 d268      	RCALL SUBOPT_0x4
0000a4 31e4      	CPI  R30,LOW(0x14)
0000a5 f481      	BRNE _0x1D
                 ; 0000 0210         {
                 ; 0000 0211         	// jika ya
                 ; 0000 0212                 // kirim tipe data status
                 ; 0000 0213                 kirim_karakter(TD_STATUS_);
0000a6 e3ee      	LDI  R30,LOW(62)
0000a7 d26b      	RCALL SUBOPT_0x6
                 ; 0000 0214 
                 ; 0000 0215                 // kirim teks status
                 ; 0000 0216                 for(i=0;i<47;i++)
0000a8 e010      	LDI  R17,LOW(0)
                 _0x1F:
0000a9 321f      	CPI  R17,47
0000aa f434      	BRGE _0x20
                 ; 0000 0217                 	kirim_karakter(status[i]);
0000ab d26d      	RCALL SUBOPT_0x8
0000ac 5ba8      	SUBI R26,LOW(-_status)
0000ad 4fbf      	SBCI R27,HIGH(-_status)
0000ae d26d      	RCALL SUBOPT_0x9
0000af 5f1f      	SUBI R17,-1
0000b0 cff8      	RJMP _0x1F
                 _0x20:
                 ; 0000 021A beacon_stat = 0;
0000b1 e7a7      	LDI  R26,LOW(_beacon_stat)
0000b2 e0b0      	LDI  R27,HIGH(_beacon_stat)
0000b3 e0e0      	LDI  R30,LOW(0)
0000b4 d327      	RCALL __EEPROMWRB
                 ; 0000 021B 
                 ; 0000 021C                 // lompat ke kirim crc
                 ; 0000 021D                 goto lompat;
0000b5 c033      	RJMP _0x21
                 ; 0000 021E         }
                 ; 0000 021F 
                 ; 0000 0220         // krimkan tipe data posisi
                 ; 0000 0221         kirim_karakter(TD_POSISI_);
                 _0x1D:
0000b6 e2e1      	LDI  R30,LOW(33)
0000b7 d25b      	RCALL SUBOPT_0x6
                 ; 0000 0222 
                 ; 0000 0223         // kirimkan posisi lintang
                 ; 0000 0224         for(i=0;i<8;i++)
0000b8 e010      	LDI  R17,LOW(0)
                 _0x23:
0000b9 3018      	CPI  R17,8
0000ba f434      	BRGE _0x24
                 ; 0000 0225         	kirim_karakter(posisi_lat[i]);
0000bb d25d      	RCALL SUBOPT_0x8
0000bc 5eab      	SUBI R26,LOW(-_posisi_lat)
0000bd 4fbf      	SBCI R27,HIGH(-_posisi_lat)
0000be d25d      	RCALL SUBOPT_0x9
0000bf 5f1f      	SUBI R17,-1
0000c0 cff8      	RJMP _0x23
                 _0x24:
                 ; 0000 0228 kirim_karakter('/');
0000c1 e2ef      	LDI  R30,LOW(47)
0000c2 d250      	RCALL SUBOPT_0x6
                 ; 0000 0229 
                 ; 0000 022A         // kirimkan posisi bujur
                 ; 0000 022B 	for(i=0;i<9;i++)
0000c3 e010      	LDI  R17,LOW(0)
                 _0x26:
0000c4 3019      	CPI  R17,9
0000c5 f434      	BRGE _0x27
                 ; 0000 022C         	kirim_karakter(posisi_long[i]);
0000c6 d252      	RCALL SUBOPT_0x8
0000c7 5ea3      	SUBI R26,LOW(-_posisi_long)
0000c8 4fbf      	SBCI R27,HIGH(-_posisi_long)
0000c9 d252      	RCALL SUBOPT_0x9
0000ca 5f1f      	SUBI R17,-1
0000cb cff8      	RJMP _0x26
                 _0x27:
                 ; 0000 022F kirim_karakter('a');
0000cc e6e1      	LDI  R30,LOW(97)
0000cd d245      	RCALL SUBOPT_0x6
                 ; 0000 0230 
                 ; 0000 0231         kirim_karakter('/');
0000ce e2ef      	LDI  R30,LOW(47)
0000cf d243      	RCALL SUBOPT_0x6
                 ; 0000 0232         kirim_karakter('A');
0000d0 e4e1      	LDI  R30,LOW(65)
0000d1 d241      	RCALL SUBOPT_0x6
                 ; 0000 0233         kirim_karakter('=');
0000d2 e3ed      	LDI  R30,LOW(61)
0000d3 d23f      	RCALL SUBOPT_0x6
                 ; 0000 0234 
                 ; 0000 0235         for(i=0;i<6;i++)
0000d4 e010      	LDI  R17,LOW(0)
                 _0x29:
0000d5 3016      	CPI  R17,6
0000d6 f434      	BRGE _0x2A
                 ; 0000 0236                 kirim_karakter(altitude[i]);
0000d7 d241      	RCALL SUBOPT_0x8
0000d8 5daa      	SUBI R26,LOW(-_altitude)
0000d9 4fbf      	SBCI R27,HIGH(-_altitude)
0000da d241      	RCALL SUBOPT_0x9
0000db 5f1f      	SUBI R17,-1
0000dc cff8      	RJMP _0x29
                 _0x2A:
                 ; 0000 0239 if(beacon_stat == 5)
0000dd d22e      	RCALL SUBOPT_0x4
0000de 30e5      	CPI  R30,LOW(0x5)
0000df f449      	BRNE _0x2B
                 ; 0000 023A         {
                 ; 0000 023B         	// kirimkan field informasi : data ekstensi tipe PHGD
                 ; 0000 023C         	//for(i=0;i<7;i++)
                 ; 0000 023D         	//	kirim_karakter(data_extension[i]);
                 ; 0000 023E 
                 ; 0000 023F                 // kirimkan field informasi : comment
                 ; 0000 0240        		for(i=0;i<28;i++)
0000e0 e010      	LDI  R17,LOW(0)
                 _0x2D:
0000e1 311c      	CPI  R17,28
0000e2 f434      	BRGE _0x2E
                 ; 0000 0241         		kirim_karakter(komentar[i]);
0000e3 d235      	RCALL SUBOPT_0x8
0000e4 5da4      	SUBI R26,LOW(-_komentar)
0000e5 4fbf      	SBCI R27,HIGH(-_komentar)
0000e6 d235      	RCALL SUBOPT_0x9
0000e7 5f1f      	SUBI R17,-1
0000e8 cff8      	RJMP _0x2D
                 _0x2E:
                 ; 0000 0242 }
                 ; 0000 0243 
                 ; 0000 0244 
                 ; 0000 0245         // label lompatan
                 ; 0000 0246         lompat:
                 _0x2B:
                 _0x21:
                 ; 0000 0247 
                 ; 0000 0248         // kirimkan field : FCS (CRC-16 CCITT)
                 ; 0000 0249         kirim_crc();
0000e9 d00d      	RCALL _kirim_crc
                 ; 0000 024A 
                 ; 0000 024B         // kirimkan karakter closing flag
                 ; 0000 024C         for(i=0;i<TX_TAIL_;i++)
0000ea e010      	LDI  R17,LOW(0)
                 _0x30:
0000eb 301f      	CPI  R17,15
0000ec f424      	BRGE _0x31
                 ; 0000 024D         	kirim_karakter(FLAG_);
0000ed e7ee      	LDI  R30,LOW(126)
0000ee d224      	RCALL SUBOPT_0x6
0000ef 5f1f      	SUBI R17,-1
0000f0 cffa      	RJMP _0x30
                 _0x31:
                 ; 0000 0250 delay_ms(50);
0000f1 e3e2      	LDI  R30,LOW(50)
0000f2 e0f0      	LDI  R31,HIGH(50)
0000f3 d21c      	RCALL SUBOPT_0x5
                 ; 0000 0251         PTT = 0;
0000f4 98c3      	CBI  0x18,3
                 ; 0000 0252 
                 ; 0000 0253 
                 ; 0000 0254 }       // EndOf void kirim_paket(void)
0000f5 9119      	LD   R17,Y+
0000f6 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_crc(void)
                 ; 0000 0259 /***************************************************************************************
                 ; 0000 025A *	ABSTRAKSI  	: 	Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
                 ; 0000 025B *				nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
                 ; 0000 025C *				Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 025D *				leading one.
                 ; 0000 025E *
                 ; 0000 025F *      	INPUT		:	tak ada
                 ; 0000 0260 *	OUTPUT		:       tak ada
                 ; 0000 0261 *	RETURN		:       tak ada
                 ; 0000 0262 */
                 ; 0000 0263 {
                 _kirim_crc:
                 ; 0000 0264 	static unsigned char crc_lo;
                 ; 0000 0265 	static unsigned char crc_hi;
                 ; 0000 0266 
                 ; 0000 0267         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
                 ; 0000 0268         crc_lo = crc ^ 0xFF;
0000f7 efef      	LDI  R30,LOW(255)
0000f8 25e4      	EOR  R30,R4
0000f9 93e0 0081 	STS  _crc_lo_S0000003000,R30
                 ; 0000 0269 
                 ; 0000 026A         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
                 ; 0000 026B         crc_hi = (crc >> 8) ^ 0xFF;
0000fb 2de5      	MOV  R30,R5
0000fc 70f0      	ANDI R31,HIGH(0x0)
0000fd efaf      	LDI  R26,LOW(255)
0000fe 27ea      	EOR  R30,R26
0000ff 93e0 0082 	STS  _crc_hi_S0000003000,R30
                 ; 0000 026C 
                 ; 0000 026D         // kirim 8 LSB
                 ; 0000 026E         kirim_karakter(crc_lo);
000101 91e0 0081 	LDS  R30,_crc_lo_S0000003000
000103 d20f      	RCALL SUBOPT_0x6
                 ; 0000 026F 
                 ; 0000 0270         // kirim 8 MSB
                 ; 0000 0271         kirim_karakter(crc_hi);
000104 91e0 0082 	LDS  R30,_crc_hi_S0000003000
000106 d20c      	RCALL SUBOPT_0x6
                 ; 0000 0272 
                 ; 0000 0273 }       // EndOf void kirim_crc(void)
000107 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			kirim_karakter(unsigned char input)
                 ; 0000 0278 /***************************************************************************************
                 ; 0000 0279 *	ABSTRAKSI  	: 	mengirim data APRS karakter-demi-karakter, menghitung FCS
                 ; 0000 027A *				field dan melakukan bit stuffing. Polarisasi data adalah
                 ; 0000 027B *				NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
                 ; 0000 027C *				bit terakhir yang ditahan jika bit masukan adalah bit 1.
                 ; 0000 027D *				Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
                 ; 0000 027E *				masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
                 ; 0000 027F * 				merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
                 ; 0000 0280 *				tone adalah tidak penting dalam polarisasi data NRZI.
                 ; 0000 0281 *
                 ; 0000 0282 *      	INPUT		:	byte data protokol APRS
                 ; 0000 0283 *	OUTPUT		:       tak ada
                 ; 0000 0284 *	RETURN		:       tak ada
                 ; 0000 0285 */
                 ; 0000 0286 {
                 _kirim_karakter:
000108 92ff      	PUSH R15
                 ; 0000 0287 	char i;
                 ; 0000 0288 	bit in_bit;
                 ; 0000 0289 
                 ; 0000 028A         // kirimkan setiap byte data (8 bit)
                 ; 0000 028B 	for(i=0;i<8;i++)
000109 931a      	ST   -Y,R17
                 ;	input -> Y+1
                 ;	i -> R17
                 ;	in_bit -> R15.0
00010a e010      	LDI  R17,LOW(0)
                 _0x35:
00010b 3018      	CPI  R17,8
00010c f514      	BRGE _0x36
                 ; 0000 028C         {
                 ; 0000 028D         	// ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
                 ; 0000 028E                 in_bit = (input >> i) & 0x01;
00010d 2fe1      	MOV  R30,R17
00010e 81a9      	LDD  R26,Y+1
00010f d24c      	RCALL __LSRB12
000110 fbe0      	BST  R30,0
000111 f8f0      	BLD  R15,0
                 ; 0000 028F 
                 ; 0000 0290                 // jika data adalah flag, nol-kan pengingat bit stuffing
                 ; 0000 0291                 if(input==0x7E)	{bit_stuff = 0;}
000112 37ae      	CPI  R26,LOW(0x7E)
000113 f411      	BRNE _0x37
000114 d200      	RCALL SUBOPT_0x7
                 ; 0000 0292 
                 ; 0000 0293                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
                 ; 0000 0294                 else		{hitung_crc(in_bit);}
000115 c005      	RJMP _0x38
                 _0x37:
000116 e0e0      	LDI  R30,0
000117 fcf0      	SBRC R15,0
000118 e0e1      	LDI  R30,1
000119 93ea      	ST   -Y,R30
00011a d018      	RCALL _hitung_crc
                 _0x38:
                 ; 0000 0295 
                 ; 0000 0296                 // jika bit data saat ini adalah
                 ; 0000 0297                 // nol
                 ; 0000 0298                 if(!in_bit)
00011b fef0      	SBRS R15,0
                 ; 0000 0299                 {	// jika ya
                 ; 0000 029A                 	// ubah tone dan bentuk gelombang sinus
                 ; 0000 029B                         ubah_nada();
00011c c00e      	RJMP _0x8C
                 ; 0000 029C 
                 ; 0000 029D                         // nol-kan pengingat bit stuffing
                 ; 0000 029E                         bit_stuff = 0;
                 ; 0000 029F                 }
                 ; 0000 02A0                 // satu
                 ; 0000 02A1                 else
                 ; 0000 02A2                 {	// jika ya
                 ; 0000 02A3                 	// jaga tone dan bentuk gelombang sinus
                 ; 0000 02A4                         set_nada(nada);
00011d e0e0      	LDI  R30,0
00011e 9998      	SBIC 0x13,0
00011f e0e1      	LDI  R30,1
000120 93ea      	ST   -Y,R30
000121 d051      	RCALL _set_nada
                 ; 0000 02A5 
                 ; 0000 02A6                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
                 ; 0000 02A7                         bit_stuff++;
000122 91e0 0080 	LDS  R30,_bit_stuff_G000
000124 5fef      	SUBI R30,-LOW(1)
000125 93e0 0080 	STS  _bit_stuff_G000,R30
                 ; 0000 02A8 
                 ; 0000 02A9                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
                 ; 0000 02AA                         if(bit_stuff==5)
000127 91a0 0080 	LDS  R26,_bit_stuff_G000
000129 30a5      	CPI  R26,LOW(0x5)
00012a f411      	BRNE _0x3B
                 ; 0000 02AB                         {
                 ; 0000 02AC                         	// kirim bit nol :
                 ; 0000 02AD                                 // ubah tone dan bentuk gelombang sinus
                 ; 0000 02AE                                 ubah_nada();
                 _0x8C:
00012b d01c      	RCALL _ubah_nada
                 ; 0000 02AF 
                 ; 0000 02B0                                 // nol-kan pengingat bit stuffing
                 ; 0000 02B1                                 bit_stuff = 0;
00012c d1e8      	RCALL SUBOPT_0x7
                 ; 0000 02B2 
                 ; 0000 02B3                         }
                 ; 0000 02B4                 }
                 _0x3B:
                 ; 0000 02B5         }
00012d 5f1f      	SUBI R17,-1
00012e cfdc      	RJMP _0x35
                 _0x36:
                 ; 0000 02B6 
                 ; 0000 02B7 }      // EndOf void kirim_karakter(unsigned char input)
00012f 8118      	LDD  R17,Y+0
000130 9622      	ADIW R28,2
000131 90ff      	POP  R15
000132 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			hitung_crc(char in_crc)
                 ; 0000 02BC /***************************************************************************************
                 ; 0000 02BD *	ABSTRAKSI  	: 	menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
                 ; 0000 02BE *				generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
                 ; 0000 02BF *				leading one
                 ; 0000 02C0 *
                 ; 0000 02C1 *      	INPUT		:	bit data yang terkirim
                 ; 0000 02C2 *	OUTPUT		:       tak ada
                 ; 0000 02C3 *	RETURN		:       tak ada
                 ; 0000 02C4 */
                 ; 0000 02C5 {
                 _hitung_crc:
                 ; 0000 02C6 	static unsigned short xor_in;
                 ; 0000 02C7 
                 ; 0000 02C8         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
                 ; 0000 02C9 	xor_in = crc ^ in_crc;
                 ;	in_crc -> Y+0
000133 81e8      	LD   R30,Y
000134 e0f0      	LDI  R31,0
000135 fde7      	SBRC R30,7
000136 efff      	SER  R31
000137 25e4      	EOR  R30,R4
000138 25f5      	EOR  R31,R5
000139 93e0 0083 	STS  _xor_in_S0000005000,R30
00013b 93f0 0084 	STS  _xor_in_S0000005000+1,R31
                 ; 0000 02CA 
                 ; 0000 02CB         // geser kanan nilai CRC sebanyak 1 bit
                 ; 0000 02CC 	crc >>= 1;
00013d 9456      	LSR  R5
00013e 9447      	ROR  R4
                 ; 0000 02CD 
                 ; 0000 02CE         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
                 ; 0000 02CF         if(xor_in & 0x01)
00013f 91e0 0083 	LDS  R30,_xor_in_S0000005000
000141 70e1      	ANDI R30,LOW(0x1)
000142 f021      	BREQ _0x3C
                 ; 0000 02D0         	// maka nilai CRC di-Exor-kan dengan generator polinomial
                 ; 0000 02D1                 crc ^= 0x8408;
000143 e0e8      	LDI  R30,LOW(33800)
000144 e8f4      	LDI  R31,HIGH(33800)
                +
000145 264e     +EOR R4 , R30
000146 265f     +EOR R5 , R31
                 	__EORWRR 4,5,30,31
                 ; 0000 02D2 
                 ; 0000 02D3 }      // EndOf void hitung_crc(char in_crc)
                 _0x3C:
000147 c029      	RJMP _0x2060001
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ubah_nada(void)
                 ; 0000 02D8 /***************************************************************************************
                 ; 0000 02D9 *	ABSTRAKSI  	: 	Menukar seting tone terakhir dengan tone yang baru. Tone
                 ; 0000 02DA *				1200Hz dan 2200Hz masing - masing merepresentasikan bit
                 ; 0000 02DB *				0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
                 ; 0000 02DC *				penting dalam polarisasi data NRZI.
                 ; 0000 02DD *
                 ; 0000 02DE *      	INPUT		:	tak ada
                 ; 0000 02DF *	OUTPUT		:       tak ada
                 ; 0000 02E0 *	RETURN		:       tak ada
                 ; 0000 02E1 */
                 ; 0000 02E2 {
                 _ubah_nada:
                 ; 0000 02E3 	// jika tone terakhir adalah :
                 ; 0000 02E4         // 1200Hz
                 ; 0000 02E5         if(nada ==_1200)
000148 9998      	SBIC 0x13,0
000149 c002      	RJMP _0x3D
                 ; 0000 02E6 	{	// jika ya
                 ; 0000 02E7         	// ubah tone saat ini menjadi 2200Hz
                 ; 0000 02E8                 nada = _2200;
00014a 9a98      	SBI  0x13,0
                 ; 0000 02E9 
                 ; 0000 02EA                 // bangkitkan gelombang sinus 2200Hz
                 ; 0000 02EB         	set_nada(nada);
00014b c001      	RJMP _0x8D
                 ; 0000 02EC 	}
                 ; 0000 02ED         // 2200Hz
                 ; 0000 02EE         else
                 _0x3D:
                 ; 0000 02EF         {	// jika ya
                 ; 0000 02F0         	// ubah tone saat ini menjadi 1200Hz
                 ; 0000 02F1                 nada = _1200;
00014c 9898      	CBI  0x13,0
                 ; 0000 02F2 
                 ; 0000 02F3                 // bangkitkan gelombang sinus 1200Hz
                 ; 0000 02F4         	set_nada(nada);
                 _0x8D:
00014d e0e0      	LDI  R30,0
00014e 9998      	SBIC 0x13,0
00014f e0e1      	LDI  R30,1
000150 93ea      	ST   -Y,R30
000151 d021      	RCALL _set_nada
                 ; 0000 02F5         }
                 ; 0000 02F6 
                 ; 0000 02F7 }       // EndOf void ubah_nada(void)
000152 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_dac(char value)
                 ; 0000 02FC /***************************************************************************************
                 ; 0000 02FD *	ABSTRAKSI  	: 	Men-set dan reset output DAC sebagai bilangan biner yang
                 ; 0000 02FE *				merepresentasikan nilai diskrit dari gelombang sinus yang
                 ; 0000 02FF *				sedang dibentuk saat ini sehingga membentuk tegangan sampling
                 ; 0000 0300 *				dari gelombang.
                 ; 0000 0301 *
                 ; 0000 0302 *      	INPUT		:	nilai matrix rekonstruksi diskrit gelombang sinusoid
                 ; 0000 0303 *	OUTPUT		:       DAC 0 - 3, tegangan kontinyu pada output Low Pass Filter
                 ; 0000 0304 *	RETURN		:       tak ada
                 ; 0000 0305 */
                 ; 0000 0306 {
                 _set_dac:
                 ; 0000 0307 	// ambil nilai LSB dari matrix rekonstruksi dan set sebagai DAC-0
                 ; 0000 0308         DAC_0 = value & 0x01;
                 ;	value -> Y+0
000153 81e8      	LD   R30,Y
000154 70e1      	ANDI R30,LOW(0x1)
000155 f411      	BRNE _0x43
000156 98c7      	CBI  0x18,7
000157 c001      	RJMP _0x44
                 _0x43:
000158 9ac7      	SBI  0x18,7
                 _0x44:
                 ; 0000 0309 
                 ; 0000 030A         // ambil nilai dari matrix rekonstruksi, geser kanan 1 bit, ambil bit paling kanan
                 ; 0000 030B         	// dan set sebagai DAC-1
                 ; 0000 030C         DAC_1 =( value >> 1 ) & 0x01;
000159 81e8      	LD   R30,Y
00015a 95e5      	ASR  R30
00015b 70e1      	ANDI R30,LOW(0x1)
00015c f411      	BRNE _0x45
00015d 98c6      	CBI  0x18,6
00015e c001      	RJMP _0x46
                 _0x45:
00015f 9ac6      	SBI  0x18,6
                 _0x46:
                 ; 0000 030D 
                 ; 0000 030E         // ambil nilai dari matrix rekonstruksi, geser kanan 2 bit, ambil bit paling kanan
                 ; 0000 030F         	// dan set sebagai DAC-2
                 ; 0000 0310         DAC_2 =( value >> 2 ) & 0x01;
000160 81e8      	LD   R30,Y
000161 95e5      	ASR  R30
000162 95e5      	ASR  R30
000163 70e1      	ANDI R30,LOW(0x1)
000164 f411      	BRNE _0x47
000165 98c5      	CBI  0x18,5
000166 c001      	RJMP _0x48
                 _0x47:
000167 9ac5      	SBI  0x18,5
                 _0x48:
                 ; 0000 0311 
                 ; 0000 0312         // ambil nilai dari matrix rekonstruksi, geser kanan 3 bit, ambil bit tersebut dan
                 ; 0000 0313         	// set sebagai DAC-3 (MSB)
                 ; 0000 0314         DAC_3 =( value >> 3 ) & 0x01;
000168 81e8      	LD   R30,Y
000169 95e5      	ASR  R30
00016a 95e5      	ASR  R30
00016b 95e5      	ASR  R30
00016c 70e1      	ANDI R30,LOW(0x1)
00016d f411      	BRNE _0x49
00016e 98c4      	CBI  0x18,4
00016f c001      	RJMP _0x4A
                 _0x49:
000170 9ac4      	SBI  0x18,4
                 _0x4A:
                 ; 0000 0315 
                 ; 0000 0316 }      	// EndOf void set_dac(char value)
                 _0x2060001:
000171 9621      	ADIW R28,1
000172 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			set_nada(char i_nada)
                 ; 0000 031B /***************************************************************************************
                 ; 0000 031C *	ABSTRAKSI  	: 	Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
                 ; 0000 031D *				dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
                 ; 0000 031E *				tuning pada jumlah masing - masing perulangan for dan
                 ; 0000 031F *				konstanta waktu untuk meng-adjust parameter baudrate dan
                 ; 0000 0320 *				frekuensi tone.
                 ; 0000 0321 *
                 ; 0000 0322 *      	INPUT		:	nilai frekuensi tone yang akan ditransmisikan
                 ; 0000 0323 *	OUTPUT		:       nilai DAC
                 ; 0000 0324 *	RETURN		:       tak ada
                 ; 0000 0325 */
                 ; 0000 0326 {
                 _set_nada:
                 ; 0000 0327 	char i;
                 ; 0000 0328 
                 ; 0000 0329         // jika frekuensi tone yang akan segera dipancarkan adalah :
                 ; 0000 032A         // 1200Hz
                 ; 0000 032B 	if(i_nada == _1200)
000173 931a      	ST   -Y,R17
                 ;	i_nada -> Y+1
                 ;	i -> R17
000174 81e9      	LDD  R30,Y+1
000175 30e0      	CPI  R30,0
000176 f451      	BRNE _0x4B
                 ; 0000 032C     	{
                 ; 0000 032D         	// jika ya
                 ; 0000 032E         	for(i=0; i<16; i++)
000177 e010      	LDI  R17,LOW(0)
                 _0x4D:
000178 3110      	CPI  R17,16
000179 f434      	BRGE _0x4E
                 ; 0000 032F         	{
                 ; 0000 0330                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0331                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0332                 	set_dac(matrix[i]);
00017a d1a3      	RCALL SUBOPT_0xA
                 ; 0000 0333 
                 ; 0000 0334                         // bangkitkan frekuensi 1200Hz dari konstanta waktu
                 ; 0000 0335         		delay_us(CONST_1200);
                +
00017b ea8a     +LDI R24 , LOW ( 170 )
                +__DELAY_USB_LOOP :
00017c 958a     +DEC R24
00017d f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 170
                 ; 0000 0336         	}
00017e 5f1f      	SUBI R17,-1
00017f cff8      	RJMP _0x4D
                 _0x4E:
                 ; 0000 0337     	}
                 ; 0000 0338         // 2200Hz
                 ; 0000 0339     	else
000180 c012      	RJMP _0x4F
                 _0x4B:
                 ; 0000 033A     	{
                 ; 0000 033B         	// jika ya
                 ; 0000 033C         	for(i=0; i<15; i++)
000181 e010      	LDI  R17,LOW(0)
                 _0x51:
000182 301f      	CPI  R17,15
000183 f434      	BRGE _0x52
                 ; 0000 033D         	{
                 ; 0000 033E                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 033F                 		// dan urutan perulangan for 0 - 15
                 ; 0000 0340                 	set_dac(matrix[i]);
000184 d199      	RCALL SUBOPT_0xA
                 ; 0000 0341 
                 ; 0000 0342                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 0343                 	delay_us(CONST_2200);
                +
000185 e58c     +LDI R24 , LOW ( 92 )
                +__DELAY_USB_LOOP :
000186 958a     +DEC R24
000187 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 92
                 ; 0000 0344                 }
000188 5f1f      	SUBI R17,-1
000189 cff8      	RJMP _0x51
                 _0x52:
                 ; 0000 0345                 // sekali lagi, untuk mengatur baudrate lakukan fine tune pada jumlah for
                 ; 0000 0346                 for(i=0; i<12; i++)
00018a e010      	LDI  R17,LOW(0)
                 _0x54:
00018b 301c      	CPI  R17,12
00018c f434      	BRGE _0x55
                 ; 0000 0347                 {
                 ; 0000 0348                 	// set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
                 ; 0000 0349                 		// dan urutan perulangan for
                 ; 0000 034A                 	set_dac(matrix[i]);
00018d d190      	RCALL SUBOPT_0xA
                 ; 0000 034B 
                 ; 0000 034C                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
                 ; 0000 034D                 	delay_us(CONST_2200);
                +
00018e e58c     +LDI R24 , LOW ( 92 )
                +__DELAY_USB_LOOP :
00018f 958a     +DEC R24
000190 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 92
                 ; 0000 034E                 }
000191 5f1f      	SUBI R17,-1
000192 cff8      	RJMP _0x54
                 _0x55:
                 ; 0000 034F     	}
                 _0x4F:
                 ; 0000 0350 
                 ; 0000 0351 } 	// EndOf void set_nada(char i_nada)
000193 8118      	LDD  R17,Y+0
000194 9622      	ADIW R28,2
000195 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			getComma(void)
                 ; 0000 0356 /***************************************************************************************
                 ; 0000 0357 *	ABSTRAKSI  	: 	Menunggu data RX serial berupa karakter koma dan segera
                 ; 0000 0358 *				kembali pada fungsi yang memanggilnya.
                 ; 0000 0359 *
                 ; 0000 035A *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 035B *	OUTPUT		:       tak ada
                 ; 0000 035C *	RETURN		:       tak ada
                 ; 0000 035D */
                 ; 0000 035E {
                 _getComma:
                 ; 0000 035F 	// jika data yang diterima bukan karakter koma, terima terus
                 ; 0000 0360         	// jika data yang diterima adalah koma, keluar
                 ; 0000 0361         while(getchar() != ',');
                 _0x56:
000196 d156      	RCALL _getchar
000197 32ec      	CPI  R30,LOW(0x2C)
000198 f7e9      	BRNE _0x56
                 ; 0000 0362 
                 ; 0000 0363 }      	// EndOf void getComma(void)
000199 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void 			ekstrak_gps(void)
                 ; 0000 0368 /***************************************************************************************
                 ; 0000 0369 *	ABSTRAKSI  	: 	Menunggu interupsi RX data serial dari USART, memparsing
                 ; 0000 036A *				data $GPGLL yang diterima menjadi data posisi, dan mengupdate
                 ; 0000 036B *				data variabel posisi.
                 ; 0000 036C *
                 ; 0000 036D *      	INPUT		:	RX data serial $GPGLL gps
                 ; 0000 036E *	OUTPUT		:       tak ada
                 ; 0000 036F *	RETURN		:       tak ada
                 ; 0000 0370 */
                 ; 0000 0371 {
                 _ekstrak_gps:
                 ; 0000 0372 	int i,j;
                 ; 0000 0373         static char buff_posisi[17], buff_altitude[9];
                 ; 0000 0374         unsigned int n_altitude[6];
                 ; 0000 0375 
                 ; 0000 0376         /************************************************************************************************
                 ; 0000 0377         	$GPGLL - GLL - Geographic Position Latitude / Longitude
                 ; 0000 0378 
                 ; 0000 0379                 Contoh : $GPGLL,3723.2475,N,12158.3416,W,161229.487,A*2C
                 ; 0000 037A 
                 ; 0000 037B         |-----------------------------------------------------------------------------------------------|
                 ; 0000 037C         |	Nama		| 	Contoh		|		Deskripsi			|
                 ; 0000 037D         |-----------------------|-----------------------|-----------------------------------------------|
                 ; 0000 037E         |	Message ID	|	$GPGLL		|	header protokol GLL			|
                 ; 0000 037F         |	Latitude	|	3723.2475	|	ddmm.mmmm 	, d=degree, m=minute	|
                 ; 0000 0380         |	N/S indicator	|	N		|	N=utara, S=selatan			|
                 ; 0000 0381         |	Longitude	|	12158.3416	|	dddmm.mmmm	, d=degree, m=minute	|
                 ; 0000 0382         |	W/E indicator	|	W		|	W=barat, E=timur			|
                 ; 0000 0383         |	Waktu UTC (GMT)	|	161229.487	|	HHMMSS.SS  ,H=hour, M=minute, S=second	|
                 ; 0000 0384         |	Status		|	A		|	A=data valid, V=data invalid		|
                 ; 0000 0385         |	Checksum	|	*2C		|						|
                 ; 0000 0386         |-----------------------------------------------------------------------------------------------|
                 ; 0000 0387 
                 ; 0000 0388         	Sumber : GPS SiRF EM-406A datasheet
                 ; 0000 0389 
                 ; 0000 038A         *************************************************************************************************/
                 ; 0000 038B 
                 ; 0000 038C         // jika data yang diterima bukan karakter $, terima terus
                 ; 0000 038D         	// jika data yang diterima adalah $, lanjutkan
                 ; 0000 038E         while(getchar() != '$');
00019a 972c      	SBIW R28,12
00019b d250      	RCALL __SAVELOCR4
                 ;	i -> R16,R17
                 ;	j -> R18,R19
                 ;	n_altitude -> Y+4
                 _0x59:
00019c d150      	RCALL _getchar
00019d 32e4      	CPI  R30,LOW(0x24)
00019e f7e9      	BRNE _0x59
                 ; 0000 038F 
                 ; 0000 0390         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter G)
                 ; 0000 0391 	getchar();
00019f d14d      	RCALL _getchar
                 ; 0000 0392 
                 ; 0000 0393         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter P)
                 ; 0000 0394         getchar();
0001a0 d14c      	RCALL _getchar
                 ; 0000 0395 
                 ; 0000 0396         // tunggu data, jika yang diterima adalah karakter G
                 ; 0000 0397         if(getchar() == 'G')
0001a1 d14b      	RCALL _getchar
0001a2 34e7      	CPI  R30,LOW(0x47)
0001a3 f009      	BREQ PC+2
0001a4 c117      	RJMP _0x5C
                 ; 0000 0398         {
                 ; 0000 0399         	// maka
                 ; 0000 039A         	// tunggu data, jika yang diterima adalah karakter G
                 ; 0000 039B                 if(getchar() == 'G')
0001a5 d147      	RCALL _getchar
0001a6 34e7      	CPI  R30,LOW(0x47)
0001a7 f009      	BREQ PC+2
0001a8 c113      	RJMP _0x5D
                 ; 0000 039C         	{
                 ; 0000 039D                 	// maka
                 ; 0000 039E                         // tunggu data, jika yang diterima adalah karakter A
                 ; 0000 039F                         if(getchar() == 'A')
0001a9 d143      	RCALL _getchar
0001aa 34e1      	CPI  R30,LOW(0x41)
0001ab f009      	BREQ PC+2
0001ac c10f      	RJMP _0x5E
                 ; 0000 03A0                 	{
                 ; 0000 03A1                         	// maka
                 ; 0000 03A2                                 // tunggu koma dan lanjutkan
                 ; 0000 03A3                                 getComma();
0001ad dfe8      	RCALL _getComma
                 ; 0000 03A4                                 getComma();
0001ae dfe7      	RCALL _getComma
                 ; 0000 03A5 
                 ; 0000 03A6                                 // ambil 7 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03A7                         	for(i=0; i<7; i++)	buff_posisi[i] = getchar();
0001af d175      	RCALL SUBOPT_0xB
                 _0x60:
                +
0001b0 3007     +CPI R16 , LOW ( 7 )
0001b1 e0e0     +LDI R30 , HIGH ( 7 )
0001b2 071e     +CPC R17 , R30
                 	__CPWRN 16,17,7
0001b3 f444      	BRGE _0x61
0001b4 2fe0      	MOV  R30,R16
0001b5 57eb      	SUBI R30,-LOW(_buff_posisi_S000000A000)
0001b6 93ef      	PUSH R30
0001b7 d135      	RCALL _getchar
0001b8 91af      	POP  R26
0001b9 93ec      	ST   X,R30
0001ba d16d      	RCALL SUBOPT_0xC
0001bb cff4      	RJMP _0x60
                 _0x61:
                 ; 0000 03AA getComma();
0001bc dfd9      	RCALL _getComma
                 ; 0000 03AB 
                 ; 0000 03AC                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03AD                                 buff_posisi[7] = getchar();
0001bd d12f      	RCALL _getchar
                +
0001be 93e0 008c+STS _buff_posisi_S000000A000 + ( 7 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,7
                 ; 0000 03AE 
                 ; 0000 03AF                                 // tunggu koma dan lanjutkan
                 ; 0000 03B0                                 getComma();
0001c0 dfd5      	RCALL _getComma
                 ; 0000 03B1 
                 ; 0000 03B2                                 // ambil 8 byte data berurut dan masukkan dalam buffer data
                 ; 0000 03B3                                 for(i=0; i<8; i++)	buff_posisi[i+8] = getchar();
0001c1 d163      	RCALL SUBOPT_0xB
                 _0x63:
0001c2 d168      	RCALL SUBOPT_0xD
0001c3 f444      	BRGE _0x64
0001c4 2fe0      	MOV  R30,R16
                +
0001c5 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001c6 93ef      	PUSH R30
0001c7 d125      	RCALL _getchar
0001c8 91af      	POP  R26
0001c9 93ec      	ST   X,R30
0001ca d15d      	RCALL SUBOPT_0xC
0001cb cff6      	RJMP _0x63
                 _0x64:
                 ; 0000 03B6 getComma();
0001cc dfc9      	RCALL _getComma
                 ; 0000 03B7 
                 ; 0000 03B8                                 // ambil 1 byte data dan masukkan dalam buffer data
                 ; 0000 03B9                                 buff_posisi[16] = getchar();
0001cd d11f      	RCALL _getchar
                +
0001ce 93e0 0095+STS _buff_posisi_S000000A000 + ( 16 ) , R30
                 	__PUTB1MN _buff_posisi_S000000A000,16
                 ; 0000 03BA 
                 ; 0000 03BB                                 // tunggu dan lewatkan 3 koma
                 ; 0000 03BC                                 getComma();
0001d0 dfc5      	RCALL _getComma
                 ; 0000 03BD                                 getComma();
0001d1 dfc4      	RCALL _getComma
                 ; 0000 03BE                                 getComma();
0001d2 dfc3      	RCALL _getComma
                 ; 0000 03BF                                 getComma();
0001d3 dfc2      	RCALL _getComma
                 ; 0000 03C0 
                 ; 0000 03C1                                 // ambil 8 byte data ketinggian dalam meter
                 ; 0000 03C2                                 for(i=0;i<8;i++)        buff_altitude[i] = getchar();
0001d4 d150      	RCALL SUBOPT_0xB
                 _0x66:
0001d5 d155      	RCALL SUBOPT_0xD
0001d6 f444      	BRGE _0x67
0001d7 2fe0      	MOV  R30,R16
0001d8 56ea      	SUBI R30,-LOW(_buff_altitude_S000000A000)
0001d9 93ef      	PUSH R30
0001da d112      	RCALL _getchar
0001db 91af      	POP  R26
0001dc 93ec      	ST   X,R30
0001dd d14a      	RCALL SUBOPT_0xC
0001de cff6      	RJMP _0x66
                 _0x67:
                 ; 0000 03C5 for(i=0;i<8;i++)	{posisi_lat[i]=buff_posisi[i];}
0001df d145      	RCALL SUBOPT_0xB
                 _0x69:
0001e0 d14a      	RCALL SUBOPT_0xD
0001e1 f45c      	BRGE _0x6A
0001e2 01f8      	MOVW R30,R16
0001e3 5eeb      	SUBI R30,LOW(-_posisi_lat)
0001e4 4fff      	SBCI R31,HIGH(-_posisi_lat)
0001e5 010f      	MOVW R0,R30
0001e6 e8a5      	LDI  R26,LOW(_buff_posisi_S000000A000)
0001e7 0fa0      	ADD  R26,R16
0001e8 91ec      	LD   R30,X
0001e9 01d0      	MOVW R26,R0
0001ea d1f1      	RCALL __EEPROMWRB
0001eb d13c      	RCALL SUBOPT_0xC
0001ec cff3      	RJMP _0x69
                 _0x6A:
                 ; 0000 03C6         			for(i=0;i<9;i++)	{posisi_long[i]=buff_posisi[i+8];}
0001ed d137      	RCALL SUBOPT_0xB
                 _0x6C:
                +
0001ee 3009     +CPI R16 , LOW ( 9 )
0001ef e0e0     +LDI R30 , HIGH ( 9 )
0001f0 071e     +CPC R17 , R30
                 	__CPWRN 16,17,9
0001f1 f44c      	BRGE _0x6D
0001f2 01d8      	MOVW R26,R16
0001f3 5ea3      	SUBI R26,LOW(-_posisi_long)
0001f4 4fbf      	SBCI R27,HIGH(-_posisi_long)
0001f5 2fe0      	MOV  R30,R16
                +
0001f6 57e3     +SUBI R30 , LOW ( - _buff_posisi_S000000A000 - ( 8 ) )
                 	__ADDB1MN _buff_posisi_S000000A000,8
0001f7 81e0      	LD   R30,Z
0001f8 d1e3      	RCALL __EEPROMWRB
0001f9 d12e      	RCALL SUBOPT_0xC
0001fa cff3      	RJMP _0x6C
                 _0x6D:
                 ; 0000 03C7 
                 ; 0000 03C8                                 // nol-kan variable ketinggian
                 ; 0000 03C9                                 for(i=0;i<6;i++)        n_altitude[i] = '0';
0001fb d129      	RCALL SUBOPT_0xB
                 _0x6F:
0001fc d132      	RCALL SUBOPT_0xE
0001fd f43c      	BRGE _0x70
0001fe d134      	RCALL SUBOPT_0xF
0001ff e3e0      	LDI  R30,LOW(48)
000200 e0f0      	LDI  R31,HIGH(48)
000201 93ed      	ST   X+,R30
000202 93fc      	ST   X,R31
000203 d124      	RCALL SUBOPT_0xC
000204 cff7      	RJMP _0x6F
                 _0x70:
                 ; 0000 03CC for(i=0;i<8;i++)
000205 d11f      	RCALL SUBOPT_0xB
                 _0x72:
000206 d124      	RCALL SUBOPT_0xD
000207 f58c      	BRGE _0x73
                 ; 0000 03CD                                 {
                 ; 0000 03CE                                         if(buff_altitude[i] == '.')     goto selesai;
000208 d130      	RCALL SUBOPT_0x10
000209 f179      	BREQ _0x75
                 ; 0000 03CF                                         if((buff_altitude[i] != '.')&&(buff_altitude[i] != ',')&&(buff_altitude[i] != 'M'))
00020a d12e      	RCALL SUBOPT_0x10
00020b f051      	BREQ _0x77
00020c e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
00020d 0fa0      	ADD  R26,R16
00020e 91ac      	LD   R26,X
00020f 32ac      	CPI  R26,LOW(0x2C)
000210 f029      	BREQ _0x77
000211 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
000212 0fa0      	ADD  R26,R16
000213 91ac      	LD   R26,X
000214 34ad      	CPI  R26,LOW(0x4D)
000215 f409      	BRNE _0x78
                 _0x77:
000216 c020      	RJMP _0x76
                 _0x78:
                 ; 0000 03D0                                         {
                 ; 0000 03D1                                                 // geser dari satuan ke puluhan dst.
                 ; 0000 03D2                                                 for(j=0;j<6;j++)        n_altitude[j] = n_altitude[j+1];
                +
000217 e020     +LDI R18 , LOW ( 0 )
000218 e030     +LDI R19 , HIGH ( 0 )
                 	__GETWRN 18,19,0
                 _0x7A:
                +
000219 3026     +CPI R18 , LOW ( 6 )
00021a e0e0     +LDI R30 , HIGH ( 6 )
00021b 073e     +CPC R19 , R30
                 	__CPWRN 18,19,6
00021c f49c      	BRGE _0x7B
00021d 2fe2      	MOV  R30,R18
00021e 2fac      	MOV  R26,R28
00021f 5fac      	SUBI R26,-(4)
000220 0fee      	LSL  R30
000221 0fea      	ADD  R30,R26
000222 2e0e      	MOV  R0,R30
000223 2fe2      	MOV  R30,R18
000224 5fef      	SUBI R30,-LOW(1)
000225 2fac      	MOV  R26,R28
000226 5fac      	SUBI R26,-(4)
000227 0fee      	LSL  R30
000228 0fae      	ADD  R26,R30
000229 d1a3      	RCALL __GETW1P
00022a 2da0      	MOV  R26,R0
00022b 93ed      	ST   X+,R30
00022c 93fc      	ST   X,R31
                +
00022d 5f2f     +SUBI R18 , LOW ( - 1 )
00022e 4f3f     +SBCI R19 , HIGH ( - 1 )
                 	__ADDWRN 18,19,1
00022f cfe9      	RJMP _0x7A
                 _0x7B:
                 ; 0000 03D5 n_altitude[5] = buff_altitude[i];
000230 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
000231 0fa0      	ADD  R26,R16
000232 91ec      	LD   R30,X
000233 e0f0      	LDI  R31,0
000234 fde7      	SBRC R30,7
000235 efff      	SER  R31
000236 d107      	RCALL SUBOPT_0x11
                 ; 0000 03D6                                         }
                 ; 0000 03D7                                 }
                 _0x76:
000237 d0f0      	RCALL SUBOPT_0xC
000238 cfcd      	RJMP _0x72
                 _0x73:
                 ; 0000 03D8 
                 ; 0000 03D9                                 selesai:
                 _0x75:
                 ; 0000 03DA 
                 ; 0000 03DB                                 // atoi
                 ; 0000 03DC                                 for(i=0;i<6;i++)        n_altitude[i] -= '0';
000239 d0eb      	RCALL SUBOPT_0xB
                 _0x7D:
00023a d0f4      	RCALL SUBOPT_0xE
00023b f444      	BRGE _0x7E
00023c d0f6      	RCALL SUBOPT_0xF
00023d 91ed      	LD   R30,X+
00023e 91fd      	LD   R31,X+
00023f 97f0      	SBIW R30,48
000240 93fe      	ST   -X,R31
000241 93ee      	ST   -X,R30
000242 d0e5      	RCALL SUBOPT_0xC
000243 cff6      	RJMP _0x7D
                 _0x7E:
                 ; 0000 03DF n_altitude[0] *= 100000;
000244 81ec      	LDD  R30,Y+4
000245 81fd      	LDD  R31,Y+4+1
000246 eaa0      	LDI  R26,LOW(34464)
000247 e8b6      	LDI  R27,HIGH(34464)
000248 d11b      	RCALL __MULW12U
000249 83ec      	STD  Y+4,R30
00024a 83fd      	STD  Y+4+1,R31
                 ; 0000 03E0                                 n_altitude[1] *=  10000;
00024b 81ee      	LDD  R30,Y+6
00024c 81ff      	LDD  R31,Y+6+1
00024d e1a0      	LDI  R26,LOW(10000)
00024e e2b7      	LDI  R27,HIGH(10000)
00024f d114      	RCALL __MULW12U
000250 83ee      	STD  Y+6,R30
000251 83ff      	STD  Y+6+1,R31
                 ; 0000 03E1                                 n_altitude[2] *=   1000;
000252 85e8      	LDD  R30,Y+8
000253 85f9      	LDD  R31,Y+8+1
000254 eea8      	LDI  R26,LOW(1000)
000255 e0b3      	LDI  R27,HIGH(1000)
000256 d10d      	RCALL __MULW12U
000257 87e8      	STD  Y+8,R30
000258 87f9      	STD  Y+8+1,R31
                 ; 0000 03E2                                 n_altitude[3] *=    100;
000259 85ea      	LDD  R30,Y+10
00025a 85fb      	LDD  R31,Y+10+1
00025b e6a4      	LDI  R26,LOW(100)
00025c e0b0      	LDI  R27,HIGH(100)
00025d d106      	RCALL __MULW12U
00025e 87ea      	STD  Y+10,R30
00025f 87fb      	STD  Y+10+1,R31
                 ; 0000 03E3                                 n_altitude[4] *=     10;
000260 85ec      	LDD  R30,Y+12
000261 85fd      	LDD  R31,Y+12+1
000262 e0aa      	LDI  R26,LOW(10)
000263 e0b0      	LDI  R27,HIGH(10)
000264 d0ff      	RCALL __MULW12U
000265 87ec      	STD  Y+12,R30
000266 87fd      	STD  Y+12+1,R31
                 ; 0000 03E4 
                 ; 0000 03E5                                 // jumlahkan satuan + puluhan + ratusan dst.
                 ; 0000 03E6                                 n_altitude[5] += (n_altitude[0] + n_altitude[1] + n_altitude[2] + n_altitude[3] + n_altitude[4]);
000267 81ee      	LDD  R30,Y+6
000268 81ff      	LDD  R31,Y+6+1
000269 81ac      	LDD  R26,Y+4
00026a 81bd      	LDD  R27,Y+4+1
00026b d0d5      	RCALL SUBOPT_0x12
00026c 85a8      	LDD  R26,Y+8
00026d 85b9      	LDD  R27,Y+8+1
00026e d0d2      	RCALL SUBOPT_0x12
00026f 85aa      	LDD  R26,Y+10
000270 85bb      	LDD  R27,Y+10+1
000271 d0cf      	RCALL SUBOPT_0x12
000272 85ac      	LDD  R26,Y+12
000273 85bd      	LDD  R27,Y+12+1
000274 d0cc      	RCALL SUBOPT_0x12
000275 d0ce      	RCALL SUBOPT_0x13
000276 d0ca      	RCALL SUBOPT_0x12
000277 d0c6      	RCALL SUBOPT_0x11
                 ; 0000 03E7 
                 ; 0000 03E8                                 // meter to feet
                 ; 0000 03E9                                 n_altitude[5] *= 3;
000278 85ee      	LDD  R30,Y+14
000279 85ff      	LDD  R31,Y+14+1
00027a e0a3      	LDI  R26,LOW(3)
00027b e0b0      	LDI  R27,HIGH(3)
00027c d0e7      	RCALL __MULW12U
00027d d0c9      	RCALL SUBOPT_0x14
                 ; 0000 03EA 
                 ; 0000 03EB                                 // num to 'string'
                 ; 0000 03EC                                 n_altitude[0] = n_altitude[5] / 100000;
00027e d0ca      	RCALL SUBOPT_0x15
00027f d115      	RCALL __DIVD21U
000280 83ec      	STD  Y+4,R30
000281 83fd      	STD  Y+4+1,R31
                 ; 0000 03ED                                 n_altitude[5] %= 100000;
000282 d0c1      	RCALL SUBOPT_0x13
000283 d0c5      	RCALL SUBOPT_0x15
000284 d144      	RCALL __MODD21U
000285 d0c1      	RCALL SUBOPT_0x14
                 ; 0000 03EE 
                 ; 0000 03EF                                 n_altitude[1] = n_altitude[5] / 10000;
000286 e1e0      	LDI  R30,LOW(10000)
000287 e2f7      	LDI  R31,HIGH(10000)
000288 d0f9      	RCALL __DIVW21U
000289 83ee      	STD  Y+6,R30
00028a 83ff      	STD  Y+6+1,R31
                 ; 0000 03F0                                 n_altitude[5] %= 10000;
00028b d0b8      	RCALL SUBOPT_0x13
00028c e1e0      	LDI  R30,LOW(10000)
00028d e2f7      	LDI  R31,HIGH(10000)
00028e d137      	RCALL __MODW21U
00028f d0b7      	RCALL SUBOPT_0x14
                 ; 0000 03F1 
                 ; 0000 03F2                                 n_altitude[2] = n_altitude[5] / 1000;
000290 eee8      	LDI  R30,LOW(1000)
000291 e0f3      	LDI  R31,HIGH(1000)
000292 d0ef      	RCALL __DIVW21U
000293 87e8      	STD  Y+8,R30
000294 87f9      	STD  Y+8+1,R31
                 ; 0000 03F3                                 n_altitude[5] %= 1000;
000295 d0ae      	RCALL SUBOPT_0x13
000296 eee8      	LDI  R30,LOW(1000)
000297 e0f3      	LDI  R31,HIGH(1000)
000298 d12d      	RCALL __MODW21U
000299 d0ad      	RCALL SUBOPT_0x14
                 ; 0000 03F4 
                 ; 0000 03F5                                 n_altitude[3] = n_altitude[5] / 100;
00029a e6e4      	LDI  R30,LOW(100)
00029b e0f0      	LDI  R31,HIGH(100)
00029c d0e5      	RCALL __DIVW21U
00029d 87ea      	STD  Y+10,R30
00029e 87fb      	STD  Y+10+1,R31
                 ; 0000 03F6                                 n_altitude[5] %= 100;
00029f d0a4      	RCALL SUBOPT_0x13
0002a0 e6e4      	LDI  R30,LOW(100)
0002a1 e0f0      	LDI  R31,HIGH(100)
0002a2 d123      	RCALL __MODW21U
0002a3 d0a3      	RCALL SUBOPT_0x14
                 ; 0000 03F7 
                 ; 0000 03F8                                 n_altitude[4] = n_altitude[5] / 10;
0002a4 e0ea      	LDI  R30,LOW(10)
0002a5 e0f0      	LDI  R31,HIGH(10)
0002a6 d0db      	RCALL __DIVW21U
0002a7 87ec      	STD  Y+12,R30
0002a8 87fd      	STD  Y+12+1,R31
                 ; 0000 03F9                                 n_altitude[5] %= 10;
0002a9 d09a      	RCALL SUBOPT_0x13
0002aa e0ea      	LDI  R30,LOW(10)
0002ab e0f0      	LDI  R31,HIGH(10)
0002ac d119      	RCALL __MODW21U
0002ad d090      	RCALL SUBOPT_0x11
                 ; 0000 03FA 
                 ; 0000 03FB                                 // itoa, pindahkan dari variable numerik ke eeprom
                 ; 0000 03FC                                 for(i=0;i<6;i++)        altitude[i] = (char)(n_altitude[i] + '0');
0002ae d076      	RCALL SUBOPT_0xB
                 _0x80:
0002af d07f      	RCALL SUBOPT_0xE
0002b0 f45c      	BRGE _0x81
0002b1 01f8      	MOVW R30,R16
0002b2 5dea      	SUBI R30,LOW(-_altitude)
0002b3 4fff      	SBCI R31,HIGH(-_altitude)
0002b4 010f      	MOVW R0,R30
0002b5 d07d      	RCALL SUBOPT_0xF
0002b6 91ec      	LD   R30,X
0002b7 5de0      	SUBI R30,-LOW(48)
0002b8 01d0      	MOVW R26,R0
0002b9 d122      	RCALL __EEPROMWRB
0002ba d06d      	RCALL SUBOPT_0xC
0002bb cff3      	RJMP _0x80
                 _0x81:
                 ; 0000 03FD }
                 ; 0000 03FE                 }
                 _0x5E:
                 ; 0000 03FF         }
                 _0x5D:
                 ; 0000 0400 
                 ; 0000 0401 } 	// EndOf void ekstrak_gps(void)
                 _0x5C:
0002bc d134      	RCALL __LOADLOCR4
0002bd 9660      	ADIW R28,16
0002be 9508      	RET
                 ;
                 ;
                 ;/***************************************************************************************/
                 ;	void main(void)
                 ; 0000 0406 /***************************************************************************************
                 ; 0000 0407 *
                 ; 0000 0408 *	MAIN PROGRAM
                 ; 0000 0409 *
                 ; 0000 040A */
                 ; 0000 040B {
                 _main:
                 ; 0000 040C 	// pengaturan clock CPU dan menjaga agar kompatibel dengan versi code vision terdahulu
                 ; 0000 040D #pragma optsize-
                 ; 0000 040E 	CLKPR=0x80;
0002bf e8e0      	LDI  R30,LOW(128)
0002c0 bde6      	OUT  0x26,R30
                 ; 0000 040F 	CLKPR=0x00;
0002c1 e0e0      	LDI  R30,LOW(0)
0002c2 bde6      	OUT  0x26,R30
                 ; 0000 0410 	#ifdef _OPTIMIZE_SIZE_
                 ; 0000 0411 #pragma optsize+
                 ; 0000 0412 	#endif
                 ; 0000 0413 
                 ; 0000 0414         // set bit register PORTB
                 ; 0000 0415         PORTB=0x00;
0002c3 bbe8      	OUT  0x18,R30
                 ; 0000 0416 
                 ; 0000 0417         // set bit Data Direction Register PORTB
                 ; 0000 0418 	DDRB=0xF8;
0002c4 efe8      	LDI  R30,LOW(248)
0002c5 bbe7      	OUT  0x17,R30
                 ; 0000 0419 
                 ; 0000 041A         // set bit register PORTD
                 ; 0000 041B         PORTD=0x09;
0002c6 e0e9      	LDI  R30,LOW(9)
0002c7 bbe2      	OUT  0x12,R30
                 ; 0000 041C 
                 ; 0000 041D         // set bit Data Direction Register PORTD
                 ; 0000 041E 	DDRD=0x30;
0002c8 e3e0      	LDI  R30,LOW(48)
0002c9 bbe1      	OUT  0x11,R30
                 ; 0000 041F 
                 ; 0000 0420         // set parameter 4800baud, 8, N, 1
                 ; 0000 0421         UCSRA=0x00;
0002ca e0e0      	LDI  R30,LOW(0)
0002cb b9eb      	OUT  0xB,R30
                 ; 0000 0422 	UCSRB=0x10;
0002cc e1e0      	LDI  R30,LOW(16)
0002cd b9ea      	OUT  0xA,R30
                 ; 0000 0423 	UCSRC=0x06;
0002ce e0e6      	LDI  R30,LOW(6)
0002cf b9e3      	OUT  0x3,R30
                 ; 0000 0424 	UBRRH=0x00;
0002d0 e0e0      	LDI  R30,LOW(0)
0002d1 b9e2      	OUT  0x2,R30
                 ; 0000 0425 	UBRRL=0x8F;
0002d2 e8ef      	LDI  R30,LOW(143)
0002d3 b9e9      	OUT  0x9,R30
                 ; 0000 0426 
                 ; 0000 0427         // set register Analog Comparator
                 ; 0000 0428         ACSR=0x80;
0002d4 e8e0      	LDI  R30,LOW(128)
0002d5 b9e8      	OUT  0x8,R30
                 ; 0000 0429 
                 ; 0000 042A         // set register EXT_IRQ_1 (External Interrupt 1 Request), Low Interrupt
                 ; 0000 042B 	GIMSK=0x80;
0002d6 bfeb      	OUT  0x3B,R30
                 ; 0000 042C 	MCUCR=0x08;
0002d7 e0e8      	LDI  R30,LOW(8)
0002d8 bfe5      	OUT  0x35,R30
                 ; 0000 042D 	EIFR=0x80;
0002d9 e8e0      	LDI  R30,LOW(128)
0002da bfea      	OUT  0x3A,R30
                 ; 0000 042E 
                 ; 0000 042F         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
                 ; 0000 0430 	TCCR1B=0x05;
0002db e0e5      	LDI  R30,LOW(5)
0002dc bdee      	OUT  0x2E,R30
                 ; 0000 0431 
                 ; 0000 0432         // set konstanta waktu 5 detik sebagai awalan
                 ; 0000 0433         //timer_detik(INITIAL_TIME_C);
                 ; 0000 0434         TCNT1H = 0xAB;
0002dd d029      	RCALL SUBOPT_0x3
                 ; 0000 0435         TCNT1L = 0xA0;
                 ; 0000 0436 
                 ; 0000 0437         // set interupsi timer untuk Timer 1
                 ; 0000 0438         TIMSK=0x80;
0002de e8e0      	LDI  R30,LOW(128)
0002df bfe9      	OUT  0x39,R30
                 ; 0000 0439 
                 ; 0000 043A         xcount = 0;
0002e0 2433      	CLR  R3
                 ; 0000 043B 
                 ; 0000 043C         // indikator awalan hardware aktif :
                 ; 0000 043D         // nyalakan LED busy
                 ; 0000 043E         L_BUSY = 1;
0002e1 9a95      	SBI  0x12,5
                 ; 0000 043F 
                 ; 0000 0440         // tunggu 500ms
                 ; 0000 0441         delay_ms(500);
0002e2 d021      	RCALL SUBOPT_0x2
0002e3 d02c      	RCALL SUBOPT_0x5
                 ; 0000 0442 
                 ; 0000 0443         // nyalakan LED standby
                 ; 0000 0444         L_STBY = 1;
0002e4 9a94      	SBI  0x12,4
                 ; 0000 0445 
                 ; 0000 0446         // tunggu 500ms
                 ; 0000 0447         delay_ms(500);
0002e5 d01e      	RCALL SUBOPT_0x2
0002e6 d029      	RCALL SUBOPT_0x5
                 ; 0000 0448 
                 ; 0000 0449         // matikan LED busy
                 ; 0000 044A         L_BUSY = 0;
0002e7 9895      	CBI  0x12,5
                 ; 0000 044B 
                 ; 0000 044C         // tunggu 500ms
                 ; 0000 044D         delay_ms(500);
0002e8 d01b      	RCALL SUBOPT_0x2
0002e9 d026      	RCALL SUBOPT_0x5
                 ; 0000 044E 
                 ; 0000 044F         // aktifkan interupsi global (berdasar setting register)
                 ; 0000 0450         #asm("sei")
0002ea 9478      	sei
                 ; 0000 0451 
                 ; 0000 0452         // tidak lakukan apapun selain menunggu interupsi timer1_ovf_isr
                 ; 0000 0453         while (1)
                 _0x88:
                 ; 0000 0454         {
                 ; 0000 0455         	// blok ini kosong
                 ; 0000 0456         };
0002eb cfff      	RJMP _0x88
                 ; 0000 0457 
                 ; 0000 0458 }	// END OF MAIN PROGRAM
                 _0x8B:
0002ec cfff      	RJMP _0x8B
                 ;/*
                 ;*
                 ;*	END OF FILE
                 ;*
                 ;****************************************************************************************/
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _getchar:
                 getchar0:
0002ed 9b5f           sbis usr,rxc
0002ee cffe           rjmp getchar0
0002ef b1ec           in   r30,udr
0002f0 9508      	RET
                 
                 	.CSEG
                 
                 	.CSEG
                 
                 	.ESEG
                 _data_1:
000000 82
000001 a0
000002 a4
000003 a6        	.DB  LOW(0xA6A4A082),HIGH(0xA6A4A082),BYTE3(0xA6A4A082),BYTE4(0xA6A4A082)
000004 40
000005 40
000006 60
000007 b2        	.DB  LOW(0xB2604040),HIGH(0xB2604040),BYTE3(0xB2604040),BYTE4(0xB2604040)
000008 86
000009 64
00000a b4
00000b b2        	.DB  LOW(0xB2B46486),HIGH(0xB2B46486),BYTE3(0xB2B46486),BYTE4(0xB2B46486)
00000c 8a
00000d 62
00000e ae
00000f 92        	.DB  LOW(0x92AE628A),HIGH(0x92AE628A),BYTE3(0x92AE628A),BYTE4(0x92AE628A)
000010 88
000011 8a
000012 64
000013 40        	.DB  LOW(0x40648A88),HIGH(0x40648A88),BYTE3(0x40648A88),BYTE4(0x40648A88)
000014 65        	.DB  0x65
                 _posisi_lat:
000015 30
000016 30
000017 30
000018 30        	.DB  LOW(0x30303030),HIGH(0x30303030),BYTE3(0x30303030),BYTE4(0x30303030)
000019 2e
00001a 30
00001b 30
00001c 30        	.DB  LOW(0x3030302E),HIGH(0x3030302E),BYTE3(0x3030302E),BYTE4(0x3030302E)
                 _posisi_long:
00001d 30
00001e 30
00001f 30
000020 30        	.DB  LOW(0x30303030),HIGH(0x30303030),BYTE3(0x30303030),BYTE4(0x30303030)
000021 30
000022 2e
000023 30
000024 30        	.DB  LOW(0x30302E30),HIGH(0x30302E30),BYTE3(0x30302E30),BYTE4(0x30302E30)
000025 45        	.DB  0x45
                 _altitude:
000026           	.BYTE 0x6
                 _komentar:
00002c 43
00002d 4f
00002e 52
00002f 45        	.DB  LOW(0x45524F43),HIGH(0x45524F43),BYTE3(0x45524F43),BYTE4(0x45524F43)
000030 20
000031 4f
000032 52
000033 44        	.DB  LOW(0x44524F20),HIGH(0x44524F20),BYTE3(0x44524F20),BYTE4(0x44524F20)
000034 41
000035 20
000036 44
000037 49        	.DB  LOW(0x49442041),HIGH(0x49442041),BYTE3(0x49442041),BYTE4(0x49442041)
000038 59
000039 20
00003a 41
00003b 6d        	.DB  LOW(0x6D412059),HIGH(0x6D412059),BYTE3(0x6D412059),BYTE4(0x6D412059)
00003c 62
00003d 75
00003e 6c
00003f 61        	.DB  LOW(0x616C7562),HIGH(0x616C7562),BYTE3(0x616C7562),BYTE4(0x616C7562)
000040 6e
000041 63
000042 65
000043 20        	.DB  LOW(0x2065636E),HIGH(0x2065636E),BYTE3(0x2065636E),BYTE4(0x2065636E)
000044 20
000045 20
000046 20
000047 20        	.DB  LOW(0x20202020),HIGH(0x20202020),BYTE3(0x20202020),BYTE4(0x20202020)
                 _status:
000048 41
000049 54
00004a 74
00004b 69        	.DB  LOW(0x69745441),HIGH(0x69745441),BYTE3(0x69745441),BYTE4(0x69745441)
00004c 6e
00004d 79
00004e 32
00004f 33        	.DB  LOW(0x3332796E),HIGH(0x3332796E),BYTE3(0x3332796E),BYTE4(0x3332796E)
000050 31
000051 33
000052 20
000053 41        	.DB  LOW(0x41203331),HIGH(0x41203331),BYTE3(0x41203331),BYTE4(0x41203331)
000054 50
000055 52
000056 53
000057 20        	.DB  LOW(0x20535250),HIGH(0x20535250),BYTE3(0x20535250),BYTE4(0x20535250)
000058 74
000059 72
00005a 61
00005b 63        	.DB  LOW(0x63617274),HIGH(0x63617274),BYTE3(0x63617274),BYTE4(0x63617274)
00005c 6b
00005d 65
00005e 72
00005f 20        	.DB  LOW(0x2072656B),HIGH(0x2072656B),BYTE3(0x2072656B),BYTE4(0x2072656B)
000060 68
000061 61
000062 6e
000063 64        	.DB  LOW(0x646E6168),HIGH(0x646E6168),BYTE3(0x646E6168),BYTE4(0x646E6168)
000064 69
000065 6b
000066 6f
000067 67        	.DB  LOW(0x676F6B69),HIGH(0x676F6B69),BYTE3(0x676F6B69),BYTE4(0x676F6B69)
000068 65
000069 73
00006a 61
00006b 6e        	.DB  LOW(0x6E617365),HIGH(0x6E617365),BYTE3(0x6E617365),BYTE4(0x6E617365)
00006c 67
00006d 40
00006e 67
00006f 6d        	.DB  LOW(0x6D674067),HIGH(0x6D674067),BYTE3(0x6D674067),BYTE4(0x6D674067)
000070 61
000071 69
000072 6c
000073 2e        	.DB  LOW(0x2E6C6961),HIGH(0x2E6C6961),BYTE3(0x2E6C6961),BYTE4(0x2E6C6961)
000074 63 6f     	.DW  0x6F63
000076 6d        	.DB  0x6D
                 _beacon_stat:
000077 00        	.DB  0x0
                 
                 	.DSEG
                 _bit_stuff_G000:
000080           	.BYTE 0x1
                 _crc_lo_S0000003000:
000081           	.BYTE 0x1
                 _crc_hi_S0000003000:
000082           	.BYTE 0x1
                 _xor_in_S0000005000:
000083           	.BYTE 0x2
                 _buff_posisi_S000000A000:
000085           	.BYTE 0x11
                 _buff_altitude_S000000A000:
000096           	.BYTE 0x9
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:11 WORDS
                 SUBOPT_0x0:
0002f1 920a      	ST   -Y,R0
0002f2 921a      	ST   -Y,R1
0002f3 92fa      	ST   -Y,R15
0002f4 936a      	ST   -Y,R22
0002f5 937a      	ST   -Y,R23
0002f6 938a      	ST   -Y,R24
0002f7 939a      	ST   -Y,R25
0002f8 93aa      	ST   -Y,R26
0002f9 93ba      	ST   -Y,R27
0002fa 93ea      	ST   -Y,R30
0002fb 93fa      	ST   -Y,R31
0002fc b7ef      	IN   R30,SREG
0002fd 93ea      	ST   -Y,R30
0002fe 9894      	CBI  0x12,4
0002ff 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x1:
000300 93fa      	ST   -Y,R31
000301 93ea      	ST   -Y,R30
000302 d04d      	RCALL _delay_ms
000303 cd7e      	RJMP _kirim_paket
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
000304 efe4      	LDI  R30,LOW(500)
000305 e0f1      	LDI  R31,HIGH(500)
000306 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x3:
000307 eaeb      	LDI  R30,LOW(171)
000308 bded      	OUT  0x2D,R30
000309 eae0      	LDI  R30,LOW(160)
00030a bdec      	OUT  0x2C,R30
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x4:
00030c e7a7      	LDI  R26,LOW(_beacon_stat)
00030d e0b0      	LDI  R27,HIGH(_beacon_stat)
00030e d0c2      	RCALL __EEPROMRDB
00030f 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x5:
000310 93fa      	ST   -Y,R31
000311 93ea      	ST   -Y,R30
000312 c03d      	RJMP _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 19 TIMES, CODE SIZE REDUCTION:16 WORDS
                 SUBOPT_0x6:
000313 93ea      	ST   -Y,R30
000314 cdf3      	RJMP _kirim_karakter
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x7:
000315 e0e0      	LDI  R30,LOW(0)
000316 93e0 0080 	STS  _bit_stuff_G000,R30
000318 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x8:
000319 2fa1      	MOV  R26,R17
00031a e0b0      	LDI  R27,0
00031b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 6 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x9:
00031c d0b4      	RCALL __EEPROMRDB
00031d cff5      	RJMP SUBOPT_0x6
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:14 WORDS
                 SUBOPT_0xA:
00031e 2fe1      	MOV  R30,R17
00031f e0f0      	LDI  R31,0
000320 5dea      	SUBI R30,LOW(-_matrix*2)
000321 4fff      	SBCI R31,HIGH(-_matrix*2)
000322 91e4      	LPM  R30,Z
000323 93ea      	ST   -Y,R30
000324 ce2e      	RJMP _set_dac
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xB:
                +
000325 e000     +LDI R16 , LOW ( 0 )
000326 e010     +LDI R17 , HIGH ( 0 )
                 	__GETWRN 16,17,0
000327 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xC:
                +
000328 5f0f     +SUBI R16 , LOW ( - 1 )
000329 4f1f     +SBCI R17 , HIGH ( - 1 )
                 	__ADDWRN 16,17,1
00032a 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0xD:
                +
00032b 3008     +CPI R16 , LOW ( 8 )
00032c e0e0     +LDI R30 , HIGH ( 8 )
00032d 071e     +CPC R17 , R30
                 	__CPWRN 16,17,8
00032e 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0xE:
                +
00032f 3006     +CPI R16 , LOW ( 6 )
000330 e0e0     +LDI R30 , HIGH ( 6 )
000331 071e     +CPC R17 , R30
                 	__CPWRN 16,17,6
000332 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0xF:
000333 2fe0      	MOV  R30,R16
000334 2fac      	MOV  R26,R28
000335 5fac      	SUBI R26,-(4)
000336 0fee      	LSL  R30
000337 0fae      	ADD  R26,R30
000338 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x10:
000339 e9a6      	LDI  R26,LOW(_buff_altitude_S000000A000)
00033a 0fa0      	ADD  R26,R16
00033b 91ac      	LD   R26,X
00033c 32ae      	CPI  R26,LOW(0x2E)
00033d 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 8 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x11:
00033e 87ee      	STD  Y+14,R30
00033f 87ff      	STD  Y+14+1,R31
000340 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x12:
000341 0fea      	ADD  R30,R26
000342 1ffb      	ADC  R31,R27
000343 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 11 TIMES, CODE SIZE REDUCTION:8 WORDS
                 SUBOPT_0x13:
000344 85ae      	LDD  R26,Y+14
000345 85bf      	LDD  R27,Y+14+1
000346 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x14:
000347 dff6      	RCALL SUBOPT_0x11
000348 cffb      	RJMP SUBOPT_0x13
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x15:
000349 2788      	CLR  R24
00034a 2799      	CLR  R25
                +
00034b eae0     +LDI R30 , LOW ( 0x186A0 )
00034c e8f6     +LDI R31 , HIGH ( 0x186A0 )
00034d e061     +LDI R22 , BYTE3 ( 0x186A0 )
00034e e070     +LDI R23 , BYTE4 ( 0x186A0 )
                 	__GETD1N 0x186A0
00034f 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000350 91e9      	ld   r30,y+
000351 91f9      	ld   r31,y+
000352 9630      	adiw r30,0
000353 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000354 ec8d     +LDI R24 , LOW ( 0xACD )
000355 e09a     +LDI R25 , HIGH ( 0xACD )
                +__DELAY_USW_LOOP :
000356 9701     +SBIW R24 , 1
000357 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xACD
000358 95a8      	wdr
000359 9731      	sbiw r30,1
00035a f7c9      	brne __delay_ms0
                 __delay_ms1:
00035b 9508      	ret
                 
                 __LSRB12:
00035c 23ee      	TST  R30
00035d 2e0e      	MOV  R0,R30
00035e 2fea      	MOV  R30,R26
00035f f019      	BREQ __LSRB12R
                 __LSRB12L:
000360 95e6      	LSR  R30
000361 940a      	DEC  R0
000362 f7e9      	BRNE __LSRB12L
                 __LSRB12R:
000363 9508      	RET
                 
                 __MULW12U:
000364 2e0a      	MOV  R0,R26
000365 2e1b      	MOV  R1,R27
000366 e181      	LDI  R24,17
000367 27aa      	CLR  R26
000368 1bbb      	SUB  R27,R27
000369 c005      	RJMP __MULW12U1
                 __MULW12U3:
00036a f410      	BRCC __MULW12U2
00036b 0da0      	ADD  R26,R0
00036c 1db1      	ADC  R27,R1
                 __MULW12U2:
00036d 95b6      	LSR  R27
00036e 95a7      	ROR  R26
                 __MULW12U1:
00036f 95f7      	ROR  R31
000370 95e7      	ROR  R30
000371 958a      	DEC  R24
000372 f7b9      	BRNE __MULW12U3
000373 9508      	RET
                 
                 __DIVB21U:
000374 2400      	CLR  R0
000375 e098      	LDI  R25,8
                 __DIVB21U1:
000376 0faa      	LSL  R26
000377 1c00      	ROL  R0
000378 1a0e      	SUB  R0,R30
000379 f410      	BRCC __DIVB21U2
00037a 0e0e      	ADD  R0,R30
00037b c001      	RJMP __DIVB21U3
                 __DIVB21U2:
00037c 60a1      	SBR  R26,1
                 __DIVB21U3:
00037d 959a      	DEC  R25
00037e f7b9      	BRNE __DIVB21U1
00037f 2fea      	MOV  R30,R26
000380 2da0      	MOV  R26,R0
000381 9508      	RET
                 
                 __DIVW21U:
000382 2400      	CLR  R0
000383 2411      	CLR  R1
000384 e190      	LDI  R25,16
                 __DIVW21U1:
000385 0faa      	LSL  R26
000386 1fbb      	ROL  R27
000387 1c00      	ROL  R0
000388 1c11      	ROL  R1
000389 1a0e      	SUB  R0,R30
00038a 0a1f      	SBC  R1,R31
00038b f418      	BRCC __DIVW21U2
00038c 0e0e      	ADD  R0,R30
00038d 1e1f      	ADC  R1,R31
00038e c001      	RJMP __DIVW21U3
                 __DIVW21U2:
00038f 60a1      	SBR  R26,1
                 __DIVW21U3:
000390 959a      	DEC  R25
000391 f799      	BRNE __DIVW21U1
000392 01fd      	MOVW R30,R26
000393 01d0      	MOVW R26,R0
000394 9508      	RET
                 
                 __DIVD21U:
000395 933f      	PUSH R19
000396 934f      	PUSH R20
000397 935f      	PUSH R21
000398 2400      	CLR  R0
000399 2411      	CLR  R1
00039a 2744      	CLR  R20
00039b 2755      	CLR  R21
00039c e230      	LDI  R19,32
                 __DIVD21U1:
00039d 0faa      	LSL  R26
00039e 1fbb      	ROL  R27
00039f 1f88      	ROL  R24
0003a0 1f99      	ROL  R25
0003a1 1c00      	ROL  R0
0003a2 1c11      	ROL  R1
0003a3 1f44      	ROL  R20
0003a4 1f55      	ROL  R21
0003a5 1a0e      	SUB  R0,R30
0003a6 0a1f      	SBC  R1,R31
0003a7 0b46      	SBC  R20,R22
0003a8 0b57      	SBC  R21,R23
0003a9 f428      	BRCC __DIVD21U2
0003aa 0e0e      	ADD  R0,R30
0003ab 1e1f      	ADC  R1,R31
0003ac 1f46      	ADC  R20,R22
0003ad 1f57      	ADC  R21,R23
0003ae c001      	RJMP __DIVD21U3
                 __DIVD21U2:
0003af 60a1      	SBR  R26,1
                 __DIVD21U3:
0003b0 953a      	DEC  R19
0003b1 f759      	BRNE __DIVD21U1
0003b2 01fd      	MOVW R30,R26
0003b3 01bc      	MOVW R22,R24
0003b4 01d0      	MOVW R26,R0
0003b5 01ca      	MOVW R24,R20
0003b6 915f      	POP  R21
0003b7 914f      	POP  R20
0003b8 913f      	POP  R19
0003b9 9508      	RET
                 
                 __MODB21:
0003ba 94e8      	CLT
0003bb ffa7      	SBRS R26,7
0003bc c002      	RJMP __MODB211
0003bd 95a1      	NEG  R26
0003be 9468      	SET
                 __MODB211:
0003bf fde7      	SBRC R30,7
0003c0 95e1      	NEG  R30
0003c1 dfb2      	RCALL __DIVB21U
0003c2 2fea      	MOV  R30,R26
0003c3 f40e      	BRTC __MODB212
0003c4 95e1      	NEG  R30
                 __MODB212:
0003c5 9508      	RET
                 
                 __MODW21U:
0003c6 dfbb      	RCALL __DIVW21U
0003c7 01fd      	MOVW R30,R26
0003c8 9508      	RET
                 
                 __MODD21U:
0003c9 dfcb      	RCALL __DIVD21U
0003ca 01fd      	MOVW R30,R26
0003cb 01bc      	MOVW R22,R24
0003cc 9508      	RET
                 
                 __GETW1P:
0003cd 91ed      	LD   R30,X+
0003ce 91fc      	LD   R31,X
0003cf 95aa      	DEC  R26
0003d0 9508      	RET
                 
                 __EEPROMRDB:
0003d1 99e1      	SBIC EECR,EEWE
0003d2 cffe      	RJMP __EEPROMRDB
0003d3 93ff      	PUSH R31
0003d4 b7ff      	IN   R31,SREG
0003d5 94f8      	CLI
0003d6 bbae      	OUT  EEARL,R26
0003d7 9ae0      	SBI  EECR,EERE
0003d8 b3ed      	IN   R30,EEDR
0003d9 bfff      	OUT  SREG,R31
0003da 91ff      	POP  R31
0003db 9508      	RET
                 
                 __EEPROMWRB:
0003dc 9be1      	SBIS EECR,EEWE
0003dd c002      	RJMP __EEPROMWRB1
0003de 95a8      	WDR
0003df cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
0003e0 b79f      	IN   R25,SREG
0003e1 94f8      	CLI
0003e2 bbae      	OUT  EEARL,R26
0003e3 9ae0      	SBI  EECR,EERE
0003e4 b38d      	IN   R24,EEDR
0003e5 17e8      	CP   R30,R24
0003e6 f019      	BREQ __EEPROMWRB0
0003e7 bbed      	OUT  EEDR,R30
0003e8 9ae2      	SBI  EECR,EEMWE
0003e9 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
0003ea bf9f      	OUT  SREG,R25
0003eb 9508      	RET
                 
                 __SAVELOCR4:
0003ec 933a      	ST   -Y,R19
                 __SAVELOCR3:
0003ed 932a      	ST   -Y,R18
                 __SAVELOCR2:
0003ee 931a      	ST   -Y,R17
0003ef 930a      	ST   -Y,R16
0003f0 9508      	RET
                 
                 __LOADLOCR4:
0003f1 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
0003f2 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
0003f3 8119      	LDD  R17,Y+1
0003f4 8108      	LD   R16,Y
0003f5 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATtiny2313 register use summary:
r0 :  31 r1 :  13 r2 :   0 r3 :   5 r4 :   5 r5 :   4 r6 :   0 r7 :   0 
r8 :   0 r9 :   0 r10:   0 r11:   0 r12:   0 r13:   0 r14:   0 r15:   7 
r16:  21 r17:  53 r18:   7 r19:   9 r20:   7 r21:   6 r22:   9 r23:   5 
r24:  26 r25:  12 r26:  95 r27:  32 r28:   9 r29:   0 r30: 255 r31:  69 
x  :  22 y  : 102 z  :   9 
Registers used: 24 out of 35 (68.6%)

ATtiny2313 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :  13 
adiw  :   5 and   :   0 andi  :   6 asr   :   6 bclr  :   0 bld   :   1 
brbc  :   0 brbs  :   0 brcc  :   4 brcs  :   0 break :   0 breq  :  11 
brge  :  22 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   0 
brlt  :   0 brmi  :   0 brne  :  27 brpl  :   0 brsh  :   0 brtc  :   1 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   1 cbi   :  10 
cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 clr   :  13 
cls   :   0 clt   :   1 clv   :   0 clz   :   0 com   :   0 cp    :   1 
cpc   :   5 cpi   :  32 cpse  :   0 dec   :  11 des   :   0 eor   :   6 
fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 in    :   7 
inc   :   1 ld    :  32 ldd   :  31 ldi   : 139 lds   :   5 lpm   :   9 
lsl   :   6 lsr   :   3 mov   :  25 movw  :  20 mul   :   0 muls  :   0 
mulsu :   0 neg   :   3 nop   :   0 or    :   0 ori   :   0 out   :  34 
pop   :   8 push  :   8 rcall : 162 ret   :  39 reti  :   1 rjmp  :  76 
rol   :  11 ror   :   4 sbc   :   4 sbci  :  12 sbi   :  16 sbic  :   4 
sbis  :   2 sbiw  :   6 sbr   :   3 sbrc  :   4 sbrs  :   2 sec   :   0 
seh   :   0 sei   :   1 sen   :   0 ser   :   2 ses   :   0 set   :   1 
sev   :   0 sez   :   0 sleep :   0 spm   :   0 st    :  40 std   :  22 
sts   :   8 sub   :   4 subi  :  36 swap  :   0 tst   :   1 wdr   :   2 

Instructions used: 62 out of 114 (54.4%)

ATtiny2313 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0007ec   1984     44   2028    2048  99.0%
[.dseg] 0x000060 0x00009f      0     31     31     223  13.9%
[.eseg] 0x000000 0x000078      0    120    120     128  93.8%

Assembly complete, 0 errors, 3 warnings
