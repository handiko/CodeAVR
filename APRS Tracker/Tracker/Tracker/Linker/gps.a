;/*****************************************************
;This program was produced by the
;CodeWizardAVR V2.05.0 Professional
;Automatic Program Generator
;© Copyright 1998-2010 Pavel Haiduc, HP InfoTech s.r.l.
;http://www.hpinfotech.com
;
;Project :
;Version :
;Date    : 9/29/2012
;Author  :
;Company :
;Comments:
;
;
;Chip type               : ATtiny2313
;AVR Core Clock frequency: 11.059200 MHz
;Memory model            : Tiny
;External RAM size       : 0
;Data Stack size         : 32
;*****************************************************/
;
;#include <tiny2313.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x20
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x50
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x10
;PCODE: $00000005 VOL: 0
	.EQU __sm_standby=0x40
;PCODE: $00000006 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $00000007 VOL: 0
	#endif
;PCODE: $00000008 VOL: 0
;PCODE: $00000009 VOL: 0
;#include <stdio.h>
;
;#define _1200		0
;#define _2200		1
;
;#ifdef	_OPTIMIZE_SIZE_
;	#define CONST_1200      46
;	#define CONST_2200      22
;#else
;	#define CONST_1200      50
;	#define CONST_2200      25
;#endif
;
;#define GAP_TIME_	18
;#define INITIAL_TIME_C	5
;#define FWD_TIME_C	2
;#define TX_DELAY_	40
;#define FLAG_		0x7E
;#define	CONTROL_FIELD_	0x03
;#define PROTOCOL_ID_	0xF0
;#define TD_POSISI_	'!'
;#define TD_STATUS_	'>'
;#define SYM_TAB_OVL_	'/'
;#define SYM_CODE_	'l'
;#define TX_TAIL_	2
;
;#include <delay.h>
;#include <stdarg.h>
;
;#define TX_NOW  PIND.3
;#define PTT     PORTB.3
;#define DAC_0   PORTB.7
;#define DAC_1   PORTB.6
;#define DAC_2   PORTB.5
;#define DAC_3   PORTB.4
;#define L_BUSY	PORTD.5
;#define L_STBY  PORTD.4
;
;void set_dac(char value);
;void set_nada(char i_nada);
;void kirim_karakter(unsigned char input);
;void kirim_paket(void);
;void ubah_nada(void);
;void hitung_crc(char in_crc);
;void kirim_crc(void);
;void ekstrak_gps(void);
;void init_usart(void);
;void clear_usart(void);
;void timer_detik(char detik);
;
;flash char matrix[16] = {7,10,13,14,15,14,13,10,7,5,2,1,0,1,2,5};
;eeprom char data_1[28] =
;{
;	('A'<<1),('P'<<1),('Z'<<1),('T'<<1),('2'<<1),('3'<<1),0b11100000,
;    ('Y'<<1),('D'<<1),('2'<<1),('X'<<1),('A'<<1),('C'<<1),('9'<<1),
;    ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('1'<<1),(' '<<1),('1'<<1),
;    ('W'<<1),('I'<<1),('D'<<1),('E'<<1),('2'<<1),(' '<<1),('2'<<1)+1
;};
;eeprom char posisi_lat[8] =
;{
;	'0','7','4','5','.','3','1','S'
;};
;eeprom char posisi_long[9] =
;{
;	'1','1','0','2','2','.','5','2','E'
;};
;eeprom char data_extension[7] =
;{
;	'P','H','G','2','0','0','0'
;};
;eeprom char komentar[14] =
;{
;	'L','a','b','.','S','S','T','K',' ','T','i','m','-','1'
;
;};
;eeprom char status[47] =
;{
;	'A','T','t','i','n','y','2','3','1','3',' ',
;    'A','P','R','S',' ','t','r','a','c','k','e','r',' ',
;    'h','a','n','d','i','k','o','g','e','s','a','n','g','@','g','m','a','i','l','.','c','o','m'
;};
;eeprom char beacon_stat = 0;
;eeprom char xcount = 0;
;bit nada = _1200;
;static char bit_stuff = 0;
;unsigned short crc;
;
;interrupt [EXT_INT1] void ext_int1_isr(void)
; 0000 0070 {

	.CSEG
;PCODE: $0000000A VOL: 0
;PCODE: $0000000B VOL: 0
; 0000 0071     L_STBY = 0;
;PCODE: $0000000C VOL: 0
;PCODE: $0000000D VOL: 0
; 0000 0072     delay_ms(250);
;PCODE: $0000000E VOL: 0
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
; 0000 0073     kirim_paket();
;PCODE: $00000011 VOL: 0
; 0000 0074     L_STBY = 1;
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
; 0000 0075 }
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;
;// Timer1 overflow interrupt service routine
;interrupt [TIM1_OVF] void timer1_ovf_isr(void)
; 0000 0079 {
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 007A // Place your code here
; 0000 007B     L_STBY = 0;
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
; 0000 007C     xcount++;
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
; 0000 007D     if(xcount == 1)
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
; 0000 007E     {
; 0000 007F         kirim_paket();
;PCODE: $00000024 VOL: 0
; 0000 0080     }
; 0000 0081 
; 0000 0082     else if((xcount%2) == 0)
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0083     {
; 0000 0084         L_BUSY = 1;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0085         ekstrak_gps();
;PCODE: $00000031 VOL: 0
; 0000 0086         L_BUSY = 0;
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
; 0000 0087     }
; 0000 0088 
; 0000 0089     else if(xcount == GAP_TIME_)
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
; 0000 008A     {
; 0000 008B         xcount = 0;
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
; 0000 008C     }
; 0000 008D 
; 0000 008E     L_STBY = 1;
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
; 0000 008F 
; 0000 0090     timer_detik(FWD_TIME_C);
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
; 0000 0091 }
;PCODE: $00000045 VOL: 0
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
;
;/***************************************************************************************/
;    void             kirim_paket(void)
; 0000 0095 /***************************************************************************************
; 0000 0096 *    ABSTRAKSI      :     pengendali urutan pengiriman data APRS
; 0000 0097 *                penyusun protokol APRS
; 0000 0098 *
; 0000 0099 *          INPUT        :    tak ada
; 0000 009A *    OUTPUT        :       kondisi LED dan output transistor switch TX
; 0000 009B *    RETURN        :       tak ada
; 0000 009C */
; 0000 009D {
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
; 0000 009E     char i;
; 0000 009F 
; 0000 00A0         // inisialisasi nilai CRC dengan 0xFFFF
; 0000 00A1     crc = 0xFFFF;
;PCODE: $0000004A VOL: 0
;	i -> R17
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 00A2 
; 0000 00A3         // tambahkan 1 nilai counter pancar
; 0000 00A4         beacon_stat++;
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 00A5 
; 0000 00A6         // nyalakan LED TX dan PTT switch
; 0000 00A7     PTT = 1;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 00A8 
; 0000 00A9         // tunggu 500ms
; 0000 00AA         delay_ms(500);
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 00AB 
; 0000 00AC         /**********************************************************************************
; 0000 00AD 
; 0000 00AE                     APRS AX.25 PROTOCOL
; 0000 00AF 
; 0000 00B0         |------------------------------------------------------------------------
; 0000 00B1         |   opn. FLAG    |    DESTINATION    |    SOURCE    |    DIGI'S    | CONTROL...
; 0000 00B2         |---------------|-----------------------|---------------|---------------|
; 0000 00B3         |   0x7E 1Bytes |    7 Bytes        |       7 Bytes |  0 - 56 Bytes    |
; 0000 00B4         |------------------------------------------------------------------------
; 0000 00B5 
; 0000 00B6             -----------------------------------------------------------------
; 0000 00B7         DIGI'S..|    CONTROL FIELD    |    PROTOCOL ID    |    INFO    | FCS...
; 0000 00B8                 |-----------------------|-----------------------|---------------|
; 0000 00B9                 |    0x03 1 Bytes    |     0xF0 1 Bytes    |  0 - 256 Bytes|
; 0000 00BA                 -----------------------------------------------------------------
; 0000 00BB 
; 0000 00BC             --------------------------------|
; 0000 00BD         INFO... |    FCS    |   cls. FLAG    |
; 0000 00BE                 |---------------|---------------|
; 0000 00BF                 |    2 Bytes    |   0x7E 1Bytes |
; 0000 00C0                 --------------------------------|
; 0000 00C1 
; 0000 00C2         Sumber : APRS101, Tucson Amateur Packet Radio Club. www.tapr.org
; 0000 00C3         ************************************************************************************/
; 0000 00C4 
; 0000 00C5         // kirim karakter opening flag
; 0000 00C6         for(i=0;i<TX_DELAY_;i++)
;PCODE: $00000057 VOL: 0
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 00C7             kirim_karakter(FLAG_);
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
; 0000 00CA bit_stuff = 0;
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 00CB 
; 0000 00CC         // kirimkan field : destination, source, PATH 1, PATH 2, control, Protocol ID, dan
; 0000 00CD             // data type ID
; 0000 00CE         for(i=0;i<28;i++)
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
; 0000 00CF             kirim_karakter(data_1[i]);
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
;PCODE: $00000079 VOL: 0
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
; 0000 00D2 kirim_karakter(0x03);
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
; 0000 00D3 
; 0000 00D4         // krimkan protocol ID
; 0000 00D5         kirim_karakter(PROTOCOL_ID_);
;PCODE: $00000081 VOL: 0
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
; 0000 00D6 
; 0000 00D7         // jika sudah 20 kali memancar,
; 0000 00D8         if(beacon_stat == 20)
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
; 0000 00D9         {
; 0000 00DA             // jika ya
; 0000 00DB                 // kirim tipe data status
; 0000 00DC                 kirim_karakter(TD_STATUS_);
;PCODE: $00000088 VOL: 0
;PCODE: $00000089 VOL: 0
;PCODE: $0000008A VOL: 0
; 0000 00DD 
; 0000 00DE                 // kirim teks status
; 0000 00DF                 for(i=0;i<47;i++)
;PCODE: $0000008B VOL: 0
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
;PCODE: $0000008F VOL: 0
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 00E0                     kirim_karakter(status[i]);
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
;PCODE: $0000009E VOL: 0
; 0000 00E3 beacon_stat = 0;
;PCODE: $0000009F VOL: 0
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00E4 
; 0000 00E5                 // lompat ke kirim crc
; 0000 00E6                 goto lompat;
;PCODE: $000000A2 VOL: 0
; 0000 00E7         }
; 0000 00E8 
; 0000 00E9         // krimkan tipe data posisi
; 0000 00EA         kirim_karakter(TD_POSISI_);
;PCODE: $000000A3 VOL: 0
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
;PCODE: $000000A6 VOL: 0
; 0000 00EB 
; 0000 00EC         // kirimkan posisi lintang
; 0000 00ED         for(i=0;i<8;i++)
;PCODE: $000000A7 VOL: 0
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00EE             kirim_karakter(posisi_lat[i]);
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
;PCODE: $000000BA VOL: 0
; 0000 00F1 kirim_karakter('/');
;PCODE: $000000BB VOL: 0
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00F2 
; 0000 00F3         // kirimkan posisi bujur
; 0000 00F4     for(i=0;i<9;i++)
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
;PCODE: $000000C6 VOL: 0
; 0000 00F5             kirim_karakter(posisi_long[i]);
;PCODE: $000000C7 VOL: 0
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00F8 kirim_karakter('l');
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
;PCODE: $000000D4 VOL: 0
; 0000 00F9 
; 0000 00FA         // hanya kirim PHGD code dan komentar pada pancaran ke-5
; 0000 00FB         if(beacon_stat == 5)
;PCODE: $000000D5 VOL: 0
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
;PCODE: $000000D8 VOL: 0
; 0000 00FC         {
; 0000 00FD             // kirimkan field informasi : data ekstensi tipe PHGD
; 0000 00FE             for(i=0;i<7;i++)
;PCODE: $000000D9 VOL: 0
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
;PCODE: $000000DC VOL: 0
;PCODE: $000000DD VOL: 0
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00FF                 kirim_karakter(data_extension[i]);
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
; 0000 0102 for(i=0;i<14;i++)
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;PCODE: $000000F5 VOL: 0
; 0000 0103                 kirim_karakter(komentar[i]);
;PCODE: $000000F6 VOL: 0
;PCODE: $000000F7 VOL: 0
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0104 }
; 0000 0105 
; 0000 0106 
; 0000 0107         // label lompatan
; 0000 0108         lompat:
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
; 0000 0109 
; 0000 010A         // kirimkan field : FCS (CRC-16 CCITT)
; 0000 010B         kirim_crc();
;PCODE: $00000103 VOL: 0
; 0000 010C 
; 0000 010D         // kirimkan karakter closing flag
; 0000 010E         for(i=0;i<TX_TAIL_;i++)
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
; 0000 010F             kirim_karakter(FLAG_);
;PCODE: $0000010D VOL: 0
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
;PCODE: $00000110 VOL: 0
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
; 0000 0112 PORTB.3 = 0;
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
; 0000 0113 
; 0000 0114 
; 0000 0115 }       // EndOf void kirim_paket(void)
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
;
;
;/***************************************************************************************/
;    void             kirim_crc(void)
; 0000 011A /***************************************************************************************
; 0000 011B *    ABSTRAKSI      :     Pengendali urutan pengiriman data CRC-16 CCITT Penyusun
; 0000 011C *                nilai 8 MSB dan 8 LSB dari nilai CRC yang telah dihitung.
; 0000 011D *                Generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 011E *                leading one.
; 0000 011F *
; 0000 0120 *          INPUT        :    tak ada
; 0000 0121 *    OUTPUT        :       tak ada
; 0000 0122 *    RETURN        :       tak ada
; 0000 0123 */
; 0000 0124 {
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
; 0000 0125     static unsigned char crc_lo;
; 0000 0126     static unsigned char crc_hi;
; 0000 0127 
; 0000 0128         // Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 LSB
; 0000 0129         crc_lo = crc ^ 0xFF;
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 012A 
; 0000 012B         // geser kanan 8 bit dan Exor-kan nilai CRC terakhir dengan 0xFF, masukkan ke 8 MSB
; 0000 012C         crc_hi = (crc >> 8) ^ 0xFF;
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 012D 
; 0000 012E         // kirim 8 LSB
; 0000 012F         kirim_karakter(crc_lo);
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
; 0000 0130 
; 0000 0131         // kirim 8 MSB
; 0000 0132         kirim_karakter(crc_hi);
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
;PCODE: $00000129 VOL: 0
; 0000 0133 
; 0000 0134 }       // EndOf void kirim_crc(void)
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
;
;
;/***************************************************************************************/
;    void             kirim_karakter(unsigned char input)
; 0000 0139 /***************************************************************************************
; 0000 013A *    ABSTRAKSI      :     mengirim data APRS karakter-demi-karakter, menghitung FCS
; 0000 013B *                field dan melakukan bit stuffing. Polarisasi data adalah
; 0000 013C *                NRZI (Non Return to Zero, Inverted). Bit dikirimkan sebagai
; 0000 013D *                bit terakhir yang ditahan jika bit masukan adalah bit 1.
; 0000 013E *                Bit dikirimkan sebagai bit terakhir yang di-invert jika bit
; 0000 013F *                masukan adalah bit 0. Tone 1200Hz dan 2200Hz masing - masing
; 0000 0140 *                 merepresentasikan bit 0 dan 1 atau sebaliknya. Polarisasi
; 0000 0141 *                tone adalah tidak penting dalam polarisasi data NRZI.
; 0000 0142 *
; 0000 0143 *          INPUT        :    byte data protokol APRS
; 0000 0144 *    OUTPUT        :       tak ada
; 0000 0145 *    RETURN        :       tak ada
; 0000 0146 */
; 0000 0147 {
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
; 0000 0148     char i;
; 0000 0149     bit in_bit;
; 0000 014A 
; 0000 014B         // kirimkan setiap byte data (8 bit)
; 0000 014C     for(i=0;i<8;i++)
;PCODE: $0000012E VOL: 0
;	input -> Y+1
;	i -> R17
;	in_bit -> R15.0
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 014D         {
; 0000 014E             // ambil 1 bit berurutan dari LSB ke MSB setiap perulangan for 0 - 7
; 0000 014F                 in_bit = (input >> i) & 0x01;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 0150 
; 0000 0151                 // jika data adalah flag, nol-kan pengingat bit stuffing
; 0000 0152                 if(input==0x7E)    {bit_stuff = 0;}
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
;PCODE: $00000144 VOL: 0
; 0000 0153 
; 0000 0154                 // jika bukan flag, hitung nilai CRC dari bit data saat ini
; 0000 0155                 else        {hitung_crc(in_bit);}
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
;PCODE: $0000014A VOL: 0
;PCODE: $0000014B VOL: 0
; 0000 0156 
; 0000 0157                 // jika bit data saat ini adalah
; 0000 0158                 // nol
; 0000 0159                 if(!in_bit)
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
; 0000 015A                 {    // jika ya
; 0000 015B                     // ubah tone dan bentuk gelombang sinus
; 0000 015C                         ubah_nada();
;PCODE: $0000014F VOL: 0
; 0000 015D 
; 0000 015E                         // nol-kan pengingat bit stuffing
; 0000 015F                         bit_stuff = 0;
;PCODE: $00000150 VOL: 0
;PCODE: $00000151 VOL: 0
; 0000 0160                 }
; 0000 0161                 // satu
; 0000 0162                 else
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
; 0000 0163                 {    // jika ya
; 0000 0164                     // jaga tone dan bentuk gelombang sinus
; 0000 0165                         set_nada(nada);
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
; 0000 0166 
; 0000 0167                         // hitung sebagai bit stuffing (bit satu berurut) tambahkan 1 nilai bit stuffing
; 0000 0168                         bit_stuff++;
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
; 0000 0169 
; 0000 016A                         // jika sudah terjadi bit satu berurut sebanyak 5 kali
; 0000 016B                         if(bit_stuff==5)
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
; 0000 016C                         {
; 0000 016D                             // kirim bit nol :
; 0000 016E                                 // ubah tone dan bentuk gelombang sinus
; 0000 016F                                 ubah_nada();
;PCODE: $0000015E VOL: 0
; 0000 0170 
; 0000 0171                                 // nol-kan pengingat bit stuffing
; 0000 0172                                 bit_stuff = 0;
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
; 0000 0173 
; 0000 0174                         }
; 0000 0175                 }
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
; 0000 0176         }
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
; 0000 0177 
; 0000 0178 }      // EndOf void kirim_karakter(unsigned char input)
;PCODE: $00000168 VOL: 0
;PCODE: $00000169 VOL: 0
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;
;
;/***************************************************************************************/
;    void             hitung_crc(char in_crc)
; 0000 017D /***************************************************************************************
; 0000 017E *    ABSTRAKSI      :     menghitung nilai CRC-16 CCITT dari tiap bit data yang terkirim,
; 0000 017F *                generator polinomial, G(x) = x^16 + x^12 + x^5 + 1 tanpa
; 0000 0180 *                leading one
; 0000 0181 *
; 0000 0182 *          INPUT        :    bit data yang terkirim
; 0000 0183 *    OUTPUT        :       tak ada
; 0000 0184 *    RETURN        :       tak ada
; 0000 0185 */
; 0000 0186 {
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 0187     static unsigned short xor_in;
; 0000 0188 
; 0000 0189         // simpan nilai Exor dari CRC sementara dengan bit data yang baru terkirim
; 0000 018A     xor_in = crc ^ in_crc;
;	in_crc -> Y+0
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
;PCODE: $00000172 VOL: 0
; 0000 018B 
; 0000 018C         // geser kanan nilai CRC sebanyak 1 bit
; 0000 018D     crc >>= 1;
;PCODE: $00000173 VOL: 0
; 0000 018E 
; 0000 018F         // jika hasil nilai Exor di-and-kan dengan satu bernilai satu
; 0000 0190         if(xor_in & 0x01)
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
; 0000 0191             // maka nilai CRC di-Exor-kan dengan generator polinomial
; 0000 0192                 crc ^= 0x8408;
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
;PCODE: $00000179 VOL: 0
; 0000 0193 
; 0000 0194 }      // EndOf void hitung_crc(char in_crc)
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;
;
;/***************************************************************************************/
;    void             ubah_nada(void)
; 0000 0199 /***************************************************************************************
; 0000 019A *    ABSTRAKSI      :     Menukar seting tone terakhir dengan tone yang baru. Tone
; 0000 019B *                1200Hz dan 2200Hz masing - masing merepresentasikan bit
; 0000 019C *                0 dan 1 atau sebaliknya. Polarisasi tone adalah tidak
; 0000 019D *                penting dalam polarisasi data NRZI.
; 0000 019E *
; 0000 019F *          INPUT        :    tak ada
; 0000 01A0 *    OUTPUT        :       tak ada
; 0000 01A1 *    RETURN        :       tak ada
; 0000 01A2 */
; 0000 01A3 {
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
; 0000 01A4     // jika tone terakhir adalah :
; 0000 01A5         // 1200Hz
; 0000 01A6         if(nada ==_1200)
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
;PCODE: $00000182 VOL: 0
; 0000 01A7     {    // jika ya
; 0000 01A8             // ubah tone saat ini menjadi 2200Hz
; 0000 01A9                 nada = _2200;
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 01AA 
; 0000 01AB                 // bangkitkan gelombang sinus 2200Hz
; 0000 01AC             set_nada(nada);
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
; 0000 01AD     }
; 0000 01AE         // 2200Hz
; 0000 01AF         else
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
; 0000 01B0         {    // jika ya
; 0000 01B1             // ubah tone saat ini menjadi 1200Hz
; 0000 01B2                 nada = _1200;
;PCODE: $0000018B VOL: 0
;PCODE: $0000018C VOL: 0
; 0000 01B3 
; 0000 01B4                 // bangkitkan gelombang sinus 1200Hz
; 0000 01B5             set_nada(nada);
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 01B6         }
;PCODE: $00000191 VOL: 0
; 0000 01B7 
; 0000 01B8 }       // EndOf void ubah_nada(void)
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;
;
;/***************************************************************************************/
;    void             set_dac(char value)
; 0000 01BD /***************************************************************************************
; 0000 01BE *    ABSTRAKSI      :     Men-set dan reset output DAC sebagai bilangan biner yang
; 0000 01BF *                merepresentasikan nilai diskrit dari gelombang sinus yang
; 0000 01C0 *                sedang dibentuk saat ini sehingga membentuk tegangan sampling
; 0000 01C1 *                dari gelombang.
; 0000 01C2 *
; 0000 01C3 *          INPUT        :    nilai matrix rekonstruksi diskrit gelombang sinusoid
; 0000 01C4 *    OUTPUT        :       DAC 0 - 3, tegangan kontinyu pada output Low Pass Filter
; 0000 01C5 *    RETURN        :       tak ada
; 0000 01C6 */
; 0000 01C7 {
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 01C8     // ambil nilai LSB dari matrix rekonstruksi dan set sebagai DAC-0
; 0000 01C9         DAC_0 = value & 0x01;
;	value -> Y+0
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 0
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 01CA 
; 0000 01CB         // ambil nilai dari matrix rekonstruksi, geser kanan 1 bit, ambil bit paling kanan
; 0000 01CC             // dan set sebagai DAC-1
; 0000 01CD         DAC_1 =( value >> 1 ) & 0x01;
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
; 0000 01CE 
; 0000 01CF         // ambil nilai dari matrix rekonstruksi, geser kanan 2 bit, ambil bit paling kanan
; 0000 01D0             // dan set sebagai DAC-2
; 0000 01D1         DAC_2 =( value >> 2 ) & 0x01;
;PCODE: $000001AC VOL: 0
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 0
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
;PCODE: $000001B2 VOL: 0
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 01D2 
; 0000 01D3         // ambil nilai dari matrix rekonstruksi, geser kanan 3 bit, ambil bit tersebut dan
; 0000 01D4             // set sebagai DAC-3 (MSB)
; 0000 01D5         DAC_3 =( value >> 3 ) & 0x01;
;PCODE: $000001B8 VOL: 0
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
; 0000 01D6 
; 0000 01D7 }          // EndOf void set_dac(char value)
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
;PCODE: $000001C6 VOL: 0
;
;
;/***************************************************************************************/
;    void             set_nada(char i_nada)
; 0000 01DC /***************************************************************************************
; 0000 01DD *    ABSTRAKSI      :     Membentuk baudrate serta frekensi tone 1200Hz dan 2200Hz
; 0000 01DE *                dari konstanta waktu. Men-setting nilai DAC. Lakukan fine
; 0000 01DF *                tuning pada jumlah masing - masing perulangan for dan
; 0000 01E0 *                konstanta waktu untuk meng-adjust parameter baudrate dan
; 0000 01E1 *                frekuensi tone.
; 0000 01E2 *
; 0000 01E3 *          INPUT        :    nilai frekuensi tone yang akan ditransmisikan
; 0000 01E4 *    OUTPUT        :       nilai DAC
; 0000 01E5 *    RETURN        :       tak ada
; 0000 01E6 */
; 0000 01E7 {
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
; 0000 01E8     char i;
; 0000 01E9 
; 0000 01EA         // jika frekuensi tone yang akan segera dipancarkan adalah :
; 0000 01EB         // 1200Hz
; 0000 01EC     if(i_nada == _1200)
;PCODE: $000001C9 VOL: 0
;	i_nada -> Y+1
;	i -> R17
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
;PCODE: $000001CC VOL: 0
; 0000 01ED         {
; 0000 01EE             // jika ya
; 0000 01EF             for(i=0; i<16; i++)
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 0
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
;PCODE: $000001D3 VOL: 0
;PCODE: $000001D4 VOL: 0
;PCODE: $000001D5 VOL: 0
; 0000 01F0             {
; 0000 01F1                     // set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 01F2                         // dan urutan perulangan for 0 - 15
; 0000 01F3                     set_dac(matrix[i]);
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 01F4 
; 0000 01F5                         // bangkitkan frekuensi 1200Hz dari konstanta waktu
; 0000 01F6                 delay_us(CONST_1200);
;PCODE: $000001DC VOL: 0
; 0000 01F7             }
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
; 0000 01F8         }
; 0000 01F9         // 2200Hz
; 0000 01FA         else
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
; 0000 01FB         {
; 0000 01FC             // jika ya
; 0000 01FD             for(i=0; i<16; i++)
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 0
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 01FE             {
; 0000 01FF                     // set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 0200                         // dan urutan perulangan for 0 - 15
; 0000 0201                     set_dac(matrix[i]);
;PCODE: $000001ED VOL: 0
;PCODE: $000001EE VOL: 0
;PCODE: $000001EF VOL: 0
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 0202 
; 0000 0203                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
; 0000 0204                     delay_us(CONST_2200);
;PCODE: $000001F3 VOL: 0
; 0000 0205                 }
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
; 0000 0206                 // sekali lagi, untuk mengatur baudrate lakukan fine tune pada jumlah for
; 0000 0207                 for(i=0; i<13; i++)
;PCODE: $000001F9 VOL: 0
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
; 0000 0208                 {
; 0000 0209                     // set nilai DAC sesuai urutan matrix rekonstruksi gelombang sinus
; 0000 020A                         // dan urutan perulangan for
; 0000 020B                     set_dac(matrix[i]);
;PCODE: $00000202 VOL: 0
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 0
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
;PCODE: $00000207 VOL: 0
; 0000 020C 
; 0000 020D                         // bangkitkan frekuensi 2200Hz dari konstanta waktu
; 0000 020E                     delay_us(CONST_2200);
;PCODE: $00000208 VOL: 0
; 0000 020F                 }
;PCODE: $00000209 VOL: 0
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
;PCODE: $0000020D VOL: 0
; 0000 0210         }
;PCODE: $0000020E VOL: 0
; 0000 0211 
; 0000 0212 }     // EndOf void set_nada(char i_nada)
;PCODE: $0000020F VOL: 0
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
;
;
;/***************************************************************************************/
;    void             getComma(void)
; 0000 0217 /***************************************************************************************
; 0000 0218 *    ABSTRAKSI      :     Menunggu data RX serial berupa karakter koma dan segera
; 0000 0219 *                kembali pada fungsi yang memanggilnya.
; 0000 021A *
; 0000 021B *          INPUT        :    RX data serial $GPGLL gps
; 0000 021C *    OUTPUT        :       tak ada
; 0000 021D *    RETURN        :       tak ada
; 0000 021E */
; 0000 021F {
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
; 0000 0220     // jika data yang diterima bukan karakter koma, terima terus
; 0000 0221             // jika data yang diterima adalah koma, keluar
; 0000 0222         while(getchar() != ',');
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
; 0000 0223 
; 0000 0224 }          // EndOf void getComma(void)
;PCODE: $0000021C VOL: 0
;PCODE: $0000021D VOL: 0
;
;
;/***************************************************************************************/
;    void             ekstrak_gps(void)
; 0000 0229 /***************************************************************************************
; 0000 022A *    ABSTRAKSI      :     Menunggu interupsi RX data serial dari USART, memparsing
; 0000 022B *                data $GPGLL yang diterima menjadi data posisi, dan mengupdate
; 0000 022C *                data variabel posisi.
; 0000 022D *
; 0000 022E *          INPUT        :    RX data serial $GPGLL gps
; 0000 022F *    OUTPUT        :       tak ada
; 0000 0230 *    RETURN        :       tak ada
; 0000 0231 */
; 0000 0232 {
;PCODE: $0000021E VOL: 0
;PCODE: $0000021F VOL: 0
; 0000 0233     int i;
; 0000 0234         static char buff_posisi[17];
; 0000 0235 
; 0000 0236         // aktifkan USART param. : 4800baudrate, 8, N, 1
; 0000 0237         init_usart();
;PCODE: $00000220 VOL: 0
;	i -> R16,R17
;PCODE: $00000221 VOL: 0
; 0000 0238 
; 0000 0239         /************************************************************************************************
; 0000 023A             $GPGLL - GLL - Geographic Position Latitude / Longitude
; 0000 023B 
; 0000 023C                 Contoh : $GPGLL,3723.2475,N,12158.3416,W,161229.487,A*2C
; 0000 023D 
; 0000 023E         |-----------------------------------------------------------------------------------------------|
; 0000 023F         |    Nama        |     Contoh        |        Deskripsi            |
; 0000 0240         |-----------------------|-----------------------|-----------------------------------------------|
; 0000 0241         |    Message ID    |    $GPGLL        |    header protokol GLL            |
; 0000 0242         |    Latitude    |    3723.2475    |    ddmm.mmmm     , d=degree, m=minute    |
; 0000 0243         |    N/S indicator    |    N        |    N=utara, S=selatan            |
; 0000 0244         |    Longitude    |    12158.3416    |    dddmm.mmmm    , d=degree, m=minute    |
; 0000 0245         |    W/E indicator    |    W        |    W=barat, E=timur            |
; 0000 0246         |    Waktu UTC (GMT)    |    161229.487    |    HHMMSS.SS  ,H=hour, M=minute, S=second    |
; 0000 0247         |    Status        |    A        |    A=data valid, V=data invalid        |
; 0000 0248         |    Checksum    |    *2C        |                        |
; 0000 0249         |-----------------------------------------------------------------------------------------------|
; 0000 024A 
; 0000 024B             Sumber : GPS SiRF EM-406A datasheet
; 0000 024C 
; 0000 024D         *************************************************************************************************/
; 0000 024E 
; 0000 024F         // jika data yang diterima bukan karakter $, terima terus
; 0000 0250             // jika data yang diterima adalah $, lanjutkan
; 0000 0251         while(getchar() != '$');
;PCODE: $00000222 VOL: 0
;PCODE: $00000223 VOL: 0
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
;PCODE: $00000227 VOL: 0
; 0000 0252 
; 0000 0253         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter G)
; 0000 0254     getchar();
;PCODE: $00000228 VOL: 0
; 0000 0255 
; 0000 0256         // tunggu dan terima data tanpa proses lebih lanjut (lewatkan karakter P)
; 0000 0257         getchar();
;PCODE: $00000229 VOL: 0
; 0000 0258 
; 0000 0259         // tunggu data, jika yang diterima adalah karakter G
; 0000 025A         if(getchar() == 'R')
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
; 0000 025B         {
; 0000 025C             // maka
; 0000 025D             // tunggu data, jika yang diterima adalah karakter L
; 0000 025E                 if(getchar() == 'M')
;PCODE: $0000022D VOL: 0
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
; 0000 025F             {
; 0000 0260                     // maka
; 0000 0261                         // tunggu data, jika yang diterima adalah karakter L
; 0000 0262                         if(getchar() == 'C')
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
; 0000 0263                     {
; 0000 0264                             // maka
; 0000 0265                                 // tunggu koma dan lanjutkan
; 0000 0266                                 getComma();
;PCODE: $00000233 VOL: 0
; 0000 0267                                 getComma();
;PCODE: $00000234 VOL: 0
; 0000 0268                                 getComma();
;PCODE: $00000235 VOL: 0
; 0000 0269 
; 0000 026A                                 // ambil 7 byte data berurut dan masukkan dalam buffer data
; 0000 026B                             for(i=0; i<7; i++)    buff_posisi[i] = getchar();
;PCODE: $00000236 VOL: 0
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 0
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
;PCODE: $0000023B VOL: 0
;PCODE: $0000023C VOL: 0
;PCODE: $0000023D VOL: 0
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
; 0000 026E getComma();
;PCODE: $0000024A VOL: 0
; 0000 026F 
; 0000 0270                                 // ambil 1 byte data dan masukkan dalam buffer data
; 0000 0271                                 buff_posisi[7] = getchar();
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0272 
; 0000 0273                                 // tunggu koma dan lanjutkan
; 0000 0274                                 getComma();
;PCODE: $0000024E VOL: 0
; 0000 0275 
; 0000 0276                                 // ambil 8 byte data berurut dan masukkan dalam buffer data
; 0000 0277                                 for(i=0; i<8; i++)	buff_posisi[i+8] = getchar();
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 027A getComma();
;PCODE: $00000264 VOL: 0
; 0000 027B 
; 0000 027C                                 // ambil 1 byte data dan masukkan dalam buffer data
; 0000 027D                                 buff_posisi[16] = getchar();
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
;PCODE: $00000267 VOL: 0
; 0000 027E 
; 0000 027F                                 // segera matikan USART untuk menghindari interupsi [USART_RXC]
; 0000 0280                                 clear_usart();
;PCODE: $00000268 VOL: 0
; 0000 0281 
; 0000 0282                                 // pindahkan data dari buffer kedalam variabel posisi
; 0000 0283                                 for(i=0;i<8;i++)	{posisi_lat[i]=buff_posisi[i];}
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
;PCODE: $0000026B VOL: 0
;PCODE: $0000026C VOL: 0
;PCODE: $0000026D VOL: 0
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
;PCODE: $0000027E VOL: 0
; 0000 0284         			for(i=0;i<9;i++)	{posisi_long[i]=buff_posisi[i+8];}
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 0
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
;PCODE: $00000285 VOL: 0
;PCODE: $00000286 VOL: 0
;PCODE: $00000287 VOL: 0
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
; 0000 0285 
; 0000 0286                         }
; 0000 0287                 }
;PCODE: $00000294 VOL: 0
; 0000 0288         }
;PCODE: $00000295 VOL: 0
; 0000 0289 
; 0000 028A } 	// EndOf void ekstrak_gps(void)
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;
;
;/***************************************************************************************/
;	void 			init_usart(void)
; 0000 028F /***************************************************************************************
; 0000 0290 *	ABSTRAKSI  	: 	Setting parameter USART : RX only, 4800baud, 8, N, 1
; 0000 0291 *
; 0000 0292 *      	INPUT		:	tak ada
; 0000 0293 *	OUTPUT		:       tak ada
; 0000 0294 *	RETURN		:       tak ada
; 0000 0295 */
; 0000 0296 {
;PCODE: $0000029A VOL: 0
;PCODE: $0000029B VOL: 0
; 0000 0297 	// set parameter 4800baud, 8, N, 1
; 0000 0298 	UCSRA=0x00;
;PCODE: $0000029C VOL: 0
;PCODE: $0000029D VOL: 0
; 0000 0299 	UCSRB=0x10;
;PCODE: $0000029E VOL: 0
;PCODE: $0000029F VOL: 0
; 0000 029A 	UCSRC=0x06;
;PCODE: $000002A0 VOL: 0
;PCODE: $000002A1 VOL: 0
; 0000 029B 	UBRRH=0x00;
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
; 0000 029C 	UBRRL=0x8F;
;PCODE: $000002A4 VOL: 0
;PCODE: $000002A5 VOL: 0
; 0000 029D 
; 0000 029E }       // EndOf void init_usart(void)
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
;
;
;/***************************************************************************************/
;	void 			clear_usart(void)
; 0000 02A3 /***************************************************************************************
; 0000 02A4 *	ABSTRAKSI  	: 	Me-nonaktifkan dan menghapus parameter USART
; 0000 02A5 *
; 0000 02A6 *      	INPUT		:	tak ada
; 0000 02A7 *	OUTPUT		:       tak ada
; 0000 02A8 *	RETURN		:       tak ada
; 0000 02A9 */
; 0000 02AA {
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
; 0000 02AB 	// hapus parameter terakhir dari USART
; 0000 02AC         UCSRA=0;
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
; 0000 02AD 	UCSRB=0;
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
; 0000 02AE 	UCSRC=0;
;PCODE: $000002AE VOL: 0
;PCODE: $000002AF VOL: 0
; 0000 02AF 	UBRRH=0;
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 02B0 	UBRRL=0;
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
; 0000 02B1 
; 0000 02B2 }       // EndOf void clear_usart(void)
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;
;
;/***************************************************************************************/
;	void 			timer_detik(char detik)
; 0000 02B7 /***************************************************************************************
; 0000 02B8 *	ABSTRAKSI  	: 	Menghitung nilai register TCNT1H dan TCNT1L dari input nilai
; 0000 02B9 *				konstanta timer dalam satuan detik. Formula untuk menghitung
; 0000 02BA *				nilai register :
; 0000 02BB *				_TCNT1 = (TCNT1H << 8) + TCNT1L
; 0000 02BC *				_TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
; 0000 02BD *
; 0000 02BE *      	INPUT		:	konstanta timer dalam satuan detik
; 0000 02BF *	OUTPUT		:       tak ada
; 0000 02C0 *	RETURN		:       tak ada
; 0000 02C1 */
; 0000 02C2 {
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
; 0000 02C3 	unsigned short _TCNT1;
; 0000 02C4 
; 0000 02C5         // hitung nilai vaiabel _TCNT1 dari nilai input berdasarkan formula :
; 0000 02C6          	// _TCNT1 = (1 + 0xFFFF) - (konstanta_timer_detik * (sys_clock / prescaler))
; 0000 02C7                 // menjadi bilangan 16 bit
; 0000 02C8 	_TCNT1 = (1 + 0xFFFF) - (detik * 10800);
;PCODE: $000002B8 VOL: 0
;	detik -> Y+2
;	_TCNT1 -> R16,R17
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
; 0000 02C9 
; 0000 02CA         // ambil 8 bit paling kanan dan jadikan nilai register TCNT1L
; 0000 02CB         TCNT1L = _TCNT1 & 0xFF;
;PCODE: $000002C2 VOL: 0
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
; 0000 02CC 
; 0000 02CD         // ambil 8 bit paling kiri dan jadikan nilai register TCNT1H
; 0000 02CE         TCNT1H = _TCNT1 >> 8;
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
; 0000 02CF 
; 0000 02D0 }       // EndOf void timer_detik(char detik)
;PCODE: $000002C8 VOL: 0
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
;
;// Declare your global variables here
;
;void main(void)
; 0000 02D5 {
;PCODE: $000002CC VOL: 0
; 0000 02D6 // Declare your local variables here
; 0000 02D7 
; 0000 02D8 // Crystal Oscillator division factor: 1
; 0000 02D9 #pragma optsize-
; 0000 02DA CLKPR=0x80;
;PCODE: $000002CD VOL: 0
;PCODE: $000002CE VOL: 0
; 0000 02DB CLKPR=0x00;
;PCODE: $000002CF VOL: 0
;PCODE: $000002D0 VOL: 0
; 0000 02DC #ifdef _OPTIMIZE_SIZE_
; 0000 02DD #pragma optsize+
; 0000 02DE #endif
; 0000 02DF 
; 0000 02E0 // set bit register PORTB
; 0000 02E1         PORTB=0x00;
;PCODE: $000002D1 VOL: 0
;PCODE: $000002D2 VOL: 0
; 0000 02E2 
; 0000 02E3         // set bit Data Direction Register PORTB
; 0000 02E4 	DDRB=0xF8;
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
; 0000 02E5 
; 0000 02E6         // set bit register PORTD
; 0000 02E7         PORTD=0x09;
;PCODE: $000002D5 VOL: 0
;PCODE: $000002D6 VOL: 0
; 0000 02E8 
; 0000 02E9         // set bit Data Direction Register PORTD
; 0000 02EA 	DDRD=0x30;
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 02EB 
; 0000 02EC         // set register Analog Comparator
; 0000 02ED         ACSR=0x80;
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
; 0000 02EE 
; 0000 02EF         // set register EXT_IRQ_1 (External Interrupt 1 Request), Low Interrupt
; 0000 02F0 	GIMSK=0x80;
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
; 0000 02F1 	MCUCR=0x08;
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
; 0000 02F2 	EIFR=0x80;
;PCODE: $000002DF VOL: 0
;PCODE: $000002E0 VOL: 0
; 0000 02F3 
; 0000 02F4         // set register Timer 1, System clock 10.8kHz, Timer 1 overflow
; 0000 02F5 	TCCR1B=0x05;
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 02F6 
; 0000 02F7         // set konstanta waktu 5 detik sebagai awalan
; 0000 02F8         timer_detik(INITIAL_TIME_C);
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
; 0000 02F9 
; 0000 02FA         // set interupsi timer untuk Timer 1
; 0000 02FB         TIMSK=0x80;
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
; 0000 02FC 
; 0000 02FD         // indikator awalan hardware aktif :
; 0000 02FE         // nyalakan LED busy
; 0000 02FF         L_BUSY = 1;
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 0300 
; 0000 0301         // tunggu 500ms
; 0000 0302         delay_ms(500);
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 0303 
; 0000 0304         // nyalakan LED standby
; 0000 0305         L_STBY = 1;
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
; 0000 0306 
; 0000 0307         // tunggu 500ms
; 0000 0308         delay_ms(500);
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
; 0000 0309 
; 0000 030A         // matikan LED busy
; 0000 030B         L_BUSY = 0;
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 030C 
; 0000 030D         // tunggu 500ms
; 0000 030E         delay_ms(500);
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
; 0000 030F 
; 0000 0310     // Global enable interrupts
; 0000 0311     #asm("sei")
;PCODE: $000002F7 VOL: 0
	sei
;PCODE: $000002F8 VOL: 0
; 0000 0312 
; 0000 0313     while (1)
;PCODE: $000002F9 VOL: 0
; 0000 0314     {
; 0000 0315       // Place your code here
; 0000 0316 
; 0000 0317     }
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
; 0000 0318 }
;PCODE: $000002FC VOL: 0
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 0
